
ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008224  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  080083e4  080083e4  000183e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008560  08008560  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08008560  08008560  00018560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008568  08008568  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008568  08008568  00018568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800856c  0800856c  0001856c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08008570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005024  2000005c  080085cc  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005080  080085cc  00025080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000188cd  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b9c  00000000  00000000  0003899c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c8  00000000  00000000  0003b538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f7a  00000000  00000000  0003c900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031bae  00000000  00000000  0003d87a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019e59  00000000  00000000  0006f428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012cd1e  00000000  00000000  00089281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a10  00000000  00000000  001b5fa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001bb9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000005c 	.word	0x2000005c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080083cc 	.word	0x080083cc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000060 	.word	0x20000060
 80001fc:	080083cc 	.word	0x080083cc

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b0a8      	sub	sp, #160	; 0xa0
 80005a0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f001 fdd7 	bl	8002154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f8eb 	bl	8000780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 fc79 	bl	8000ea0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005ae:	f000 fa1f 	bl	80009f0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80005b2:	f000 fa5d 	bl	8000a70 <MX_I2C2_Init>
  MX_OCTOSPI2_Init();
 80005b6:	f000 fb1b 	bl	8000bf0 <MX_OCTOSPI2_Init>
  MX_SPI1_Init();
 80005ba:	f000 fb6f 	bl	8000c9c <MX_SPI1_Init>
  MX_SPI2_Init();
 80005be:	f000 fbab 	bl	8000d18 <MX_SPI2_Init>
  MX_UART4_Init();
 80005c2:	f000 fc21 	bl	8000e08 <MX_UART4_Init>
  MX_DSIHOST_DSI_Init();
 80005c6:	f000 f929 	bl	800081c <MX_DSIHOST_DSI_Init>
  MX_LTDC_Init();
 80005ca:	f000 fa91 	bl	8000af0 <MX_LTDC_Init>
  MX_SPI3_Init();
 80005ce:	f000 fbdd 	bl	8000d8c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  mipi_config();
 80005d2:	f000 fdcd 	bl	8001170 <mipi_config>
  HAL_UART_Transmit(&huart4, "ble start", 9, 1000);
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	2209      	movs	r2, #9
 80005dc:	495c      	ldr	r1, [pc, #368]	; (8000750 <main+0x1b4>)
 80005de:	485d      	ldr	r0, [pc, #372]	; (8000754 <main+0x1b8>)
 80005e0:	f006 fba8 	bl	8006d34 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int frame_buf_count = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f0:	4859      	ldr	r0, [pc, #356]	; (8000758 <main+0x1bc>)
 80005f2:	f002 ffaf 	bl	8003554 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005fc:	4856      	ldr	r0, [pc, #344]	; (8000758 <main+0x1bc>)
 80005fe:	f002 ffa9 	bl	8003554 <HAL_GPIO_WritePin>
  	  HAL_Delay(10);
 8000602:	200a      	movs	r0, #10
 8000604:	f001 fe22 	bl	800224c <HAL_Delay>
  	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 8000608:	2201      	movs	r2, #1
 800060a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800060e:	4852      	ldr	r0, [pc, #328]	; (8000758 <main+0x1bc>)
 8000610:	f002 ffa0 	bl	8003554 <HAL_GPIO_WritePin>
  	__HAL_SPI_ENABLE(&hspi1);
 8000614:	4b51      	ldr	r3, [pc, #324]	; (800075c <main+0x1c0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	4b50      	ldr	r3, [pc, #320]	; (800075c <main+0x1c0>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000622:	601a      	str	r2, [r3, #0]
	__HAL_SPI_ENABLE(&hspi3);
 8000624:	4b4e      	ldr	r3, [pc, #312]	; (8000760 <main+0x1c4>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	4b4d      	ldr	r3, [pc, #308]	; (8000760 <main+0x1c4>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000632:	601a      	str	r2, [r3, #0]

	uint8_t  BLE_status[20], BAUD_1[20], BAUD_2[20], NAME_1[20], NAME_2[20], led[20], TXTX[20];
	sprintf(BAUD_1,"%c%c%c%c%s",0x10,0x00,0x0A,0x8C,"AT+BAUDRATE="); //Bit 7 of payload size is also set
 8000634:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8000638:	4b4a      	ldr	r3, [pc, #296]	; (8000764 <main+0x1c8>)
 800063a:	9302      	str	r3, [sp, #8]
 800063c:	238c      	movs	r3, #140	; 0x8c
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	230a      	movs	r3, #10
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	2300      	movs	r3, #0
 8000646:	2210      	movs	r2, #16
 8000648:	4947      	ldr	r1, [pc, #284]	; (8000768 <main+0x1cc>)
 800064a:	f007 fa1b 	bl	8007a84 <siprintf>
	sprintf(BAUD_2,"%c%c%c%c%s",0x10,0x00,0x0A,0x06,"115200");
 800064e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000652:	4b46      	ldr	r3, [pc, #280]	; (800076c <main+0x1d0>)
 8000654:	9302      	str	r3, [sp, #8]
 8000656:	2306      	movs	r3, #6
 8000658:	9301      	str	r3, [sp, #4]
 800065a:	230a      	movs	r3, #10
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	2300      	movs	r3, #0
 8000660:	2210      	movs	r2, #16
 8000662:	4941      	ldr	r1, [pc, #260]	; (8000768 <main+0x1cc>)
 8000664:	f007 fa0e 	bl	8007a84 <siprintf>
	sprintf(NAME_1,"%c%c%c%c%s",0x10,0x00,0x0A,0x8E,"AT+GAPDEVNAME="); //Bit 7 of payload size is also set
 8000668:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800066c:	4b40      	ldr	r3, [pc, #256]	; (8000770 <main+0x1d4>)
 800066e:	9302      	str	r3, [sp, #8]
 8000670:	238e      	movs	r3, #142	; 0x8e
 8000672:	9301      	str	r3, [sp, #4]
 8000674:	230a      	movs	r3, #10
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	2300      	movs	r3, #0
 800067a:	2210      	movs	r2, #16
 800067c:	493a      	ldr	r1, [pc, #232]	; (8000768 <main+0x1cc>)
 800067e:	f007 fa01 	bl	8007a84 <siprintf>
	sprintf(NAME_2,"%c%c%c%c%s",0x10,0x00,0x0A,0x08,"LED Demo");
 8000682:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000686:	4b3b      	ldr	r3, [pc, #236]	; (8000774 <main+0x1d8>)
 8000688:	9302      	str	r3, [sp, #8]
 800068a:	2308      	movs	r3, #8
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	230a      	movs	r3, #10
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2300      	movs	r3, #0
 8000694:	2210      	movs	r2, #16
 8000696:	4934      	ldr	r1, [pc, #208]	; (8000768 <main+0x1cc>)
 8000698:	f007 f9f4 	bl	8007a84 <siprintf>
	sprintf(led,"%c%c%c%c%s",0x10,0x00,0x0A,0x0E,"AT+HWMODELED=0"); //Default is 1
 800069c:	f107 0014 	add.w	r0, r7, #20
 80006a0:	4b35      	ldr	r3, [pc, #212]	; (8000778 <main+0x1dc>)
 80006a2:	9302      	str	r3, [sp, #8]
 80006a4:	230e      	movs	r3, #14
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	230a      	movs	r3, #10
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	2300      	movs	r3, #0
 80006ae:	2210      	movs	r2, #16
 80006b0:	492d      	ldr	r1, [pc, #180]	; (8000768 <main+0x1cc>)
 80006b2:	f007 f9e7 	bl	8007a84 <siprintf>
	//sprintf(TXTX,"%c%c%c%c%s",0x10,0x01,0x0A,0x0E,"aaaaaaaaaaaaaa"); //TX
	sprintf(TXTX,"%c%c%c%c%s",0x10,0x01,0x0A,0x03,"123"); //TX
 80006b6:	4638      	mov	r0, r7
 80006b8:	4b30      	ldr	r3, [pc, #192]	; (800077c <main+0x1e0>)
 80006ba:	9302      	str	r3, [sp, #8]
 80006bc:	2303      	movs	r3, #3
 80006be:	9301      	str	r3, [sp, #4]
 80006c0:	230a      	movs	r3, #10
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2301      	movs	r3, #1
 80006c6:	2210      	movs	r2, #16
 80006c8:	4927      	ldr	r1, [pc, #156]	; (8000768 <main+0x1cc>)
 80006ca:	f007 f9db 	bl	8007a84 <siprintf>

	HAL_Delay(3000);
 80006ce:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006d2:	f001 fdbb 	bl	800224c <HAL_Delay>

	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_Delay(5);
 80006d6:	2005      	movs	r0, #5
 80006d8:	f001 fdb8 	bl	800224c <HAL_Delay>
		Wrap(&BAUD_1, sizeof BAUD_1);
 80006dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80006e0:	2114      	movs	r1, #20
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 f8ce 	bl	8001884 <Wrap>
		HAL_Delay(5);
 80006e8:	2005      	movs	r0, #5
 80006ea:	f001 fdaf 	bl	800224c <HAL_Delay>
		Wrap(&BAUD_2, sizeof BAUD_2);
 80006ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80006f2:	2114      	movs	r1, #20
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 f8c5 	bl	8001884 <Wrap>
		HAL_Delay(5);
 80006fa:	2005      	movs	r0, #5
 80006fc:	f001 fda6 	bl	800224c <HAL_Delay>
		Wrap(&NAME_1, sizeof NAME_1);
 8000700:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000704:	2114      	movs	r1, #20
 8000706:	4618      	mov	r0, r3
 8000708:	f001 f8bc 	bl	8001884 <Wrap>
		HAL_Delay(5);
 800070c:	2005      	movs	r0, #5
 800070e:	f001 fd9d 	bl	800224c <HAL_Delay>
		Wrap(&NAME_2, sizeof NAME_2);
 8000712:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000716:	2114      	movs	r1, #20
 8000718:	4618      	mov	r0, r3
 800071a:	f001 f8b3 	bl	8001884 <Wrap>
		HAL_Delay(5);
 800071e:	2005      	movs	r0, #5
 8000720:	f001 fd94 	bl	800224c <HAL_Delay>
		Wrap(&led, sizeof led);
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	2114      	movs	r1, #20
 800072a:	4618      	mov	r0, r3
 800072c:	f001 f8aa 	bl	8001884 <Wrap>

		while(1)
		{
			HAL_Delay(1000);
 8000730:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000734:	f001 fd8a 	bl	800224c <HAL_Delay>
			WriteBLE(&TXTX, sizeof TXTX);
 8000738:	463b      	mov	r3, r7
 800073a:	2114      	movs	r1, #20
 800073c:	4618      	mov	r0, r3
 800073e:	f000 ffaf 	bl	80016a0 <WriteBLE>
			HAL_Delay(1000);
 8000742:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000746:	f001 fd81 	bl	800224c <HAL_Delay>
			ReadBLE();
 800074a:	f001 f817 	bl	800177c <ReadBLE>
		{
 800074e:	e7ef      	b.n	8000730 <main+0x194>
 8000750:	080083e4 	.word	0x080083e4
 8000754:	20000360 	.word	0x20000360
 8000758:	48001400 	.word	0x48001400
 800075c:	20000234 	.word	0x20000234
 8000760:	200002fc 	.word	0x200002fc
 8000764:	080083fc 	.word	0x080083fc
 8000768:	080083f0 	.word	0x080083f0
 800076c:	0800840c 	.word	0x0800840c
 8000770:	08008414 	.word	0x08008414
 8000774:	08008424 	.word	0x08008424
 8000778:	08008430 	.word	0x08008430
 800077c:	08008440 	.word	0x08008440

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b096      	sub	sp, #88	; 0x58
 8000784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	2244      	movs	r2, #68	; 0x44
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f007 f998 	bl	8007ac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000794:	463b      	mov	r3, r7
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80007a2:	2000      	movs	r0, #0
 80007a4:	f003 ffd4 	bl	8004750 <HAL_PWREx_ControlVoltageScaling>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80007ae:	f001 f8df 	bl	8001970 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b2:	2301      	movs	r3, #1
 80007b4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007bc:	2302      	movs	r3, #2
 80007be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c0:	2303      	movs	r3, #3
 80007c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007c4:	2301      	movs	r3, #1
 80007c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80007c8:	231e      	movs	r3, #30
 80007ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007cc:	2302      	movs	r3, #2
 80007ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007d0:	2302      	movs	r3, #2
 80007d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4618      	mov	r0, r3
 80007de:	f004 f86b 	bl	80048b8 <HAL_RCC_OscConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80007e8:	f001 f8c2 	bl	8001970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ec:	230f      	movs	r3, #15
 80007ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f0:	2303      	movs	r3, #3
 80007f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000800:	463b      	mov	r3, r7
 8000802:	2105      	movs	r1, #5
 8000804:	4618      	mov	r0, r3
 8000806:	f004 fc71 	bl	80050ec <HAL_RCC_ClockConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000810:	f001 f8ae 	bl	8001970 <Error_Handler>
  }
}
 8000814:	bf00      	nop
 8000816:	3758      	adds	r7, #88	; 0x58
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b0ae      	sub	sp, #184	; 0xb8
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000822:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 800082e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000832:	2224      	movs	r2, #36	; 0x24
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f007 f944 	bl	8007ac4 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800083c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
 800084c:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	226c      	movs	r2, #108	; 0x6c
 8000852:	2100      	movs	r1, #0
 8000854:	4618      	mov	r0, r3
 8000856:	f007 f935 	bl	8007ac4 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 800085a:	4b63      	ldr	r3, [pc, #396]	; (80009e8 <MX_DSIHOST_DSI_Init+0x1cc>)
 800085c:	4a63      	ldr	r2, [pc, #396]	; (80009ec <MX_DSIHOST_DSI_Init+0x1d0>)
 800085e:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000860:	4b61      	ldr	r3, [pc, #388]	; (80009e8 <MX_DSIHOST_DSI_Init+0x1cc>)
 8000862:	2200      	movs	r2, #0
 8000864:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 2;
 8000866:	4b60      	ldr	r3, [pc, #384]	; (80009e8 <MX_DSIHOST_DSI_Init+0x1cc>)
 8000868:	2202      	movs	r2, #2
 800086a:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 800086c:	4b5e      	ldr	r3, [pc, #376]	; (80009e8 <MX_DSIHOST_DSI_Init+0x1cc>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 50;
 8000872:	2332      	movs	r3, #50	; 0x32
 8000874:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8000878:	2301      	movs	r3, #1
 800087a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 800087e:	2301      	movs	r3, #1
 8000880:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000884:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000888:	4619      	mov	r1, r3
 800088a:	4857      	ldr	r0, [pc, #348]	; (80009e8 <MX_DSIHOST_DSI_Init+0x1cc>)
 800088c:	f001 fe5c 	bl	8002548 <HAL_DSI_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 8000896:	f001 f86b 	bl	8001970 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 800089a:	2301      	movs	r3, #1
 800089c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 80008be:	2300      	movs	r3, #0
 80008c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80008d0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80008d4:	4619      	mov	r1, r3
 80008d6:	4844      	ldr	r0, [pc, #272]	; (80009e8 <MX_DSIHOST_DSI_Init+0x1cc>)
 80008d8:	f002 faa9 	bl	8002e2e <HAL_DSI_ConfigHostTimeouts>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 80008e2:	f001 f845 	bl	8001970 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 19;
 80008e6:	2313      	movs	r3, #19
 80008e8:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 15;
 80008ea:	230f      	movs	r3, #15
 80008ec:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 9;
 80008ee:	2309      	movs	r3, #9
 80008f0:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 10;
 80008f2:	230a      	movs	r3, #10
 80008f4:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000902:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000906:	4619      	mov	r1, r3
 8000908:	4837      	ldr	r0, [pc, #220]	; (80009e8 <MX_DSIHOST_DSI_Init+0x1cc>)
 800090a:	f002 fa26 	bl	8002d5a <HAL_DSI_ConfigPhyTimer>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 8000914:	f001 f82c 	bl	8001970 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000918:	f242 7110 	movw	r1, #10000	; 0x2710
 800091c:	4832      	ldr	r0, [pc, #200]	; (80009e8 <MX_DSIHOST_DSI_Init+0x1cc>)
 800091e:	f002 fc42 	bl	80031a6 <HAL_DSI_SetLowPowerRXFilter>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_DSIHOST_DSI_Init+0x110>
  {
    Error_Handler();
 8000928:	f001 f822 	bl	8001970 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 800092c:	2100      	movs	r1, #0
 800092e:	482e      	ldr	r0, [pc, #184]	; (80009e8 <MX_DSIHOST_DSI_Init+0x1cc>)
 8000930:	f001 ff26 	bl	8002780 <HAL_DSI_ConfigErrorMonitor>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 800093a:	f001 f819 	bl	8001970 <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 8000942:	2305      	movs	r3, #5
 8000944:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_NB_EVENTS;
 800094a:	2301      	movs	r3, #1
 800094c:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 80;
 800094e:	2350      	movs	r3, #80	; 0x50
 8000950:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 1;
 8000952:	2301      	movs	r3, #1
 8000954:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 800095a:	2300      	movs	r3, #0
 800095c:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = 252;
 8000966:	23fc      	movs	r3, #252	; 0xfc
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = 252;
 800096a:	23fc      	movs	r3, #252	; 0xfc
 800096c:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = 836;
 800096e:	f44f 7351 	mov.w	r3, #836	; 0x344
 8000972:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = 8;
 8000974:	2308      	movs	r3, #8
 8000976:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = 8;
 8000978:	2308      	movs	r3, #8
 800097a:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = 8;
 800097c:	2308      	movs	r3, #8
 800097e:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = 80;
 8000980:	2350      	movs	r3, #80	; 0x50
 8000982:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8000984:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000988:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 28;
 800098a:	231c      	movs	r3, #28
 800098c:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 80;
 800098e:	2350      	movs	r3, #80	; 0x50
 8000990:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 8000992:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000996:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 8000998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099c:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 800099e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 80009a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a8:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 80009aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ae:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 80009b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009b4:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	4619      	mov	r1, r3
 80009be:	480a      	ldr	r0, [pc, #40]	; (80009e8 <MX_DSIHOST_DSI_Init+0x1cc>)
 80009c0:	f001 ffc3 	bl	800294a <HAL_DSI_ConfigVideoMode>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_DSIHOST_DSI_Init+0x1b2>
  {
    Error_Handler();
 80009ca:	f000 ffd1 	bl	8001970 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 80009ce:	2100      	movs	r1, #0
 80009d0:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_DSIHOST_DSI_Init+0x1cc>)
 80009d2:	f001 ff92 	bl	80028fa <HAL_DSI_SetGenericVCID>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_DSIHOST_DSI_Init+0x1c4>
  {
    Error_Handler();
 80009dc:	f000 ffc8 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */
  /* USER CODE END DSIHOST_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	37b8      	adds	r7, #184	; 0xb8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000078 	.word	0x20000078
 80009ec:	40016c00 	.word	0x40016c00

080009f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009f4:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <MX_I2C1_Init+0x74>)
 80009f6:	4a1c      	ldr	r2, [pc, #112]	; (8000a68 <MX_I2C1_Init+0x78>)
 80009f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80009fa:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <MX_I2C1_Init+0x74>)
 80009fc:	4a1b      	ldr	r2, [pc, #108]	; (8000a6c <MX_I2C1_Init+0x7c>)
 80009fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a00:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a06:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a2a:	480e      	ldr	r0, [pc, #56]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a2c:	f002 fdc2 	bl	80035b4 <HAL_I2C_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a36:	f000 ff9b 	bl	8001970 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a3e:	f002 fe54 	bl	80036ea <HAL_I2CEx_ConfigAnalogFilter>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a48:	f000 ff92 	bl	8001970 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a50:	f002 fe96 	bl	8003780 <HAL_I2CEx_ConfigDigitalFilter>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a5a:	f000 ff89 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000094 	.word	0x20000094
 8000a68:	40005400 	.word	0x40005400
 8000a6c:	307075b1 	.word	0x307075b1

08000a70 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a76:	4a1c      	ldr	r2, [pc, #112]	; (8000ae8 <MX_I2C2_Init+0x78>)
 8000a78:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a7c:	4a1b      	ldr	r2, [pc, #108]	; (8000aec <MX_I2C2_Init+0x7c>)
 8000a7e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a92:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000aaa:	480e      	ldr	r0, [pc, #56]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000aac:	f002 fd82 	bl	80035b4 <HAL_I2C_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ab6:	f000 ff5b 	bl	8001970 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aba:	2100      	movs	r1, #0
 8000abc:	4809      	ldr	r0, [pc, #36]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000abe:	f002 fe14 	bl	80036ea <HAL_I2CEx_ConfigAnalogFilter>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ac8:	f000 ff52 	bl	8001970 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000acc:	2100      	movs	r1, #0
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000ad0:	f002 fe56 	bl	8003780 <HAL_I2CEx_ConfigDigitalFilter>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ada:	f000 ff49 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200000e8 	.word	0x200000e8
 8000ae8:	40005800 	.word	0x40005800
 8000aec:	307075b1 	.word	0x307075b1

08000af0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08e      	sub	sp, #56	; 0x38
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2234      	movs	r2, #52	; 0x34
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f006 ffe1 	bl	8007ac4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b02:	4b38      	ldr	r3, [pc, #224]	; (8000be4 <MX_LTDC_Init+0xf4>)
 8000b04:	4a38      	ldr	r2, [pc, #224]	; (8000be8 <MX_LTDC_Init+0xf8>)
 8000b06:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b08:	4b36      	ldr	r3, [pc, #216]	; (8000be4 <MX_LTDC_Init+0xf4>)
 8000b0a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000b0e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000b10:	4b34      	ldr	r3, [pc, #208]	; (8000be4 <MX_LTDC_Init+0xf4>)
 8000b12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b16:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b18:	4b32      	ldr	r3, [pc, #200]	; (8000be4 <MX_LTDC_Init+0xf4>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b1e:	4b31      	ldr	r3, [pc, #196]	; (8000be4 <MX_LTDC_Init+0xf4>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 251;
 8000b24:	4b2f      	ldr	r3, [pc, #188]	; (8000be4 <MX_LTDC_Init+0xf4>)
 8000b26:	22fb      	movs	r2, #251	; 0xfb
 8000b28:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 7;
 8000b2a:	4b2e      	ldr	r3, [pc, #184]	; (8000be4 <MX_LTDC_Init+0xf4>)
 8000b2c:	2207      	movs	r2, #7
 8000b2e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 503;
 8000b30:	4b2c      	ldr	r3, [pc, #176]	; (8000be4 <MX_LTDC_Init+0xf4>)
 8000b32:	f240 12f7 	movw	r2, #503	; 0x1f7
 8000b36:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 15;
 8000b38:	4b2a      	ldr	r3, [pc, #168]	; (8000be4 <MX_LTDC_Init+0xf4>)
 8000b3a:	220f      	movs	r2, #15
 8000b3c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 583;
 8000b3e:	4b29      	ldr	r3, [pc, #164]	; (8000be4 <MX_LTDC_Init+0xf4>)
 8000b40:	f240 2247 	movw	r2, #583	; 0x247
 8000b44:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 95;
 8000b46:	4b27      	ldr	r3, [pc, #156]	; (8000be4 <MX_LTDC_Init+0xf4>)
 8000b48:	225f      	movs	r2, #95	; 0x5f
 8000b4a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 835;
 8000b4c:	4b25      	ldr	r3, [pc, #148]	; (8000be4 <MX_LTDC_Init+0xf4>)
 8000b4e:	f240 3243 	movw	r2, #835	; 0x343
 8000b52:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 97;
 8000b54:	4b23      	ldr	r3, [pc, #140]	; (8000be4 <MX_LTDC_Init+0xf4>)
 8000b56:	2261      	movs	r2, #97	; 0x61
 8000b58:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 255;
 8000b5a:	4b22      	ldr	r3, [pc, #136]	; (8000be4 <MX_LTDC_Init+0xf4>)
 8000b5c:	22ff      	movs	r2, #255	; 0xff
 8000b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 255;
 8000b62:	4b20      	ldr	r3, [pc, #128]	; (8000be4 <MX_LTDC_Init+0xf4>)
 8000b64:	22ff      	movs	r2, #255	; 0xff
 8000b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 255;
 8000b6a:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <MX_LTDC_Init+0xf4>)
 8000b6c:	22ff      	movs	r2, #255	; 0xff
 8000b6e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b72:	481c      	ldr	r0, [pc, #112]	; (8000be4 <MX_LTDC_Init+0xf4>)
 8000b74:	f002 fe50 	bl	8003818 <HAL_LTDC_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 8000b7e:	f000 fef7 	bl	8001970 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 80;
 8000b86:	2350      	movs	r3, #80	; 0x50
 8000b88:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 80;
 8000b8e:	2350      	movs	r3, #80	; 0x50
 8000b90:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000b92:	2301      	movs	r3, #1
 8000b94:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000b96:	23ff      	movs	r3, #255	; 0xff
 8000b98:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ba2:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000ba4:	2305      	movs	r3, #5
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = (uint32_t *)image_80x80_rgb888;
 8000ba8:	4b10      	ldr	r3, [pc, #64]	; (8000bec <MX_LTDC_Init+0xfc>)
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 80;
 8000bac:	2350      	movs	r3, #80	; 0x50
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 80;
 8000bb0:	2350      	movs	r3, #80	; 0x50
 8000bb2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8000bb4:	23ff      	movs	r3, #255	; 0xff
 8000bb6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 255;
 8000bba:	23ff      	movs	r3, #255	; 0xff
 8000bbc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 255;
 8000bc0:	23ff      	movs	r3, #255	; 0xff
 8000bc2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	2200      	movs	r2, #0
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_LTDC_Init+0xf4>)
 8000bce:	f002 fef3 	bl	80039b8 <HAL_LTDC_ConfigLayer>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8000bd8:	f000 feca 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
  //(uint32_t *)image_80x80_rgb888;
  /* USER CODE END LTDC_Init 2 */

}
 8000bdc:	bf00      	nop
 8000bde:	3738      	adds	r7, #56	; 0x38
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	2000013c 	.word	0x2000013c
 8000be8:	40016800 	.word	0x40016800
 8000bec:	200003f8 	.word	0x200003f8

08000bf0 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 8000c04:	4b22      	ldr	r3, [pc, #136]	; (8000c90 <MX_OCTOSPI2_Init+0xa0>)
 8000c06:	4a23      	ldr	r2, [pc, #140]	; (8000c94 <MX_OCTOSPI2_Init+0xa4>)
 8000c08:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 1;
 8000c0a:	4b21      	ldr	r3, [pc, #132]	; (8000c90 <MX_OCTOSPI2_Init+0xa0>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000c10:	4b1f      	ldr	r3, [pc, #124]	; (8000c90 <MX_OCTOSPI2_Init+0xa0>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000c16:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <MX_OCTOSPI2_Init+0xa0>)
 8000c18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c1c:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 32;
 8000c1e:	4b1c      	ldr	r3, [pc, #112]	; (8000c90 <MX_OCTOSPI2_Init+0xa0>)
 8000c20:	2220      	movs	r2, #32
 8000c22:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 1;
 8000c24:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <MX_OCTOSPI2_Init+0xa0>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000c2a:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <MX_OCTOSPI2_Init+0xa0>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000c30:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <MX_OCTOSPI2_Init+0xa0>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
  hospi2.Init.ClockPrescaler = 32;
 8000c36:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <MX_OCTOSPI2_Init+0xa0>)
 8000c38:	2220      	movs	r2, #32
 8000c3a:	621a      	str	r2, [r3, #32]
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000c3c:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <MX_OCTOSPI2_Init+0xa0>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	625a      	str	r2, [r3, #36]	; 0x24
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000c42:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <MX_OCTOSPI2_Init+0xa0>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	629a      	str	r2, [r3, #40]	; 0x28
  hospi2.Init.ChipSelectBoundary = 0;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <MX_OCTOSPI2_Init+0xa0>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <MX_OCTOSPI2_Init+0xa0>)
 8000c50:	2208      	movs	r2, #8
 8000c52:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000c54:	480e      	ldr	r0, [pc, #56]	; (8000c90 <MX_OCTOSPI2_Init+0xa0>)
 8000c56:	f003 f885 	bl	8003d64 <HAL_OSPI_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_OCTOSPI2_Init+0x74>
  {
    Error_Handler();
 8000c60:	f000 fe86 	bl	8001970 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 2;
 8000c64:	2302      	movs	r3, #2
 8000c66:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 2;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <MX_OCTOSPI2_Init+0xa8>)
 8000c6e:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi2, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c76:	4619      	mov	r1, r3
 8000c78:	4805      	ldr	r0, [pc, #20]	; (8000c90 <MX_OCTOSPI2_Init+0xa0>)
 8000c7a:	f003 f92d 	bl	8003ed8 <HAL_OSPIM_Config>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_OCTOSPI2_Init+0x98>
  {
    Error_Handler();
 8000c84:	f000 fe74 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8000c88:	bf00      	nop
 8000c8a:	3718      	adds	r7, #24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	200001e4 	.word	0x200001e4
 8000c94:	a0001400 	.word	0xa0001400
 8000c98:	00010002 	.word	0x00010002

08000c9c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000ca2:	4a1c      	ldr	r2, [pc, #112]	; (8000d14 <MX_SPI1_Init+0x78>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000ca8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cae:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cb6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000cba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cbc:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cca:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000cce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cd2:	2228      	movs	r2, #40	; 0x28
 8000cd4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cea:	2207      	movs	r2, #7
 8000cec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cf6:	2208      	movs	r2, #8
 8000cf8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cfa:	4805      	ldr	r0, [pc, #20]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cfc:	f005 fa2c 	bl	8006158 <HAL_SPI_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d06:	f000 fe33 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000234 	.word	0x20000234
 8000d14:	40013000 	.word	0x40013000

08000d18 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d1c:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <MX_SPI2_Init+0x6c>)
 8000d1e:	4a1a      	ldr	r2, [pc, #104]	; (8000d88 <MX_SPI2_Init+0x70>)
 8000d20:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000d22:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <MX_SPI2_Init+0x6c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d28:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <MX_SPI2_Init+0x6c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <MX_SPI2_Init+0x6c>)
 8000d30:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d34:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d36:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <MX_SPI2_Init+0x6c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_SPI2_Init+0x6c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <MX_SPI2_Init+0x6c>)
 8000d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d48:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_SPI2_Init+0x6c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <MX_SPI2_Init+0x6c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <MX_SPI2_Init+0x6c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_SPI2_Init+0x6c>)
 8000d5e:	2207      	movs	r2, #7
 8000d60:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <MX_SPI2_Init+0x6c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_SPI2_Init+0x6c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_SPI2_Init+0x6c>)
 8000d70:	f005 f9f2 	bl	8006158 <HAL_SPI_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8000d7a:	f000 fdf9 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000298 	.word	0x20000298
 8000d88:	40003800 	.word	0x40003800

08000d8c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000d90:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <MX_SPI3_Init+0x74>)
 8000d92:	4a1c      	ldr	r2, [pc, #112]	; (8000e04 <MX_SPI3_Init+0x78>)
 8000d94:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d96:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <MX_SPI3_Init+0x74>)
 8000d98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d9c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d9e:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <MX_SPI3_Init+0x74>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000da4:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <MX_SPI3_Init+0x74>)
 8000da6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000daa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dac:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <MX_SPI3_Init+0x74>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000db2:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <MX_SPI3_Init+0x74>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <MX_SPI3_Init+0x74>)
 8000dba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dbe:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <MX_SPI3_Init+0x74>)
 8000dc2:	2220      	movs	r2, #32
 8000dc4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <MX_SPI3_Init+0x74>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <MX_SPI3_Init+0x74>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <MX_SPI3_Init+0x74>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <MX_SPI3_Init+0x74>)
 8000dda:	2207      	movs	r2, #7
 8000ddc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <MX_SPI3_Init+0x74>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <MX_SPI3_Init+0x74>)
 8000de6:	2208      	movs	r2, #8
 8000de8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000dea:	4805      	ldr	r0, [pc, #20]	; (8000e00 <MX_SPI3_Init+0x74>)
 8000dec:	f005 f9b4 	bl	8006158 <HAL_SPI_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000df6:	f000 fdbb 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	200002fc 	.word	0x200002fc
 8000e04:	40003c00 	.word	0x40003c00

08000e08 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000e0c:	4b22      	ldr	r3, [pc, #136]	; (8000e98 <MX_UART4_Init+0x90>)
 8000e0e:	4a23      	ldr	r2, [pc, #140]	; (8000e9c <MX_UART4_Init+0x94>)
 8000e10:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000e12:	4b21      	ldr	r3, [pc, #132]	; (8000e98 <MX_UART4_Init+0x90>)
 8000e14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e18:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000e1a:	4b1f      	ldr	r3, [pc, #124]	; (8000e98 <MX_UART4_Init+0x90>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000e20:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <MX_UART4_Init+0x90>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000e26:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <MX_UART4_Init+0x90>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <MX_UART4_Init+0x90>)
 8000e2e:	220c      	movs	r2, #12
 8000e30:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <MX_UART4_Init+0x90>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e38:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <MX_UART4_Init+0x90>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <MX_UART4_Init+0x90>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e44:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <MX_UART4_Init+0x90>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <MX_UART4_Init+0x90>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000e50:	4811      	ldr	r0, [pc, #68]	; (8000e98 <MX_UART4_Init+0x90>)
 8000e52:	f005 ff1f 	bl	8006c94 <HAL_UART_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000e5c:	f000 fd88 	bl	8001970 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e60:	2100      	movs	r1, #0
 8000e62:	480d      	ldr	r0, [pc, #52]	; (8000e98 <MX_UART4_Init+0x90>)
 8000e64:	f006 fd44 	bl	80078f0 <HAL_UARTEx_SetTxFifoThreshold>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000e6e:	f000 fd7f 	bl	8001970 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e72:	2100      	movs	r1, #0
 8000e74:	4808      	ldr	r0, [pc, #32]	; (8000e98 <MX_UART4_Init+0x90>)
 8000e76:	f006 fd79 	bl	800796c <HAL_UARTEx_SetRxFifoThreshold>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000e80:	f000 fd76 	bl	8001970 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000e84:	4804      	ldr	r0, [pc, #16]	; (8000e98 <MX_UART4_Init+0x90>)
 8000e86:	f006 fcfa 	bl	800787e <HAL_UARTEx_DisableFifoMode>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000e90:	f000 fd6e 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000360 	.word	0x20000360
 8000e9c:	40004c00 	.word	0x40004c00

08000ea0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08e      	sub	sp, #56	; 0x38
 8000ea4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
 8000eb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb6:	4ba7      	ldr	r3, [pc, #668]	; (8001154 <MX_GPIO_Init+0x2b4>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	4aa6      	ldr	r2, [pc, #664]	; (8001154 <MX_GPIO_Init+0x2b4>)
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec2:	4ba4      	ldr	r3, [pc, #656]	; (8001154 <MX_GPIO_Init+0x2b4>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	623b      	str	r3, [r7, #32]
 8000ecc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ece:	4ba1      	ldr	r3, [pc, #644]	; (8001154 <MX_GPIO_Init+0x2b4>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	4aa0      	ldr	r2, [pc, #640]	; (8001154 <MX_GPIO_Init+0x2b4>)
 8000ed4:	f043 0308 	orr.w	r3, r3, #8
 8000ed8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eda:	4b9e      	ldr	r3, [pc, #632]	; (8001154 <MX_GPIO_Init+0x2b4>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	f003 0308 	and.w	r3, r3, #8
 8000ee2:	61fb      	str	r3, [r7, #28]
 8000ee4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee6:	4b9b      	ldr	r3, [pc, #620]	; (8001154 <MX_GPIO_Init+0x2b4>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	4a9a      	ldr	r2, [pc, #616]	; (8001154 <MX_GPIO_Init+0x2b4>)
 8000eec:	f043 0304 	orr.w	r3, r3, #4
 8000ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef2:	4b98      	ldr	r3, [pc, #608]	; (8001154 <MX_GPIO_Init+0x2b4>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	f003 0304 	and.w	r3, r3, #4
 8000efa:	61bb      	str	r3, [r7, #24]
 8000efc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	4b95      	ldr	r3, [pc, #596]	; (8001154 <MX_GPIO_Init+0x2b4>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	4a94      	ldr	r2, [pc, #592]	; (8001154 <MX_GPIO_Init+0x2b4>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0a:	4b92      	ldr	r3, [pc, #584]	; (8001154 <MX_GPIO_Init+0x2b4>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f16:	4b8f      	ldr	r3, [pc, #572]	; (8001154 <MX_GPIO_Init+0x2b4>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	4a8e      	ldr	r2, [pc, #568]	; (8001154 <MX_GPIO_Init+0x2b4>)
 8000f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f22:	4b8c      	ldr	r3, [pc, #560]	; (8001154 <MX_GPIO_Init+0x2b4>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]
  HAL_PWREx_EnableVddIO2();
 8000f2e:	f003 fcb3 	bl	8004898 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f32:	4b88      	ldr	r3, [pc, #544]	; (8001154 <MX_GPIO_Init+0x2b4>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	4a87      	ldr	r2, [pc, #540]	; (8001154 <MX_GPIO_Init+0x2b4>)
 8000f38:	f043 0320 	orr.w	r3, r3, #32
 8000f3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3e:	4b85      	ldr	r3, [pc, #532]	; (8001154 <MX_GPIO_Init+0x2b4>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f42:	f003 0320 	and.w	r3, r3, #32
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f4a:	4b82      	ldr	r3, [pc, #520]	; (8001154 <MX_GPIO_Init+0x2b4>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	4a81      	ldr	r2, [pc, #516]	; (8001154 <MX_GPIO_Init+0x2b4>)
 8000f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f56:	4b7f      	ldr	r3, [pc, #508]	; (8001154 <MX_GPIO_Init+0x2b4>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f62:	4b7c      	ldr	r3, [pc, #496]	; (8001154 <MX_GPIO_Init+0x2b4>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	4a7b      	ldr	r2, [pc, #492]	; (8001154 <MX_GPIO_Init+0x2b4>)
 8000f68:	f043 0310 	orr.w	r3, r3, #16
 8000f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6e:	4b79      	ldr	r3, [pc, #484]	; (8001154 <MX_GPIO_Init+0x2b4>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	f003 0310 	and.w	r3, r3, #16
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ncs_GPIO_Port, ncs_Pin, GPIO_PIN_SET);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f80:	4875      	ldr	r0, [pc, #468]	; (8001158 <MX_GPIO_Init+0x2b8>)
 8000f82:	f002 fae7 	bl	8003554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ble_cs_GPIO_Port, ble_cs_Pin, GPIO_PIN_SET);
 8000f86:	2201      	movs	r2, #1
 8000f88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f8c:	4873      	ldr	r0, [pc, #460]	; (800115c <MX_GPIO_Init+0x2bc>)
 8000f8e:	f002 fae1 	bl	8003554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, mosi_Pin|clk_Pin|ble_rst_Pin, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	f44f 418a 	mov.w	r1, #17664	; 0x4500
 8000f98:	4871      	ldr	r0, [pc, #452]	; (8001160 <MX_GPIO_Init+0x2c0>)
 8000f9a:	f002 fadb 	bl	8003554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	21a0      	movs	r1, #160	; 0xa0
 8000fa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa6:	f002 fad5 	bl	8003554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fb0:	486c      	ldr	r0, [pc, #432]	; (8001164 <MX_GPIO_Init+0x2c4>)
 8000fb2:	f002 facf 	bl	8003554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000fbc:	486a      	ldr	r0, [pc, #424]	; (8001168 <MX_GPIO_Init+0x2c8>)
 8000fbe:	f002 fac9 	bl	8003554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fc8:	4866      	ldr	r0, [pc, #408]	; (8001164 <MX_GPIO_Init+0x2c4>)
 8000fca:	f002 fac3 	bl	8003554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ncs_Pin */
  GPIO_InitStruct.Pin = ncs_Pin;
 8000fce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ncs_GPIO_Port, &GPIO_InitStruct);
 8000fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	485c      	ldr	r0, [pc, #368]	; (8001158 <MX_GPIO_Init+0x2b8>)
 8000fe8:	f002 f90a 	bl	8003200 <HAL_GPIO_Init>

  /*Configure GPIO pin : ble_cs_Pin */
  GPIO_InitStruct.Pin = ble_cs_Pin;
 8000fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ble_cs_GPIO_Port, &GPIO_InitStruct);
 8000ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001002:	4619      	mov	r1, r3
 8001004:	4855      	ldr	r0, [pc, #340]	; (800115c <MX_GPIO_Init+0x2bc>)
 8001006:	f002 f8fb 	bl	8003200 <HAL_GPIO_Init>

  /*Configure GPIO pins : mosi_Pin clk_Pin ble_rst_Pin */
  GPIO_InitStruct.Pin = mosi_Pin|clk_Pin|ble_rst_Pin;
 800100a:	f44f 438a 	mov.w	r3, #17664	; 0x4500
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001010:	2301      	movs	r3, #1
 8001012:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800101c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001020:	4619      	mov	r1, r3
 8001022:	484f      	ldr	r0, [pc, #316]	; (8001160 <MX_GPIO_Init+0x2c0>)
 8001024:	f002 f8ec 	bl	8003200 <HAL_GPIO_Init>

  /*Configure GPIO pin : miso_Pin */
  GPIO_InitStruct.Pin = miso_Pin;
 8001028:	f44f 7300 	mov.w	r3, #512	; 0x200
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102e:	2300      	movs	r3, #0
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(miso_GPIO_Port, &GPIO_InitStruct);
 8001036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103a:	4619      	mov	r1, r3
 800103c:	4848      	ldr	r0, [pc, #288]	; (8001160 <MX_GPIO_Init+0x2c0>)
 800103e:	f002 f8df 	bl	8003200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001042:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001048:	2300      	movs	r3, #0
 800104a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001054:	4619      	mov	r1, r3
 8001056:	4845      	ldr	r0, [pc, #276]	; (800116c <MX_GPIO_Init+0x2cc>)
 8001058:	f002 f8d2 	bl	8003200 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 800105c:	2318      	movs	r3, #24
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001060:	2300      	movs	r3, #0
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001068:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106c:	4619      	mov	r1, r3
 800106e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001072:	f002 f8c5 	bl	8003200 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001076:	23a0      	movs	r3, #160	; 0xa0
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107a:	2301      	movs	r3, #1
 800107c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108a:	4619      	mov	r1, r3
 800108c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001090:	f002 f8b6 	bl	8003200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001094:	2310      	movs	r3, #16
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001098:	2300      	movs	r3, #0
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a4:	4619      	mov	r1, r3
 80010a6:	482c      	ldr	r0, [pc, #176]	; (8001158 <MX_GPIO_Init+0x2b8>)
 80010a8:	f002 f8aa 	bl	8003200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c2:	4619      	mov	r1, r3
 80010c4:	4827      	ldr	r0, [pc, #156]	; (8001164 <MX_GPIO_Init+0x2c4>)
 80010c6:	f002 f89b 	bl	8003200 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80010ca:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d0:	2301      	movs	r3, #1
 80010d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e0:	4619      	mov	r1, r3
 80010e2:	4821      	ldr	r0, [pc, #132]	; (8001168 <MX_GPIO_Init+0x2c8>)
 80010e4:	f002 f88c 	bl	8003200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010e8:	2301      	movs	r3, #1
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f8:	4619      	mov	r1, r3
 80010fa:	481b      	ldr	r0, [pc, #108]	; (8001168 <MX_GPIO_Init+0x2c8>)
 80010fc:	f002 f880 	bl	8003200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001106:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800110c:	2302      	movs	r3, #2
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001114:	4619      	mov	r1, r3
 8001116:	4813      	ldr	r0, [pc, #76]	; (8001164 <MX_GPIO_Init+0x2c4>)
 8001118:	f002 f872 	bl	8003200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800111c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001122:	2301      	movs	r3, #1
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001126:	2301      	movs	r3, #1
 8001128:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112a:	2303      	movs	r3, #3
 800112c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800112e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001132:	4619      	mov	r1, r3
 8001134:	480b      	ldr	r0, [pc, #44]	; (8001164 <MX_GPIO_Init+0x2c4>)
 8001136:	f002 f863 	bl	8003200 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2103      	movs	r1, #3
 800113e:	2028      	movs	r0, #40	; 0x28
 8001140:	f001 f983 	bl	800244a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001144:	2028      	movs	r0, #40	; 0x28
 8001146:	f001 f99c 	bl	8002482 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800114a:	bf00      	nop
 800114c:	3738      	adds	r7, #56	; 0x38
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40021000 	.word	0x40021000
 8001158:	48000800 	.word	0x48000800
 800115c:	48001800 	.word	0x48001800
 8001160:	48001400 	.word	0x48001400
 8001164:	48001000 	.word	0x48001000
 8001168:	48000400 	.word	0x48000400
 800116c:	48000c00 	.word	0x48000c00

08001170 <mipi_config>:

/* USER CODE BEGIN 4 */
void mipi_config() {
 8001170:	b590      	push	{r4, r7, lr}
 8001172:	b0af      	sub	sp, #188	; 0xbc
 8001174:	af02      	add	r7, sp, #8
	if (HAL_DSI_Start(&hdsi) != HAL_OK) {
 8001176:	48c4      	ldr	r0, [pc, #784]	; (8001488 <mipi_config+0x318>)
 8001178:	f001 ff1f 	bl	8002fba <HAL_DSI_Start>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <mipi_config+0x16>
		Error_Handler();
 8001182:	f000 fbf5 	bl	8001970 <Error_Handler>
	}
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xF0, 0xC3);
 8001186:	23c3      	movs	r3, #195	; 0xc3
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	23f0      	movs	r3, #240	; 0xf0
 800118c:	2215      	movs	r2, #21
 800118e:	2100      	movs	r1, #0
 8001190:	48bd      	ldr	r0, [pc, #756]	; (8001488 <mipi_config+0x318>)
 8001192:	f001 ff4e 	bl	8003032 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xF0, 0x96);
 8001196:	2396      	movs	r3, #150	; 0x96
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	23f0      	movs	r3, #240	; 0xf0
 800119c:	2215      	movs	r2, #21
 800119e:	2100      	movs	r1, #0
 80011a0:	48b9      	ldr	r0, [pc, #740]	; (8001488 <mipi_config+0x318>)
 80011a2:	f001 ff46 	bl	8003032 <HAL_DSI_ShortWrite>
	uint8_t cmd3[7] = { 0x00, 0x77, 0x1F, 0x04, 0x2A, 0x80, 0x33 };
 80011a6:	4ab9      	ldr	r2, [pc, #740]	; (800148c <mipi_config+0x31c>)
 80011a8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80011ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011b0:	6018      	str	r0, [r3, #0]
 80011b2:	3304      	adds	r3, #4
 80011b4:	8019      	strh	r1, [r3, #0]
 80011b6:	3302      	adds	r3, #2
 80011b8:	0c0a      	lsrs	r2, r1, #16
 80011ba:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xE7, cmd3);
 80011bc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80011c0:	9301      	str	r3, [sp, #4]
 80011c2:	23e7      	movs	r3, #231	; 0xe7
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2308      	movs	r3, #8
 80011c8:	2239      	movs	r2, #57	; 0x39
 80011ca:	2100      	movs	r1, #0
 80011cc:	48ae      	ldr	r0, [pc, #696]	; (8001488 <mipi_config+0x318>)
 80011ce:	f001 ff52 	bl	8003076 <HAL_DSI_LongWrite>
	uint8_t cmd4[3] = { 0xC0, 0x68, 0xE0 };
 80011d2:	4aaf      	ldr	r2, [pc, #700]	; (8001490 <mipi_config+0x320>)
 80011d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011d8:	6812      	ldr	r2, [r2, #0]
 80011da:	4611      	mov	r1, r2
 80011dc:	8019      	strh	r1, [r3, #0]
 80011de:	3302      	adds	r3, #2
 80011e0:	0c12      	lsrs	r2, r2, #16
 80011e2:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xA4, cmd4);
 80011e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	23a4      	movs	r3, #164	; 0xa4
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2304      	movs	r3, #4
 80011f0:	2239      	movs	r2, #57	; 0x39
 80011f2:	2100      	movs	r1, #0
 80011f4:	48a4      	ldr	r0, [pc, #656]	; (8001488 <mipi_config+0x318>)
 80011f6:	f001 ff3e 	bl	8003076 <HAL_DSI_LongWrite>
	uint8_t cmd5[4] = { 0x42, 0x05, 0x24, 0x03 };
 80011fa:	4ba6      	ldr	r3, [pc, #664]	; (8001494 <mipi_config+0x324>)
 80011fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC3, cmd5);
 8001200:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	23c3      	movs	r3, #195	; 0xc3
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2305      	movs	r3, #5
 800120c:	2239      	movs	r2, #57	; 0x39
 800120e:	2100      	movs	r1, #0
 8001210:	489d      	ldr	r0, [pc, #628]	; (8001488 <mipi_config+0x318>)
 8001212:	f001 ff30 	bl	8003076 <HAL_DSI_LongWrite>
	uint8_t cmd6[4] = { 0x42, 0x05, 0x24, 0x03 };
 8001216:	4b9f      	ldr	r3, [pc, #636]	; (8001494 <mipi_config+0x324>)
 8001218:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC4, cmd6);
 800121c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	23c4      	movs	r3, #196	; 0xc4
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2305      	movs	r3, #5
 8001228:	2239      	movs	r2, #57	; 0x39
 800122a:	2100      	movs	r1, #0
 800122c:	4896      	ldr	r0, [pc, #600]	; (8001488 <mipi_config+0x318>)
 800122e:	f001 ff22 	bl	8003076 <HAL_DSI_LongWrite>
	uint8_t cmd7[12] = { 0x0F, 0xF5, 0x10, 0x13, 0x22, 0x25, 0x10, 0x55, 0x55,
 8001232:	4a99      	ldr	r2, [pc, #612]	; (8001498 <mipi_config+0x328>)
 8001234:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001238:	ca07      	ldmia	r2, {r0, r1, r2}
 800123a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x55, 0x55, 0x55 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 13, 0xE5, cmd7);
 800123e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001242:	9301      	str	r3, [sp, #4]
 8001244:	23e5      	movs	r3, #229	; 0xe5
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	230d      	movs	r3, #13
 800124a:	2239      	movs	r2, #57	; 0x39
 800124c:	2100      	movs	r1, #0
 800124e:	488e      	ldr	r0, [pc, #568]	; (8001488 <mipi_config+0x318>)
 8001250:	f001 ff11 	bl	8003076 <HAL_DSI_LongWrite>
	uint8_t cmd8[12] = { 0x0F, 0xF5, 0x10, 0x13, 0x22, 0x25, 0x10, 0x55, 0x55,
 8001254:	4a90      	ldr	r2, [pc, #576]	; (8001498 <mipi_config+0x328>)
 8001256:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800125a:	ca07      	ldmia	r2, {r0, r1, r2}
 800125c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x55, 0x55, 0x55 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 13, 0xE6, cmd8);
 8001260:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001264:	9301      	str	r3, [sp, #4]
 8001266:	23e6      	movs	r3, #230	; 0xe6
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	230d      	movs	r3, #13
 800126c:	2239      	movs	r2, #57	; 0x39
 800126e:	2100      	movs	r1, #0
 8001270:	4885      	ldr	r0, [pc, #532]	; (8001488 <mipi_config+0x318>)
 8001272:	f001 ff00 	bl	8003076 <HAL_DSI_LongWrite>
	uint8_t cmd9[7] = { 0x00, 0x55, 0x00, 0x00, 0x00, 0x49, 0x22 };
 8001276:	4a89      	ldr	r2, [pc, #548]	; (800149c <mipi_config+0x32c>)
 8001278:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800127c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001280:	6018      	str	r0, [r3, #0]
 8001282:	3304      	adds	r3, #4
 8001284:	8019      	strh	r1, [r3, #0]
 8001286:	3302      	adds	r3, #2
 8001288:	0c0a      	lsrs	r2, r1, #16
 800128a:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xEC, cmd9);
 800128c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001290:	9301      	str	r3, [sp, #4]
 8001292:	23ec      	movs	r3, #236	; 0xec
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2308      	movs	r3, #8
 8001298:	2239      	movs	r2, #57	; 0x39
 800129a:	2100      	movs	r1, #0
 800129c:	487a      	ldr	r0, [pc, #488]	; (8001488 <mipi_config+0x318>)
 800129e:	f001 feea 	bl	8003076 <HAL_DSI_LongWrite>
	uint8_t cmd10[4] = { 0x88, 0x05, 0x0F, 0x18 };
 80012a2:	4b7f      	ldr	r3, [pc, #508]	; (80014a0 <mipi_config+0x330>)
 80012a4:	67bb      	str	r3, [r7, #120]	; 0x78
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC1, cmd10);
 80012a6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80012aa:	9301      	str	r3, [sp, #4]
 80012ac:	23c1      	movs	r3, #193	; 0xc1
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2305      	movs	r3, #5
 80012b2:	2239      	movs	r2, #57	; 0x39
 80012b4:	2100      	movs	r1, #0
 80012b6:	4874      	ldr	r0, [pc, #464]	; (8001488 <mipi_config+0x318>)
 80012b8:	f001 fedd 	bl	8003076 <HAL_DSI_LongWrite>
	uint8_t cmd11[4] = { 0x88, 0x05, 0x0F, 0x18 };
 80012bc:	4b78      	ldr	r3, [pc, #480]	; (80014a0 <mipi_config+0x330>)
 80012be:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC2, cmd11);
 80012c0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	23c2      	movs	r3, #194	; 0xc2
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2305      	movs	r3, #5
 80012cc:	2239      	movs	r2, #57	; 0x39
 80012ce:	2100      	movs	r1, #0
 80012d0:	486d      	ldr	r0, [pc, #436]	; (8001488 <mipi_config+0x318>)
 80012d2:	f001 fed0 	bl	8003076 <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x36, 0x00);
 80012d6:	2300      	movs	r3, #0
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	2336      	movs	r3, #54	; 0x36
 80012dc:	2215      	movs	r2, #21
 80012de:	2100      	movs	r1, #0
 80012e0:	4869      	ldr	r0, [pc, #420]	; (8001488 <mipi_config+0x318>)
 80012e2:	f001 fea6 	bl	8003032 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x3A, 0x07);
 80012e6:	2307      	movs	r3, #7
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	233a      	movs	r3, #58	; 0x3a
 80012ec:	2215      	movs	r2, #21
 80012ee:	2100      	movs	r1, #0
 80012f0:	4865      	ldr	r0, [pc, #404]	; (8001488 <mipi_config+0x318>)
 80012f2:	f001 fe9e 	bl	8003032 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xC5, 0xBE);
 80012f6:	23be      	movs	r3, #190	; 0xbe
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	23c5      	movs	r3, #197	; 0xc5
 80012fc:	2215      	movs	r2, #21
 80012fe:	2100      	movs	r1, #0
 8001300:	4861      	ldr	r0, [pc, #388]	; (8001488 <mipi_config+0x318>)
 8001302:	f001 fe96 	bl	8003032 <HAL_DSI_ShortWrite>
	uint8_t cmd15[14] = { 0xC0, 0x01, 0x04, 0x0B, 0x0B, 0x29, 0x41, 0x55, 0x55,
 8001306:	4b67      	ldr	r3, [pc, #412]	; (80014a4 <mipi_config+0x334>)
 8001308:	f107 0464 	add.w	r4, r7, #100	; 0x64
 800130c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800130e:	c407      	stmia	r4!, {r0, r1, r2}
 8001310:	8023      	strh	r3, [r4, #0]
			0x3D, 0x19, 0x18, 0x24, 0x27 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 15, 0xE0, cmd15);
 8001312:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001316:	9301      	str	r3, [sp, #4]
 8001318:	23e0      	movs	r3, #224	; 0xe0
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	230f      	movs	r3, #15
 800131e:	2239      	movs	r2, #57	; 0x39
 8001320:	2100      	movs	r1, #0
 8001322:	4859      	ldr	r0, [pc, #356]	; (8001488 <mipi_config+0x318>)
 8001324:	f001 fea7 	bl	8003076 <HAL_DSI_LongWrite>
	uint8_t cmd16[14] = { 0xC0, 0x01, 0x05, 0x0B, 0x0C, 0x29, 0x42, 0x55, 0x56,
 8001328:	4b5f      	ldr	r3, [pc, #380]	; (80014a8 <mipi_config+0x338>)
 800132a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800132e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001330:	c407      	stmia	r4!, {r0, r1, r2}
 8001332:	8023      	strh	r3, [r4, #0]
			0x3E, 0x1A, 0x18, 0x24, 0x28 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 15, 0xE1, cmd16);
 8001334:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	23e1      	movs	r3, #225	; 0xe1
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	230f      	movs	r3, #15
 8001340:	2239      	movs	r2, #57	; 0x39
 8001342:	2100      	movs	r1, #0
 8001344:	4850      	ldr	r0, [pc, #320]	; (8001488 <mipi_config+0x318>)
 8001346:	f001 fe96 	bl	8003076 <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB2, 0x10);
 800134a:	2310      	movs	r3, #16
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	23b2      	movs	r3, #178	; 0xb2
 8001350:	2215      	movs	r2, #21
 8001352:	2100      	movs	r1, #0
 8001354:	484c      	ldr	r0, [pc, #304]	; (8001488 <mipi_config+0x318>)
 8001356:	f001 fe6c 	bl	8003032 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB3, 0x01);
 800135a:	2301      	movs	r3, #1
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	23b3      	movs	r3, #179	; 0xb3
 8001360:	2215      	movs	r2, #21
 8001362:	2100      	movs	r1, #0
 8001364:	4848      	ldr	r0, [pc, #288]	; (8001488 <mipi_config+0x318>)
 8001366:	f001 fe64 	bl	8003032 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB4, 0x01);
 800136a:	2301      	movs	r3, #1
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	23b4      	movs	r3, #180	; 0xb4
 8001370:	2215      	movs	r2, #21
 8001372:	2100      	movs	r1, #0
 8001374:	4844      	ldr	r0, [pc, #272]	; (8001488 <mipi_config+0x318>)
 8001376:	f001 fe5c 	bl	8003032 <HAL_DSI_ShortWrite>
	uint8_t cmd20[2] = { 0x27, 0x09 };
 800137a:	f640 1327 	movw	r3, #2343	; 0x927
 800137e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 3, 0xB6, cmd20);
 8001382:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	23b6      	movs	r3, #182	; 0xb6
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	2303      	movs	r3, #3
 800138e:	2239      	movs	r2, #57	; 0x39
 8001390:	2100      	movs	r1, #0
 8001392:	483d      	ldr	r0, [pc, #244]	; (8001488 <mipi_config+0x318>)
 8001394:	f001 fe6f 	bl	8003076 <HAL_DSI_LongWrite>
	uint8_t cmd21[4] = { 0x00, 0x54, 0x00, 0x54 };
 8001398:	f04f 2354 	mov.w	r3, #1409307648	; 0x54005400
 800139c:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xB5, cmd21);
 800139e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	23b5      	movs	r3, #181	; 0xb5
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2305      	movs	r3, #5
 80013aa:	2239      	movs	r2, #57	; 0x39
 80013ac:	2100      	movs	r1, #0
 80013ae:	4836      	ldr	r0, [pc, #216]	; (8001488 <mipi_config+0x318>)
 80013b0:	f001 fe61 	bl	8003076 <HAL_DSI_LongWrite>
	uint8_t cmd22[9] = { 0x20, 0x12, 0x40, 0x00, 0x00, 0x2F, 0x2A, 0x0A, 0x00 };
 80013b4:	4a3d      	ldr	r2, [pc, #244]	; (80014ac <mipi_config+0x33c>)
 80013b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80013bc:	c303      	stmia	r3!, {r0, r1}
 80013be:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xA5, cmd22);
 80013c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013c4:	9301      	str	r3, [sp, #4]
 80013c6:	23a5      	movs	r3, #165	; 0xa5
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	230a      	movs	r3, #10
 80013cc:	2239      	movs	r2, #57	; 0x39
 80013ce:	2100      	movs	r1, #0
 80013d0:	482d      	ldr	r0, [pc, #180]	; (8001488 <mipi_config+0x318>)
 80013d2:	f001 fe50 	bl	8003076 <HAL_DSI_LongWrite>
	uint8_t cmd23[9] = { 0x20, 0x12, 0x40, 0x00, 0x00, 0x2F, 0x2A, 0x0A, 0x00 };
 80013d6:	4a35      	ldr	r2, [pc, #212]	; (80014ac <mipi_config+0x33c>)
 80013d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80013de:	c303      	stmia	r3!, {r0, r1}
 80013e0:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xA6, cmd23);
 80013e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	23a6      	movs	r3, #166	; 0xa6
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	230a      	movs	r3, #10
 80013ee:	2239      	movs	r2, #57	; 0x39
 80013f0:	2100      	movs	r1, #0
 80013f2:	4825      	ldr	r0, [pc, #148]	; (8001488 <mipi_config+0x318>)
 80013f4:	f001 fe3f 	bl	8003076 <HAL_DSI_LongWrite>
	uint8_t cmd24[7] = { 0x58, 0x0A, 0x21, 0x00, 0x20, 0x01, 0x00 };
 80013f8:	4a2d      	ldr	r2, [pc, #180]	; (80014b0 <mipi_config+0x340>)
 80013fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001402:	6018      	str	r0, [r3, #0]
 8001404:	3304      	adds	r3, #4
 8001406:	8019      	strh	r1, [r3, #0]
 8001408:	3302      	adds	r3, #2
 800140a:	0c0a      	lsrs	r2, r1, #16
 800140c:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xBA, cmd24);
 800140e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001412:	9301      	str	r3, [sp, #4]
 8001414:	23ba      	movs	r3, #186	; 0xba
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	2308      	movs	r3, #8
 800141a:	2239      	movs	r2, #57	; 0x39
 800141c:	2100      	movs	r1, #0
 800141e:	481a      	ldr	r0, [pc, #104]	; (8001488 <mipi_config+0x318>)
 8001420:	f001 fe29 	bl	8003076 <HAL_DSI_LongWrite>
	uint8_t cmd25[8] = { 0x00, 0x45, 0x00, 0x1F, 0x15, 0x87, 0x07, 0x04 };
 8001424:	4a23      	ldr	r2, [pc, #140]	; (80014b4 <mipi_config+0x344>)
 8001426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800142e:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xBB, cmd25);
 8001432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001436:	9301      	str	r3, [sp, #4]
 8001438:	23bb      	movs	r3, #187	; 0xbb
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	2309      	movs	r3, #9
 800143e:	2239      	movs	r2, #57	; 0x39
 8001440:	2100      	movs	r1, #0
 8001442:	4811      	ldr	r0, [pc, #68]	; (8001488 <mipi_config+0x318>)
 8001444:	f001 fe17 	bl	8003076 <HAL_DSI_LongWrite>
	uint8_t cmd26[8] = { 0x00, 0x45, 0x00, 0x1F, 0x15, 0x87, 0x07, 0x04 };
 8001448:	4a1a      	ldr	r2, [pc, #104]	; (80014b4 <mipi_config+0x344>)
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001452:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xBC, cmd26);
 8001456:	f107 031c 	add.w	r3, r7, #28
 800145a:	9301      	str	r3, [sp, #4]
 800145c:	23bc      	movs	r3, #188	; 0xbc
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	2309      	movs	r3, #9
 8001462:	2239      	movs	r2, #57	; 0x39
 8001464:	2100      	movs	r1, #0
 8001466:	4808      	ldr	r0, [pc, #32]	; (8001488 <mipi_config+0x318>)
 8001468:	f001 fe05 	bl	8003076 <HAL_DSI_LongWrite>
	uint8_t cmd27[11] = { 0x11, 0x77, 0xFF, 0xFF, 0x25, 0x34, 0x43, 0x52, 0xFF,
 800146c:	4a12      	ldr	r2, [pc, #72]	; (80014b8 <mipi_config+0x348>)
 800146e:	f107 0310 	add.w	r3, r7, #16
 8001472:	ca07      	ldmia	r2, {r0, r1, r2}
 8001474:	c303      	stmia	r3!, {r0, r1}
 8001476:	801a      	strh	r2, [r3, #0]
 8001478:	3302      	adds	r3, #2
 800147a:	0c12      	lsrs	r2, r2, #16
 800147c:	701a      	strb	r2, [r3, #0]
			0xFF, 0xF9 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 12, 0xBD, cmd27);
 800147e:	f107 0310 	add.w	r3, r7, #16
 8001482:	9301      	str	r3, [sp, #4]
 8001484:	e01a      	b.n	80014bc <mipi_config+0x34c>
 8001486:	bf00      	nop
 8001488:	20000078 	.word	0x20000078
 800148c:	08008444 	.word	0x08008444
 8001490:	0800844c 	.word	0x0800844c
 8001494:	03240542 	.word	0x03240542
 8001498:	08008450 	.word	0x08008450
 800149c:	0800845c 	.word	0x0800845c
 80014a0:	180f0588 	.word	0x180f0588
 80014a4:	08008464 	.word	0x08008464
 80014a8:	08008474 	.word	0x08008474
 80014ac:	08008484 	.word	0x08008484
 80014b0:	08008490 	.word	0x08008490
 80014b4:	08008498 	.word	0x08008498
 80014b8:	080084a0 	.word	0x080084a0
 80014bc:	23bd      	movs	r3, #189	; 0xbd
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	230c      	movs	r3, #12
 80014c2:	2239      	movs	r2, #57	; 0x39
 80014c4:	2100      	movs	r1, #0
 80014c6:	482d      	ldr	r0, [pc, #180]	; (800157c <mipi_config+0x40c>)
 80014c8:	f001 fdd5 	bl	8003076 <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xED, 0xC3);
 80014cc:	23c3      	movs	r3, #195	; 0xc3
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	23ed      	movs	r3, #237	; 0xed
 80014d2:	2215      	movs	r2, #21
 80014d4:	2100      	movs	r1, #0
 80014d6:	4829      	ldr	r0, [pc, #164]	; (800157c <mipi_config+0x40c>)
 80014d8:	f001 fdab 	bl	8003032 <HAL_DSI_ShortWrite>
	uint8_t cmd29[3] = { 0x40, 0x0F, 0x00 };
 80014dc:	4a28      	ldr	r2, [pc, #160]	; (8001580 <mipi_config+0x410>)
 80014de:	f107 030c 	add.w	r3, r7, #12
 80014e2:	6812      	ldr	r2, [r2, #0]
 80014e4:	4611      	mov	r1, r2
 80014e6:	8019      	strh	r1, [r3, #0]
 80014e8:	3302      	adds	r3, #2
 80014ea:	0c12      	lsrs	r2, r2, #16
 80014ec:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xE4, cmd29);
 80014ee:	f107 030c 	add.w	r3, r7, #12
 80014f2:	9301      	str	r3, [sp, #4]
 80014f4:	23e4      	movs	r3, #228	; 0xe4
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	2304      	movs	r3, #4
 80014fa:	2239      	movs	r2, #57	; 0x39
 80014fc:	2100      	movs	r1, #0
 80014fe:	481f      	ldr	r0, [pc, #124]	; (800157c <mipi_config+0x40c>)
 8001500:	f001 fdb9 	bl	8003076 <HAL_DSI_LongWrite>
	uint8_t cmd30[9] = { 0x90, 0x00, 0x3F, 0x10, 0x3F, 0x35, 0x7F, 0x7F, 0x25 };
 8001504:	4a1f      	ldr	r2, [pc, #124]	; (8001584 <mipi_config+0x414>)
 8001506:	463b      	mov	r3, r7
 8001508:	ca07      	ldmia	r2, {r0, r1, r2}
 800150a:	c303      	stmia	r3!, {r0, r1}
 800150c:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xCC, cmd30);
 800150e:	463b      	mov	r3, r7
 8001510:	9301      	str	r3, [sp, #4]
 8001512:	23cc      	movs	r3, #204	; 0xcc
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	230a      	movs	r3, #10
 8001518:	2239      	movs	r2, #57	; 0x39
 800151a:	2100      	movs	r1, #0
 800151c:	4817      	ldr	r0, [pc, #92]	; (800157c <mipi_config+0x40c>)
 800151e:	f001 fdaa 	bl	8003076 <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 8001522:	2300      	movs	r3, #0
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	2335      	movs	r3, #53	; 0x35
 8001528:	2215      	movs	r2, #21
 800152a:	2100      	movs	r1, #0
 800152c:	4813      	ldr	r0, [pc, #76]	; (800157c <mipi_config+0x40c>)
 800152e:	f001 fd80 	bl	8003032 <HAL_DSI_ShortWrite>
	HAL_Delay(0);
 8001532:	2000      	movs	r0, #0
 8001534:	f000 fe8a 	bl	800224c <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x11, 0x00);
 8001538:	2300      	movs	r3, #0
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	2311      	movs	r3, #17
 800153e:	2205      	movs	r2, #5
 8001540:	2100      	movs	r1, #0
 8001542:	480e      	ldr	r0, [pc, #56]	; (800157c <mipi_config+0x40c>)
 8001544:	f001 fd75 	bl	8003032 <HAL_DSI_ShortWrite>
	HAL_Delay(120);
 8001548:	2078      	movs	r0, #120	; 0x78
 800154a:	f000 fe7f 	bl	800224c <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x29, 0x00);
 800154e:	2300      	movs	r3, #0
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	2329      	movs	r3, #41	; 0x29
 8001554:	2205      	movs	r2, #5
 8001556:	2100      	movs	r1, #0
 8001558:	4808      	ldr	r0, [pc, #32]	; (800157c <mipi_config+0x40c>)
 800155a:	f001 fd6a 	bl	8003032 <HAL_DSI_ShortWrite>
	HAL_Delay(120);
 800155e:	2078      	movs	r0, #120	; 0x78
 8001560:	f000 fe74 	bl	800224c <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 8001564:	2300      	movs	r3, #0
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	2335      	movs	r3, #53	; 0x35
 800156a:	2215      	movs	r2, #21
 800156c:	2100      	movs	r1, #0
 800156e:	4803      	ldr	r0, [pc, #12]	; (800157c <mipi_config+0x40c>)
 8001570:	f001 fd5f 	bl	8003032 <HAL_DSI_ShortWrite>
}
 8001574:	bf00      	nop
 8001576:	37b4      	adds	r7, #180	; 0xb4
 8001578:	46bd      	mov	sp, r7
 800157a:	bd90      	pop	{r4, r7, pc}
 800157c:	20000078 	.word	0x20000078
 8001580:	080084ac 	.word	0x080084ac
 8001584:	080084b0 	.word	0x080084b0

08001588 <delay_us>:


void delay_us(int time)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
	while (time--)
 8001594:	e007      	b.n	80015a6 <delay_us+0x1e>
	{
		i = 10;
 8001596:	230a      	movs	r3, #10
 8001598:	60fb      	str	r3, [r7, #12]
		while (i--)
 800159a:	bf00      	nop
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	1e5a      	subs	r2, r3, #1
 80015a0:	60fa      	str	r2, [r7, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1fa      	bne.n	800159c <delay_us+0x14>
	while (time--)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	1e5a      	subs	r2, r3, #1
 80015aa:	607a      	str	r2, [r7, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1f2      	bne.n	8001596 <delay_us+0xe>
			;
	}
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <HAL_GPIO_EXTI_Callback>:

int button_count=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_12)
 80015ca:	88fb      	ldrh	r3, [r7, #6]
 80015cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015d0:	d159      	bne.n	8001686 <HAL_GPIO_EXTI_Callback+0xc6>
	{
		button_count++;
 80015d2:	4b2e      	ldr	r3, [pc, #184]	; (800168c <HAL_GPIO_EXTI_Callback+0xcc>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	3301      	adds	r3, #1
 80015d8:	4a2c      	ldr	r2, [pc, #176]	; (800168c <HAL_GPIO_EXTI_Callback+0xcc>)
 80015da:	6013      	str	r3, [r2, #0]
		HAL_Delay(100);
 80015dc:	2064      	movs	r0, #100	; 0x64
 80015de:	f000 fe35 	bl	800224c <HAL_Delay>
		for(int i=0; i<200; i++)
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	e02d      	b.n	8001644 <HAL_GPIO_EXTI_Callback+0x84>
		{
			if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) == GPIO_PIN_RESET)
 80015e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ec:	4828      	ldr	r0, [pc, #160]	; (8001690 <HAL_GPIO_EXTI_Callback+0xd0>)
 80015ee:	f001 ff99 	bl	8003524 <HAL_GPIO_ReadPin>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d11a      	bne.n	800162e <HAL_GPIO_EXTI_Callback+0x6e>
			{
				if(button_count<50 && play_mode==0)
 80015f8:	4b24      	ldr	r3, [pc, #144]	; (800168c <HAL_GPIO_EXTI_Callback+0xcc>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b31      	cmp	r3, #49	; 0x31
 80015fe:	dc12      	bgt.n	8001626 <HAL_GPIO_EXTI_Callback+0x66>
 8001600:	4b24      	ldr	r3, [pc, #144]	; (8001694 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d10e      	bne.n	8001626 <HAL_GPIO_EXTI_Callback+0x66>
				{
					if(static_flag==0)
 8001608:	4b23      	ldr	r3, [pc, #140]	; (8001698 <HAL_GPIO_EXTI_Callback+0xd8>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d103      	bne.n	8001618 <HAL_GPIO_EXTI_Callback+0x58>
					{
						static_flag = 1;
 8001610:	4b21      	ldr	r3, [pc, #132]	; (8001698 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001612:	2201      	movs	r2, #1
 8001614:	701a      	strb	r2, [r3, #0]
 8001616:	e006      	b.n	8001626 <HAL_GPIO_EXTI_Callback+0x66>
					}
					else if(static_flag==1)
 8001618:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <HAL_GPIO_EXTI_Callback+0xd8>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d102      	bne.n	8001626 <HAL_GPIO_EXTI_Callback+0x66>
					{
						static_flag = 0;
 8001620:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
					}
				}
				button_count = 0;
 8001626:	4b19      	ldr	r3, [pc, #100]	; (800168c <HAL_GPIO_EXTI_Callback+0xcc>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
				return;
 800162c:	e02b      	b.n	8001686 <HAL_GPIO_EXTI_Callback+0xc6>
			}
			button_count++;
 800162e:	4b17      	ldr	r3, [pc, #92]	; (800168c <HAL_GPIO_EXTI_Callback+0xcc>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	3301      	adds	r3, #1
 8001634:	4a15      	ldr	r2, [pc, #84]	; (800168c <HAL_GPIO_EXTI_Callback+0xcc>)
 8001636:	6013      	str	r3, [r2, #0]
			HAL_Delay(10);
 8001638:	200a      	movs	r0, #10
 800163a:	f000 fe07 	bl	800224c <HAL_Delay>
		for(int i=0; i<200; i++)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	3301      	adds	r3, #1
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2bc7      	cmp	r3, #199	; 0xc7
 8001648:	ddce      	ble.n	80015e8 <HAL_GPIO_EXTI_Callback+0x28>
		}
		if(play_mode==1)
 800164a:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_GPIO_EXTI_Callback+0xd4>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d109      	bne.n	8001666 <HAL_GPIO_EXTI_Callback+0xa6>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001652:	2200      	movs	r2, #0
 8001654:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001658:	4810      	ldr	r0, [pc, #64]	; (800169c <HAL_GPIO_EXTI_Callback+0xdc>)
 800165a:	f001 ff7b 	bl	8003554 <HAL_GPIO_WritePin>
			play_mode = 0;
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
 8001664:	e00c      	b.n	8001680 <HAL_GPIO_EXTI_Callback+0xc0>
		}
		else if(play_mode==0)
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d108      	bne.n	8001680 <HAL_GPIO_EXTI_Callback+0xc0>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800166e:	2201      	movs	r2, #1
 8001670:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001674:	4809      	ldr	r0, [pc, #36]	; (800169c <HAL_GPIO_EXTI_Callback+0xdc>)
 8001676:	f001 ff6d 	bl	8003554 <HAL_GPIO_WritePin>
			play_mode = 1;
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_GPIO_EXTI_Callback+0xd4>)
 800167c:	2201      	movs	r2, #1
 800167e:	701a      	strb	r2, [r3, #0]
		}
		button_count = 0;
 8001680:	4b02      	ldr	r3, [pc, #8]	; (800168c <HAL_GPIO_EXTI_Callback+0xcc>)
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
	}
}
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20004ef8 	.word	0x20004ef8
 8001690:	48001000 	.word	0x48001000
 8001694:	200003f4 	.word	0x200003f4
 8001698:	200003f5 	.word	0x200003f5
 800169c:	48000400 	.word	0x48000400

080016a0 <WriteBLE>:
///////////////////////ble/////////////////////////
uint8_t ReadBuffer[4]={0}, RXBuffer[20]={0}, WrapRX[20]={0};
volatile uint8_t Write_flag, Read_flag, Wrap_error;
int16_t Rcount=0, Wcount=0;
void WriteBLE(char *str1, int16_t count) //Writes data bytes to BLE
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af02      	add	r7, sp, #8
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET); //Pull CS line low
 80016ac:	2200      	movs	r2, #0
 80016ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016b2:	482e      	ldr	r0, [pc, #184]	; (800176c <WriteBLE+0xcc>)
 80016b4:	f001 ff4e 	bl	8003554 <HAL_GPIO_WritePin>
	delay_us(100); //Required
 80016b8:	2064      	movs	r0, #100	; 0x64
 80016ba:	f7ff ff65 	bl	8001588 <delay_us>
	HAL_SPI_Transmit(&hspi3, str1, count, 1000);
 80016be:	887a      	ldrh	r2, [r7, #2]
 80016c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	482a      	ldr	r0, [pc, #168]	; (8001770 <WriteBLE+0xd0>)
 80016c8:	f004 fde9 	bl	800629e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET); //Pull CS line high
 80016cc:	2201      	movs	r2, #1
 80016ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016d2:	4826      	ldr	r0, [pc, #152]	; (800176c <WriteBLE+0xcc>)
 80016d4:	f001 ff3e 	bl	8003554 <HAL_GPIO_WritePin>
	HAL_Delay(6);
 80016d8:	2006      	movs	r0, #6
 80016da:	f000 fdb7 	bl	800224c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET); //Pull CS line low
 80016de:	2200      	movs	r2, #0
 80016e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016e4:	4821      	ldr	r0, [pc, #132]	; (800176c <WriteBLE+0xcc>)
 80016e6:	f001 ff35 	bl	8003554 <HAL_GPIO_WritePin>
	delay_us(100); //100 us
 80016ea:	2064      	movs	r0, #100	; 0x64
 80016ec:	f7ff ff4c 	bl	8001588 <delay_us>
	for (int i=0; i < 4; ++i)
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	e00d      	b.n	8001712 <WriteBLE+0x72>
	{
		HAL_SPI_TransmitReceive(&hspi3, 0xAA, &ReadBuffer[i], 1, 1000);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4a1e      	ldr	r2, [pc, #120]	; (8001774 <WriteBLE+0xd4>)
 80016fa:	441a      	add	r2, r3
 80016fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	2301      	movs	r3, #1
 8001704:	21aa      	movs	r1, #170	; 0xaa
 8001706:	481a      	ldr	r0, [pc, #104]	; (8001770 <WriteBLE+0xd0>)
 8001708:	f004 ff3e 	bl	8006588 <HAL_SPI_TransmitReceive>
	for (int i=0; i < 4; ++i)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	3301      	adds	r3, #1
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2b03      	cmp	r3, #3
 8001716:	ddee      	ble.n	80016f6 <WriteBLE+0x56>
	}
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET); //Pull CS line high
 8001718:	2201      	movs	r2, #1
 800171a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800171e:	4813      	ldr	r0, [pc, #76]	; (800176c <WriteBLE+0xcc>)
 8001720:	f001 ff18 	bl	8003554 <HAL_GPIO_WritePin>
	if ((ReadBuffer[0] == 0x20)&&(ReadBuffer[1] == 0x01)) Write_flag = 0; //Looking for first two bytes
 8001724:	4b13      	ldr	r3, [pc, #76]	; (8001774 <WriteBLE+0xd4>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b20      	cmp	r3, #32
 800172a:	d107      	bne.n	800173c <WriteBLE+0x9c>
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <WriteBLE+0xd4>)
 800172e:	785b      	ldrb	r3, [r3, #1]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d103      	bne.n	800173c <WriteBLE+0x9c>
 8001734:	4b10      	ldr	r3, [pc, #64]	; (8001778 <WriteBLE+0xd8>)
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
 800173a:	e002      	b.n	8001742 <WriteBLE+0xa2>
	else Write_flag = 1;
 800173c:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <WriteBLE+0xd8>)
 800173e:	2201      	movs	r2, #1
 8001740:	701a      	strb	r2, [r3, #0]
	if ((ReadBuffer[2] == 0x0A)&&(ReadBuffer[3] == 0x00)) Write_flag = 0; //Looking for last two bytes
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <WriteBLE+0xd4>)
 8001744:	789b      	ldrb	r3, [r3, #2]
 8001746:	2b0a      	cmp	r3, #10
 8001748:	d107      	bne.n	800175a <WriteBLE+0xba>
 800174a:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <WriteBLE+0xd4>)
 800174c:	78db      	ldrb	r3, [r3, #3]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d103      	bne.n	800175a <WriteBLE+0xba>
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <WriteBLE+0xd8>)
 8001754:	2200      	movs	r2, #0
 8001756:	701a      	strb	r2, [r3, #0]
 8001758:	e003      	b.n	8001762 <WriteBLE+0xc2>
	else Write_flag = 1;
 800175a:	4b07      	ldr	r3, [pc, #28]	; (8001778 <WriteBLE+0xd8>)
 800175c:	2201      	movs	r2, #1
 800175e:	701a      	strb	r2, [r3, #0]
}
 8001760:	bf00      	nop
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	48001800 	.word	0x48001800
 8001770:	200002fc 	.word	0x200002fc
 8001774:	20004efc 	.word	0x20004efc
 8001778:	20004f28 	.word	0x20004f28

0800177c <ReadBLE>:

void ReadBLE(void) //Reads BYTES from BLE
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af02      	add	r7, sp, #8
	uint8_t read[4] = {0x10,0x02,0x0A,0x00};
 8001782:	4b38      	ldr	r3, [pc, #224]	; (8001864 <ReadBLE+0xe8>)
 8001784:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET); //Pull CS line low
 8001786:	2200      	movs	r2, #0
 8001788:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800178c:	4836      	ldr	r0, [pc, #216]	; (8001868 <ReadBLE+0xec>)
 800178e:	f001 fee1 	bl	8003554 <HAL_GPIO_WritePin>
	delay_us(100); //Required delay after CS asserted
 8001792:	2064      	movs	r0, #100	; 0x64
 8001794:	f7ff fef8 	bl	8001588 <delay_us>
	HAL_SPI_Transmit(&hspi3, &read, 4, 1000);
 8001798:	4639      	mov	r1, r7
 800179a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179e:	2204      	movs	r2, #4
 80017a0:	4832      	ldr	r0, [pc, #200]	; (800186c <ReadBLE+0xf0>)
 80017a2:	f004 fd7c 	bl	800629e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET); //Pull CS line high
 80017a6:	2201      	movs	r2, #1
 80017a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ac:	482e      	ldr	r0, [pc, #184]	; (8001868 <ReadBLE+0xec>)
 80017ae:	f001 fed1 	bl	8003554 <HAL_GPIO_WritePin>
	HAL_Delay(6);
 80017b2:	2006      	movs	r0, #6
 80017b4:	f000 fd4a 	bl	800224c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET); //Pull CS line low
 80017b8:	2200      	movs	r2, #0
 80017ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017be:	482a      	ldr	r0, [pc, #168]	; (8001868 <ReadBLE+0xec>)
 80017c0:	f001 fec8 	bl	8003554 <HAL_GPIO_WritePin>
	delay_us(100);
 80017c4:	2064      	movs	r0, #100	; 0x64
 80017c6:	f7ff fedf 	bl	8001588 <delay_us>
	for (int i=0; i < 20; i++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	607b      	str	r3, [r7, #4]
 80017ce:	e03b      	b.n	8001848 <ReadBLE+0xcc>
	{
		HAL_SPI_TransmitReceive(&hspi3, 0xAA, &RXBuffer[i], 1, 1000);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a27      	ldr	r2, [pc, #156]	; (8001870 <ReadBLE+0xf4>)
 80017d4:	441a      	add	r2, r3
 80017d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	2301      	movs	r3, #1
 80017de:	21aa      	movs	r1, #170	; 0xaa
 80017e0:	4822      	ldr	r0, [pc, #136]	; (800186c <ReadBLE+0xf0>)
 80017e2:	f004 fed1 	bl	8006588 <HAL_SPI_TransmitReceive>
		if (i==1) //First two bytes have arrived
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d10b      	bne.n	8001804 <ReadBLE+0x88>
		{
			if ((RXBuffer[0]==0x20)&&(RXBuffer[1]==0x02)) ;
 80017ec:	4b20      	ldr	r3, [pc, #128]	; (8001870 <ReadBLE+0xf4>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b20      	cmp	r3, #32
 80017f2:	d103      	bne.n	80017fc <ReadBLE+0x80>
 80017f4:	4b1e      	ldr	r3, [pc, #120]	; (8001870 <ReadBLE+0xf4>)
 80017f6:	785b      	ldrb	r3, [r3, #1]
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d022      	beq.n	8001842 <ReadBLE+0xc6>
			else //Problem on BLE SPI
			{
				Read_flag=1;
 80017fc:	4b1d      	ldr	r3, [pc, #116]	; (8001874 <ReadBLE+0xf8>)
 80017fe:	2201      	movs	r2, #1
 8001800:	701a      	strb	r2, [r3, #0]
				break;
 8001802:	e024      	b.n	800184e <ReadBLE+0xd2>
			}
		}
		else if (i==3) //4th byte indicates size of data string
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b03      	cmp	r3, #3
 8001808:	d109      	bne.n	800181e <ReadBLE+0xa2>
		{
			Rcount = (int16_t)RXBuffer[3]; //Number of data packets
 800180a:	4b19      	ldr	r3, [pc, #100]	; (8001870 <ReadBLE+0xf4>)
 800180c:	78db      	ldrb	r3, [r3, #3]
 800180e:	b21a      	sxth	r2, r3
 8001810:	4b19      	ldr	r3, [pc, #100]	; (8001878 <ReadBLE+0xfc>)
 8001812:	801a      	strh	r2, [r3, #0]
			if (RXBuffer[3] == 0x00)
 8001814:	4b16      	ldr	r3, [pc, #88]	; (8001870 <ReadBLE+0xf4>)
 8001816:	78db      	ldrb	r3, [r3, #3]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d112      	bne.n	8001842 <ReadBLE+0xc6>
			{
				break;
 800181c:	e017      	b.n	800184e <ReadBLE+0xd2>
			}
		}
		else if (i == (Rcount+3))
 800181e:	4b16      	ldr	r3, [pc, #88]	; (8001878 <ReadBLE+0xfc>)
 8001820:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001824:	3303      	adds	r3, #3
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	429a      	cmp	r2, r3
 800182a:	d10a      	bne.n	8001842 <ReadBLE+0xc6>
		{
			HAL_UART_Transmit(&huart4, &RXBuffer[4], Rcount, 1000);
 800182c:	4b12      	ldr	r3, [pc, #72]	; (8001878 <ReadBLE+0xfc>)
 800182e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001832:	b29a      	uxth	r2, r3
 8001834:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001838:	4910      	ldr	r1, [pc, #64]	; (800187c <ReadBLE+0x100>)
 800183a:	4811      	ldr	r0, [pc, #68]	; (8001880 <ReadBLE+0x104>)
 800183c:	f005 fa7a 	bl	8006d34 <HAL_UART_Transmit>
			break; //Run loop until all bytes read
 8001840:	e005      	b.n	800184e <ReadBLE+0xd2>
	for (int i=0; i < 20; i++)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3301      	adds	r3, #1
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b13      	cmp	r3, #19
 800184c:	ddc0      	ble.n	80017d0 <ReadBLE+0x54>
		}
		else ; //Should never get here
	}
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET); //Pull CS line high
 800184e:	2201      	movs	r2, #1
 8001850:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001854:	4804      	ldr	r0, [pc, #16]	; (8001868 <ReadBLE+0xec>)
 8001856:	f001 fe7d 	bl	8003554 <HAL_GPIO_WritePin>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	000a0210 	.word	0x000a0210
 8001868:	48001800 	.word	0x48001800
 800186c:	200002fc 	.word	0x200002fc
 8001870:	20004f00 	.word	0x20004f00
 8001874:	20004f29 	.word	0x20004f29
 8001878:	20004f2c 	.word	0x20004f2c
 800187c:	20004f04 	.word	0x20004f04
 8001880:	20000360 	.word	0x20000360

08001884 <Wrap>:

void Wrap(uint8_t *str1, int16_t count)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af02      	add	r7, sp, #8
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);  //Pull CS line low
 8001890:	2200      	movs	r2, #0
 8001892:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001896:	4831      	ldr	r0, [pc, #196]	; (800195c <Wrap+0xd8>)
 8001898:	f001 fe5c 	bl	8003554 <HAL_GPIO_WritePin>
	delay_us(100);
 800189c:	2064      	movs	r0, #100	; 0x64
 800189e:	f7ff fe73 	bl	8001588 <delay_us>
	HAL_SPI_Transmit(&hspi3, str1, count, 1000);
 80018a2:	887a      	ldrh	r2, [r7, #2]
 80018a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	482d      	ldr	r0, [pc, #180]	; (8001960 <Wrap+0xdc>)
 80018ac:	f004 fcf7 	bl	800629e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET); //Pull CS line high
 80018b0:	2201      	movs	r2, #1
 80018b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018b6:	4829      	ldr	r0, [pc, #164]	; (800195c <Wrap+0xd8>)
 80018b8:	f001 fe4c 	bl	8003554 <HAL_GPIO_WritePin>
	HAL_Delay(6);
 80018bc:	2006      	movs	r0, #6
 80018be:	f000 fcc5 	bl	800224c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);  //Re-assert CS line
 80018c2:	2200      	movs	r2, #0
 80018c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018c8:	4824      	ldr	r0, [pc, #144]	; (800195c <Wrap+0xd8>)
 80018ca:	f001 fe43 	bl	8003554 <HAL_GPIO_WritePin>
	delay_us(100);
 80018ce:	2064      	movs	r0, #100	; 0x64
 80018d0:	f7ff fe5a 	bl	8001588 <delay_us>
	for (int i=0; i < 20; i++)
 80018d4:	2300      	movs	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	e030      	b.n	800193c <Wrap+0xb8>
	{
		HAL_SPI_TransmitReceive(&hspi3, 0xAA, &WrapRX[i], 1, 1000);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4a21      	ldr	r2, [pc, #132]	; (8001964 <Wrap+0xe0>)
 80018de:	441a      	add	r2, r3
 80018e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	2301      	movs	r3, #1
 80018e8:	21aa      	movs	r1, #170	; 0xaa
 80018ea:	481d      	ldr	r0, [pc, #116]	; (8001960 <Wrap+0xdc>)
 80018ec:	f004 fe4c 	bl	8006588 <HAL_SPI_TransmitReceive>
		if (i == 1) //First two bytes have arrived
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d10b      	bne.n	800190e <Wrap+0x8a>
		{
			if ((WrapRX[0] == 0x20)&&(WrapRX[1] == 0x00)) ;
 80018f6:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <Wrap+0xe0>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b20      	cmp	r3, #32
 80018fc:	d103      	bne.n	8001906 <Wrap+0x82>
 80018fe:	4b19      	ldr	r3, [pc, #100]	; (8001964 <Wrap+0xe0>)
 8001900:	785b      	ldrb	r3, [r3, #1]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d017      	beq.n	8001936 <Wrap+0xb2>
			else //Problem on BLE SPI
			{
				Wrap_error = 1;
 8001906:	4b18      	ldr	r3, [pc, #96]	; (8001968 <Wrap+0xe4>)
 8001908:	2201      	movs	r2, #1
 800190a:	701a      	strb	r2, [r3, #0]
				//HAL_UART_Transmit(&huart4, "error", 5, 1000);
				break;
 800190c:	e01b      	b.n	8001946 <Wrap+0xc2>
			}
		}
		else if (i==3) //This byte indicates size of payload
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2b03      	cmp	r3, #3
 8001912:	d109      	bne.n	8001928 <Wrap+0xa4>
		{
			Wcount = (int16_t)WrapRX[3]; //Number of data packets
 8001914:	4b13      	ldr	r3, [pc, #76]	; (8001964 <Wrap+0xe0>)
 8001916:	78db      	ldrb	r3, [r3, #3]
 8001918:	b21a      	sxth	r2, r3
 800191a:	4b14      	ldr	r3, [pc, #80]	; (800196c <Wrap+0xe8>)
 800191c:	801a      	strh	r2, [r3, #0]
			if (WrapRX[3] == 0x00) break; //Empty payload
 800191e:	4b11      	ldr	r3, [pc, #68]	; (8001964 <Wrap+0xe0>)
 8001920:	78db      	ldrb	r3, [r3, #3]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d107      	bne.n	8001936 <Wrap+0xb2>
 8001926:	e00e      	b.n	8001946 <Wrap+0xc2>
		}
		else if (i == (Wcount+3)) break; //Run loop until all bytes read
 8001928:	4b10      	ldr	r3, [pc, #64]	; (800196c <Wrap+0xe8>)
 800192a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800192e:	3303      	adds	r3, #3
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	429a      	cmp	r2, r3
 8001934:	d006      	beq.n	8001944 <Wrap+0xc0>
	for (int i=0; i < 20; i++)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	3301      	adds	r3, #1
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2b13      	cmp	r3, #19
 8001940:	ddcb      	ble.n	80018da <Wrap+0x56>
 8001942:	e000      	b.n	8001946 <Wrap+0xc2>
		else if (i == (Wcount+3)) break; //Run loop until all bytes read
 8001944:	bf00      	nop
		else ;
	}
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET); //Pull CS line high
 8001946:	2201      	movs	r2, #1
 8001948:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800194c:	4803      	ldr	r0, [pc, #12]	; (800195c <Wrap+0xd8>)
 800194e:	f001 fe01 	bl	8003554 <HAL_GPIO_WritePin>
}
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	48001800 	.word	0x48001800
 8001960:	200002fc 	.word	0x200002fc
 8001964:	20004f14 	.word	0x20004f14
 8001968:	20004f2a 	.word	0x20004f2a
 800196c:	20004f2e 	.word	0x20004f2e

08001970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001974:	b672      	cpsid	i
}
 8001976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001978:	e7fe      	b.n	8001978 <Error_Handler+0x8>
	...

0800197c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001982:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <HAL_MspInit+0x44>)
 8001984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001986:	4a0e      	ldr	r2, [pc, #56]	; (80019c0 <HAL_MspInit+0x44>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6613      	str	r3, [r2, #96]	; 0x60
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <HAL_MspInit+0x44>)
 8001990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <HAL_MspInit+0x44>)
 800199c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199e:	4a08      	ldr	r2, [pc, #32]	; (80019c0 <HAL_MspInit+0x44>)
 80019a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a4:	6593      	str	r3, [r2, #88]	; 0x58
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_MspInit+0x44>)
 80019a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	603b      	str	r3, [r7, #0]
 80019b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40021000 	.word	0x40021000

080019c4 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b0aa      	sub	sp, #168	; 0xa8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019cc:	f107 030c 	add.w	r3, r7, #12
 80019d0:	229c      	movs	r2, #156	; 0x9c
 80019d2:	2100      	movs	r1, #0
 80019d4:	4618      	mov	r0, r3
 80019d6:	f006 f875 	bl	8007ac4 <memset>
  if(hdsi->Instance==DSI)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a11      	ldr	r2, [pc, #68]	; (8001a24 <HAL_DSI_MspInit+0x60>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d11b      	bne.n	8001a1c <HAL_DSI_MspInit+0x58>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 80019e4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80019e8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_DSIPHY;
 80019ea:	2300      	movs	r3, #0
 80019ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019f0:	f107 030c 	add.w	r3, r7, #12
 80019f4:	4618      	mov	r0, r3
 80019f6:	f003 fe37 	bl	8005668 <HAL_RCCEx_PeriphCLKConfig>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <HAL_DSI_MspInit+0x40>
    {
      Error_Handler();
 8001a00:	f7ff ffb6 	bl	8001970 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001a04:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <HAL_DSI_MspInit+0x64>)
 8001a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a08:	4a07      	ldr	r2, [pc, #28]	; (8001a28 <HAL_DSI_MspInit+0x64>)
 8001a0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a0e:	6613      	str	r3, [r2, #96]	; 0x60
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <HAL_DSI_MspInit+0x64>)
 8001a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001a1c:	bf00      	nop
 8001a1e:	37a8      	adds	r7, #168	; 0xa8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40016c00 	.word	0x40016c00
 8001a28:	40021000 	.word	0x40021000

08001a2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b0b2      	sub	sp, #200	; 0xc8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a44:	f107 0318 	add.w	r3, r7, #24
 8001a48:	229c      	movs	r2, #156	; 0x9c
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f006 f839 	bl	8007ac4 <memset>
  if(hi2c->Instance==I2C1)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a42      	ldr	r2, [pc, #264]	; (8001b60 <HAL_I2C_MspInit+0x134>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d13c      	bne.n	8001ad6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a5c:	2340      	movs	r3, #64	; 0x40
 8001a5e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a60:	2300      	movs	r3, #0
 8001a62:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a64:	f107 0318 	add.w	r3, r7, #24
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f003 fdfd 	bl	8005668 <HAL_RCCEx_PeriphCLKConfig>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001a74:	f7ff ff7c 	bl	8001970 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a78:	4b3a      	ldr	r3, [pc, #232]	; (8001b64 <HAL_I2C_MspInit+0x138>)
 8001a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7c:	4a39      	ldr	r2, [pc, #228]	; (8001b64 <HAL_I2C_MspInit+0x138>)
 8001a7e:	f043 0302 	orr.w	r3, r3, #2
 8001a82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a84:	4b37      	ldr	r3, [pc, #220]	; (8001b64 <HAL_I2C_MspInit+0x138>)
 8001a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001a90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a98:	2312      	movs	r3, #18
 8001a9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aaa:	2304      	movs	r3, #4
 8001aac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	482c      	ldr	r0, [pc, #176]	; (8001b68 <HAL_I2C_MspInit+0x13c>)
 8001ab8:	f001 fba2 	bl	8003200 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001abc:	4b29      	ldr	r3, [pc, #164]	; (8001b64 <HAL_I2C_MspInit+0x138>)
 8001abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac0:	4a28      	ldr	r2, [pc, #160]	; (8001b64 <HAL_I2C_MspInit+0x138>)
 8001ac2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ac6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ac8:	4b26      	ldr	r3, [pc, #152]	; (8001b64 <HAL_I2C_MspInit+0x138>)
 8001aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ad4:	e040      	b.n	8001b58 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a24      	ldr	r2, [pc, #144]	; (8001b6c <HAL_I2C_MspInit+0x140>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d13b      	bne.n	8001b58 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ae0:	2380      	movs	r3, #128	; 0x80
 8001ae2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ae8:	f107 0318 	add.w	r3, r7, #24
 8001aec:	4618      	mov	r0, r3
 8001aee:	f003 fdbb 	bl	8005668 <HAL_RCCEx_PeriphCLKConfig>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001af8:	f7ff ff3a 	bl	8001970 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afc:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <HAL_I2C_MspInit+0x138>)
 8001afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b00:	4a18      	ldr	r2, [pc, #96]	; (8001b64 <HAL_I2C_MspInit+0x138>)
 8001b02:	f043 0302 	orr.w	r3, r3, #2
 8001b06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b08:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <HAL_I2C_MspInit+0x138>)
 8001b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8001b14:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b1c:	2312      	movs	r3, #18
 8001b1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b2e:	2304      	movs	r3, #4
 8001b30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b34:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b38:	4619      	mov	r1, r3
 8001b3a:	480b      	ldr	r0, [pc, #44]	; (8001b68 <HAL_I2C_MspInit+0x13c>)
 8001b3c:	f001 fb60 	bl	8003200 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b40:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <HAL_I2C_MspInit+0x138>)
 8001b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b44:	4a07      	ldr	r2, [pc, #28]	; (8001b64 <HAL_I2C_MspInit+0x138>)
 8001b46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b4a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <HAL_I2C_MspInit+0x138>)
 8001b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	68bb      	ldr	r3, [r7, #8]
}
 8001b58:	bf00      	nop
 8001b5a:	37c8      	adds	r7, #200	; 0xc8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40005400 	.word	0x40005400
 8001b64:	40021000 	.word	0x40021000
 8001b68:	48000400 	.word	0x48000400
 8001b6c:	40005800 	.word	0x40005800

08001b70 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b0aa      	sub	sp, #168	; 0xa8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b78:	f107 030c 	add.w	r3, r7, #12
 8001b7c:	229c      	movs	r2, #156	; 0x9c
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4618      	mov	r0, r3
 8001b82:	f005 ff9f 	bl	8007ac4 <memset>
  if(hltdc->Instance==LTDC)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a19      	ldr	r2, [pc, #100]	; (8001bf0 <HAL_LTDC_MspInit+0x80>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d12a      	bne.n	8001be6 <HAL_LTDC_MspInit+0x76>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001b90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b94:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLLSAI2_DIV2;
 8001b96:	2300      	movs	r3, #0
 8001b98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_HSE;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI2.PLLSAI2M = 1;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI2.PLLSAI2N = 8;
 8001ba4:	2308      	movs	r3, #8
 8001ba6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV2;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 8001bac:	2302      	movs	r3, #2
 8001bae:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_LTDCCLK;
 8001bb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bb8:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bba:	f107 030c 	add.w	r3, r7, #12
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f003 fd52 	bl	8005668 <HAL_RCCEx_PeriphCLKConfig>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_LTDC_MspInit+0x5e>
    {
      Error_Handler();
 8001bca:	f7ff fed1 	bl	8001970 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <HAL_LTDC_MspInit+0x84>)
 8001bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd2:	4a08      	ldr	r2, [pc, #32]	; (8001bf4 <HAL_LTDC_MspInit+0x84>)
 8001bd4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001bd8:	6613      	str	r3, [r2, #96]	; 0x60
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HAL_LTDC_MspInit+0x84>)
 8001bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bde:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001be2:	60bb      	str	r3, [r7, #8]
 8001be4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001be6:	bf00      	nop
 8001be8:	37a8      	adds	r7, #168	; 0xa8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40016800 	.word	0x40016800
 8001bf4:	40021000 	.word	0x40021000

08001bf8 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b0b2      	sub	sp, #200	; 0xc8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c10:	f107 0318 	add.w	r3, r7, #24
 8001c14:	229c      	movs	r2, #156	; 0x9c
 8001c16:	2100      	movs	r1, #0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f005 ff53 	bl	8007ac4 <memset>
  if(hospi->Instance==OCTOSPI2)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a38      	ldr	r2, [pc, #224]	; (8001d04 <HAL_OSPI_MspInit+0x10c>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d169      	bne.n	8001cfc <HAL_OSPI_MspInit+0x104>

  /* USER CODE END OCTOSPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001c28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c2c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c34:	f107 0318 	add.w	r3, r7, #24
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f003 fd15 	bl	8005668 <HAL_RCCEx_PeriphCLKConfig>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8001c44:	f7ff fe94 	bl	8001970 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001c48:	4b2f      	ldr	r3, [pc, #188]	; (8001d08 <HAL_OSPI_MspInit+0x110>)
 8001c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4c:	4a2e      	ldr	r2, [pc, #184]	; (8001d08 <HAL_OSPI_MspInit+0x110>)
 8001c4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c54:	4b2c      	ldr	r3, [pc, #176]	; (8001d08 <HAL_OSPI_MspInit+0x110>)
 8001c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8001c60:	4b29      	ldr	r3, [pc, #164]	; (8001d08 <HAL_OSPI_MspInit+0x110>)
 8001c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c64:	4a28      	ldr	r2, [pc, #160]	; (8001d08 <HAL_OSPI_MspInit+0x110>)
 8001c66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c6a:	6513      	str	r3, [r2, #80]	; 0x50
 8001c6c:	4b26      	ldr	r3, [pc, #152]	; (8001d08 <HAL_OSPI_MspInit+0x110>)
 8001c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c78:	4b23      	ldr	r3, [pc, #140]	; (8001d08 <HAL_OSPI_MspInit+0x110>)
 8001c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7c:	4a22      	ldr	r2, [pc, #136]	; (8001d08 <HAL_OSPI_MspInit+0x110>)
 8001c7e:	f043 0308 	orr.w	r3, r3, #8
 8001c82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c84:	4b20      	ldr	r3, [pc, #128]	; (8001d08 <HAL_OSPI_MspInit+0x110>)
 8001c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c90:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <HAL_OSPI_MspInit+0x110>)
 8001c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c94:	4a1c      	ldr	r2, [pc, #112]	; (8001d08 <HAL_OSPI_MspInit+0x110>)
 8001c96:	f043 0320 	orr.w	r3, r3, #32
 8001c9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c9c:	4b1a      	ldr	r3, [pc, #104]	; (8001d08 <HAL_OSPI_MspInit+0x110>)
 8001c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca0:	f003 0320 	and.w	r3, r3, #32
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	68bb      	ldr	r3, [r7, #8]
    PD3     ------> OCTOSPIM_P2_NCS
    PF1     ------> OCTOSPIM_P2_IO1
    PF0     ------> OCTOSPIM_P2_IO0
    PF4     ------> OCTOSPIM_P2_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ca8:	2308      	movs	r3, #8
 8001caa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P2;
 8001cc0:	230a      	movs	r3, #10
 8001cc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cc6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001cca:	4619      	mov	r1, r3
 8001ccc:	480f      	ldr	r0, [pc, #60]	; (8001d0c <HAL_OSPI_MspInit+0x114>)
 8001cce:	f001 fa97 	bl	8003200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4;
 8001cd2:	2313      	movs	r3, #19
 8001cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8001cea:	2305      	movs	r3, #5
 8001cec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cf0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4806      	ldr	r0, [pc, #24]	; (8001d10 <HAL_OSPI_MspInit+0x118>)
 8001cf8:	f001 fa82 	bl	8003200 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 8001cfc:	bf00      	nop
 8001cfe:	37c8      	adds	r7, #200	; 0xc8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	a0001400 	.word	0xa0001400
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	48000c00 	.word	0x48000c00
 8001d10:	48001400 	.word	0x48001400

08001d14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b092      	sub	sp, #72	; 0x48
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a80      	ldr	r2, [pc, #512]	; (8001f34 <HAL_SPI_MspInit+0x220>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d146      	bne.n	8001dc4 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d36:	4b80      	ldr	r3, [pc, #512]	; (8001f38 <HAL_SPI_MspInit+0x224>)
 8001d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d3a:	4a7f      	ldr	r2, [pc, #508]	; (8001f38 <HAL_SPI_MspInit+0x224>)
 8001d3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d40:	6613      	str	r3, [r2, #96]	; 0x60
 8001d42:	4b7d      	ldr	r3, [pc, #500]	; (8001f38 <HAL_SPI_MspInit+0x224>)
 8001d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d4a:	633b      	str	r3, [r7, #48]	; 0x30
 8001d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4e:	4b7a      	ldr	r3, [pc, #488]	; (8001f38 <HAL_SPI_MspInit+0x224>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d52:	4a79      	ldr	r2, [pc, #484]	; (8001f38 <HAL_SPI_MspInit+0x224>)
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d5a:	4b77      	ldr	r3, [pc, #476]	; (8001f38 <HAL_SPI_MspInit+0x224>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d66:	4b74      	ldr	r3, [pc, #464]	; (8001f38 <HAL_SPI_MspInit+0x224>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6a:	4a73      	ldr	r2, [pc, #460]	; (8001f38 <HAL_SPI_MspInit+0x224>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d72:	4b71      	ldr	r3, [pc, #452]	; (8001f38 <HAL_SPI_MspInit+0x224>)
 8001d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PA15 (JTDI)     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3;
 8001d7e:	2338      	movs	r3, #56	; 0x38
 8001d80:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	2302      	movs	r3, #2
 8001d84:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d8e:	2305      	movs	r3, #5
 8001d90:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d96:	4619      	mov	r1, r3
 8001d98:	4868      	ldr	r0, [pc, #416]	; (8001f3c <HAL_SPI_MspInit+0x228>)
 8001d9a:	f001 fa31 	bl	8003200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001da2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dac:	2303      	movs	r3, #3
 8001dae:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001db0:	2305      	movs	r3, #5
 8001db2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001db8:	4619      	mov	r1, r3
 8001dba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dbe:	f001 fa1f 	bl	8003200 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001dc2:	e0b2      	b.n	8001f2a <HAL_SPI_MspInit+0x216>
  else if(hspi->Instance==SPI2)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a5d      	ldr	r2, [pc, #372]	; (8001f40 <HAL_SPI_MspInit+0x22c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d144      	bne.n	8001e58 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001dce:	4b5a      	ldr	r3, [pc, #360]	; (8001f38 <HAL_SPI_MspInit+0x224>)
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd2:	4a59      	ldr	r2, [pc, #356]	; (8001f38 <HAL_SPI_MspInit+0x224>)
 8001dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dd8:	6593      	str	r3, [r2, #88]	; 0x58
 8001dda:	4b57      	ldr	r3, [pc, #348]	; (8001f38 <HAL_SPI_MspInit+0x224>)
 8001ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001de6:	4b54      	ldr	r3, [pc, #336]	; (8001f38 <HAL_SPI_MspInit+0x224>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	4a53      	ldr	r2, [pc, #332]	; (8001f38 <HAL_SPI_MspInit+0x224>)
 8001dec:	f043 0308 	orr.w	r3, r3, #8
 8001df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001df2:	4b51      	ldr	r3, [pc, #324]	; (8001f38 <HAL_SPI_MspInit+0x224>)
 8001df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	623b      	str	r3, [r7, #32]
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dfe:	4b4e      	ldr	r3, [pc, #312]	; (8001f38 <HAL_SPI_MspInit+0x224>)
 8001e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e02:	4a4d      	ldr	r2, [pc, #308]	; (8001f38 <HAL_SPI_MspInit+0x224>)
 8001e04:	f043 0304 	orr.w	r3, r3, #4
 8001e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e0a:	4b4b      	ldr	r3, [pc, #300]	; (8001f38 <HAL_SPI_MspInit+0x224>)
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	61fb      	str	r3, [r7, #28]
 8001e14:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8001e16:	2312      	movs	r3, #18
 8001e18:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e22:	2303      	movs	r3, #3
 8001e24:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e26:	2305      	movs	r3, #5
 8001e28:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e2a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4844      	ldr	r0, [pc, #272]	; (8001f44 <HAL_SPI_MspInit+0x230>)
 8001e32:	f001 f9e5 	bl	8003200 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e36:	2304      	movs	r3, #4
 8001e38:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e42:	2303      	movs	r3, #3
 8001e44:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e46:	2305      	movs	r3, #5
 8001e48:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e4e:	4619      	mov	r1, r3
 8001e50:	483d      	ldr	r0, [pc, #244]	; (8001f48 <HAL_SPI_MspInit+0x234>)
 8001e52:	f001 f9d5 	bl	8003200 <HAL_GPIO_Init>
}
 8001e56:	e068      	b.n	8001f2a <HAL_SPI_MspInit+0x216>
  else if(hspi->Instance==SPI3)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a3b      	ldr	r2, [pc, #236]	; (8001f4c <HAL_SPI_MspInit+0x238>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d163      	bne.n	8001f2a <HAL_SPI_MspInit+0x216>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e62:	4b35      	ldr	r3, [pc, #212]	; (8001f38 <HAL_SPI_MspInit+0x224>)
 8001e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e66:	4a34      	ldr	r2, [pc, #208]	; (8001f38 <HAL_SPI_MspInit+0x224>)
 8001e68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e6c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e6e:	4b32      	ldr	r3, [pc, #200]	; (8001f38 <HAL_SPI_MspInit+0x224>)
 8001e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e76:	61bb      	str	r3, [r7, #24]
 8001e78:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e7a:	4b2f      	ldr	r3, [pc, #188]	; (8001f38 <HAL_SPI_MspInit+0x224>)
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7e:	4a2e      	ldr	r2, [pc, #184]	; (8001f38 <HAL_SPI_MspInit+0x224>)
 8001e80:	f043 0308 	orr.w	r3, r3, #8
 8001e84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e86:	4b2c      	ldr	r3, [pc, #176]	; (8001f38 <HAL_SPI_MspInit+0x224>)
 8001e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e92:	4b29      	ldr	r3, [pc, #164]	; (8001f38 <HAL_SPI_MspInit+0x224>)
 8001e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e96:	4a28      	ldr	r2, [pc, #160]	; (8001f38 <HAL_SPI_MspInit+0x224>)
 8001e98:	f043 0304 	orr.w	r3, r3, #4
 8001e9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e9e:	4b26      	ldr	r3, [pc, #152]	; (8001f38 <HAL_SPI_MspInit+0x224>)
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea2:	f003 0304 	and.w	r3, r3, #4
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001eaa:	4b23      	ldr	r3, [pc, #140]	; (8001f38 <HAL_SPI_MspInit+0x224>)
 8001eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eae:	4a22      	ldr	r2, [pc, #136]	; (8001f38 <HAL_SPI_MspInit+0x224>)
 8001eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eb6:	4b20      	ldr	r3, [pc, #128]	; (8001f38 <HAL_SPI_MspInit+0x224>)
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8001ec2:	f002 fce9 	bl	8004898 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ec6:	2340      	movs	r3, #64	; 0x40
 8001ec8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8001ed6:	2305      	movs	r3, #5
 8001ed8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eda:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4818      	ldr	r0, [pc, #96]	; (8001f44 <HAL_SPI_MspInit+0x230>)
 8001ee2:	f001 f98d 	bl	8003200 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eec:	2302      	movs	r3, #2
 8001eee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ef8:	2306      	movs	r3, #6
 8001efa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001efc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f00:	4619      	mov	r1, r3
 8001f02:	4811      	ldr	r0, [pc, #68]	; (8001f48 <HAL_SPI_MspInit+0x234>)
 8001f04:	f001 f97c 	bl	8003200 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f0c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f16:	2303      	movs	r3, #3
 8001f18:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f1a:	2306      	movs	r3, #6
 8001f1c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f1e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f22:	4619      	mov	r1, r3
 8001f24:	480a      	ldr	r0, [pc, #40]	; (8001f50 <HAL_SPI_MspInit+0x23c>)
 8001f26:	f001 f96b 	bl	8003200 <HAL_GPIO_Init>
}
 8001f2a:	bf00      	nop
 8001f2c:	3748      	adds	r7, #72	; 0x48
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40013000 	.word	0x40013000
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	48000400 	.word	0x48000400
 8001f40:	40003800 	.word	0x40003800
 8001f44:	48000c00 	.word	0x48000c00
 8001f48:	48000800 	.word	0x48000800
 8001f4c:	40003c00 	.word	0x40003c00
 8001f50:	48001800 	.word	0x48001800

08001f54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b0b0      	sub	sp, #192	; 0xc0
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f6c:	f107 0310 	add.w	r3, r7, #16
 8001f70:	229c      	movs	r2, #156	; 0x9c
 8001f72:	2100      	movs	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f005 fda5 	bl	8007ac4 <memset>
  if(huart->Instance==UART4)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a21      	ldr	r2, [pc, #132]	; (8002004 <HAL_UART_MspInit+0xb0>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d13b      	bne.n	8001ffc <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001f84:	2308      	movs	r3, #8
 8001f86:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f8c:	f107 0310 	add.w	r3, r7, #16
 8001f90:	4618      	mov	r0, r3
 8001f92:	f003 fb69 	bl	8005668 <HAL_RCCEx_PeriphCLKConfig>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f9c:	f7ff fce8 	bl	8001970 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001fa0:	4b19      	ldr	r3, [pc, #100]	; (8002008 <HAL_UART_MspInit+0xb4>)
 8001fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa4:	4a18      	ldr	r2, [pc, #96]	; (8002008 <HAL_UART_MspInit+0xb4>)
 8001fa6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001faa:	6593      	str	r3, [r2, #88]	; 0x58
 8001fac:	4b16      	ldr	r3, [pc, #88]	; (8002008 <HAL_UART_MspInit+0xb4>)
 8001fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb8:	4b13      	ldr	r3, [pc, #76]	; (8002008 <HAL_UART_MspInit+0xb4>)
 8001fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbc:	4a12      	ldr	r2, [pc, #72]	; (8002008 <HAL_UART_MspInit+0xb4>)
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fc4:	4b10      	ldr	r3, [pc, #64]	; (8002008 <HAL_UART_MspInit+0xb4>)
 8001fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	60bb      	str	r3, [r7, #8]
 8001fce:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001fe8:	2308      	movs	r3, #8
 8001fea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff8:	f001 f902 	bl	8003200 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001ffc:	bf00      	nop
 8001ffe:	37c0      	adds	r7, #192	; 0xc0
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40004c00 	.word	0x40004c00
 8002008:	40021000 	.word	0x40021000

0800200c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002010:	e7fe      	b.n	8002010 <NMI_Handler+0x4>

08002012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002016:	e7fe      	b.n	8002016 <HardFault_Handler+0x4>

08002018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800201c:	e7fe      	b.n	800201c <MemManage_Handler+0x4>

0800201e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002022:	e7fe      	b.n	8002022 <BusFault_Handler+0x4>

08002024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002028:	e7fe      	b.n	8002028 <UsageFault_Handler+0x4>

0800202a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002058:	f000 f8d8 	bl	800220c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}

08002060 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002064:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002068:	f001 fa8c 	bl	8003584 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800206c:	bf00      	nop
 800206e:	bd80      	pop	{r7, pc}

08002070 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002078:	4a14      	ldr	r2, [pc, #80]	; (80020cc <_sbrk+0x5c>)
 800207a:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <_sbrk+0x60>)
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002084:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <_sbrk+0x64>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d102      	bne.n	8002092 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800208c:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <_sbrk+0x64>)
 800208e:	4a12      	ldr	r2, [pc, #72]	; (80020d8 <_sbrk+0x68>)
 8002090:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002092:	4b10      	ldr	r3, [pc, #64]	; (80020d4 <_sbrk+0x64>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4413      	add	r3, r2
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	429a      	cmp	r2, r3
 800209e:	d207      	bcs.n	80020b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020a0:	f005 fd18 	bl	8007ad4 <__errno>
 80020a4:	4603      	mov	r3, r0
 80020a6:	220c      	movs	r2, #12
 80020a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020aa:	f04f 33ff 	mov.w	r3, #4294967295
 80020ae:	e009      	b.n	80020c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020b0:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <_sbrk+0x64>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020b6:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <_sbrk+0x64>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4413      	add	r3, r2
 80020be:	4a05      	ldr	r2, [pc, #20]	; (80020d4 <_sbrk+0x64>)
 80020c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020c2:	68fb      	ldr	r3, [r7, #12]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	200a0000 	.word	0x200a0000
 80020d0:	00000400 	.word	0x00000400
 80020d4:	20004f30 	.word	0x20004f30
 80020d8:	20005080 	.word	0x20005080

080020dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020e0:	4b06      	ldr	r3, [pc, #24]	; (80020fc <SystemInit+0x20>)
 80020e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e6:	4a05      	ldr	r2, [pc, #20]	; (80020fc <SystemInit+0x20>)
 80020e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002100:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002138 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002104:	f7ff ffea 	bl	80020dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002108:	480c      	ldr	r0, [pc, #48]	; (800213c <LoopForever+0x6>)
  ldr r1, =_edata
 800210a:	490d      	ldr	r1, [pc, #52]	; (8002140 <LoopForever+0xa>)
  ldr r2, =_sidata
 800210c:	4a0d      	ldr	r2, [pc, #52]	; (8002144 <LoopForever+0xe>)
  movs r3, #0
 800210e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002110:	e002      	b.n	8002118 <LoopCopyDataInit>

08002112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002116:	3304      	adds	r3, #4

08002118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800211a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800211c:	d3f9      	bcc.n	8002112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800211e:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002120:	4c0a      	ldr	r4, [pc, #40]	; (800214c <LoopForever+0x16>)
  movs r3, #0
 8002122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002124:	e001      	b.n	800212a <LoopFillZerobss>

08002126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002128:	3204      	adds	r2, #4

0800212a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800212a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800212c:	d3fb      	bcc.n	8002126 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800212e:	f005 fcd7 	bl	8007ae0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002132:	f7fe fa33 	bl	800059c <main>

08002136 <LoopForever>:

LoopForever:
    b LoopForever
 8002136:	e7fe      	b.n	8002136 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002138:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800213c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002140:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002144:	08008570 	.word	0x08008570
  ldr r2, =_sbss
 8002148:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800214c:	20005080 	.word	0x20005080

08002150 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002150:	e7fe      	b.n	8002150 <ADC1_IRQHandler>
	...

08002154 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800215a:	2300      	movs	r3, #0
 800215c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800215e:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <HAL_Init+0x3c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a0b      	ldr	r2, [pc, #44]	; (8002190 <HAL_Init+0x3c>)
 8002164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002168:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800216a:	2003      	movs	r0, #3
 800216c:	f000 f962 	bl	8002434 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002170:	2002      	movs	r0, #2
 8002172:	f000 f80f 	bl	8002194 <HAL_InitTick>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d002      	beq.n	8002182 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	71fb      	strb	r3, [r7, #7]
 8002180:	e001      	b.n	8002186 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002182:	f7ff fbfb 	bl	800197c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002186:	79fb      	ldrb	r3, [r7, #7]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40022000 	.word	0x40022000

08002194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800219c:	2300      	movs	r3, #0
 800219e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80021a0:	4b17      	ldr	r3, [pc, #92]	; (8002200 <HAL_InitTick+0x6c>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d023      	beq.n	80021f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80021a8:	4b16      	ldr	r3, [pc, #88]	; (8002204 <HAL_InitTick+0x70>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	4b14      	ldr	r3, [pc, #80]	; (8002200 <HAL_InitTick+0x6c>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	4619      	mov	r1, r3
 80021b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 f96d 	bl	800249e <HAL_SYSTICK_Config>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10f      	bne.n	80021ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b0f      	cmp	r3, #15
 80021ce:	d809      	bhi.n	80021e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021d0:	2200      	movs	r2, #0
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	f04f 30ff 	mov.w	r0, #4294967295
 80021d8:	f000 f937 	bl	800244a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021dc:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <HAL_InitTick+0x74>)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	e007      	b.n	80021f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	73fb      	strb	r3, [r7, #15]
 80021e8:	e004      	b.n	80021f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	73fb      	strb	r3, [r7, #15]
 80021ee:	e001      	b.n	80021f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000008 	.word	0x20000008
 8002204:	20000000 	.word	0x20000000
 8002208:	20000004 	.word	0x20000004

0800220c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_IncTick+0x20>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	461a      	mov	r2, r3
 8002216:	4b06      	ldr	r3, [pc, #24]	; (8002230 <HAL_IncTick+0x24>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4413      	add	r3, r2
 800221c:	4a04      	ldr	r2, [pc, #16]	; (8002230 <HAL_IncTick+0x24>)
 800221e:	6013      	str	r3, [r2, #0]
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20000008 	.word	0x20000008
 8002230:	20004f34 	.word	0x20004f34

08002234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return uwTick;
 8002238:	4b03      	ldr	r3, [pc, #12]	; (8002248 <HAL_GetTick+0x14>)
 800223a:	681b      	ldr	r3, [r3, #0]
}
 800223c:	4618      	mov	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	20004f34 	.word	0x20004f34

0800224c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002254:	f7ff ffee 	bl	8002234 <HAL_GetTick>
 8002258:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002264:	d005      	beq.n	8002272 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002266:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <HAL_Delay+0x44>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	461a      	mov	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4413      	add	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002272:	bf00      	nop
 8002274:	f7ff ffde 	bl	8002234 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	429a      	cmp	r2, r3
 8002282:	d8f7      	bhi.n	8002274 <HAL_Delay+0x28>
  {
  }
}
 8002284:	bf00      	nop
 8002286:	bf00      	nop
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000008 	.word	0x20000008

08002294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022a4:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <__NVIC_SetPriorityGrouping+0x44>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022b0:	4013      	ands	r3, r2
 80022b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022c6:	4a04      	ldr	r2, [pc, #16]	; (80022d8 <__NVIC_SetPriorityGrouping+0x44>)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	60d3      	str	r3, [r2, #12]
}
 80022cc:	bf00      	nop
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022e0:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <__NVIC_GetPriorityGrouping+0x18>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	0a1b      	lsrs	r3, r3, #8
 80022e6:	f003 0307 	and.w	r3, r3, #7
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	2b00      	cmp	r3, #0
 8002308:	db0b      	blt.n	8002322 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	f003 021f 	and.w	r2, r3, #31
 8002310:	4907      	ldr	r1, [pc, #28]	; (8002330 <__NVIC_EnableIRQ+0x38>)
 8002312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002316:	095b      	lsrs	r3, r3, #5
 8002318:	2001      	movs	r0, #1
 800231a:	fa00 f202 	lsl.w	r2, r0, r2
 800231e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	e000e100 	.word	0xe000e100

08002334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	6039      	str	r1, [r7, #0]
 800233e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002344:	2b00      	cmp	r3, #0
 8002346:	db0a      	blt.n	800235e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	b2da      	uxtb	r2, r3
 800234c:	490c      	ldr	r1, [pc, #48]	; (8002380 <__NVIC_SetPriority+0x4c>)
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	0112      	lsls	r2, r2, #4
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	440b      	add	r3, r1
 8002358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800235c:	e00a      	b.n	8002374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	b2da      	uxtb	r2, r3
 8002362:	4908      	ldr	r1, [pc, #32]	; (8002384 <__NVIC_SetPriority+0x50>)
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	3b04      	subs	r3, #4
 800236c:	0112      	lsls	r2, r2, #4
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	440b      	add	r3, r1
 8002372:	761a      	strb	r2, [r3, #24]
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	e000e100 	.word	0xe000e100
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002388:	b480      	push	{r7}
 800238a:	b089      	sub	sp, #36	; 0x24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f1c3 0307 	rsb	r3, r3, #7
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	bf28      	it	cs
 80023a6:	2304      	movcs	r3, #4
 80023a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3304      	adds	r3, #4
 80023ae:	2b06      	cmp	r3, #6
 80023b0:	d902      	bls.n	80023b8 <NVIC_EncodePriority+0x30>
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3b03      	subs	r3, #3
 80023b6:	e000      	b.n	80023ba <NVIC_EncodePriority+0x32>
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023bc:	f04f 32ff 	mov.w	r2, #4294967295
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43da      	mvns	r2, r3
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	401a      	ands	r2, r3
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023d0:	f04f 31ff 	mov.w	r1, #4294967295
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	fa01 f303 	lsl.w	r3, r1, r3
 80023da:	43d9      	mvns	r1, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e0:	4313      	orrs	r3, r2
         );
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3724      	adds	r7, #36	; 0x24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
	...

080023f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002400:	d301      	bcc.n	8002406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002402:	2301      	movs	r3, #1
 8002404:	e00f      	b.n	8002426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002406:	4a0a      	ldr	r2, [pc, #40]	; (8002430 <SysTick_Config+0x40>)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3b01      	subs	r3, #1
 800240c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800240e:	210f      	movs	r1, #15
 8002410:	f04f 30ff 	mov.w	r0, #4294967295
 8002414:	f7ff ff8e 	bl	8002334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002418:	4b05      	ldr	r3, [pc, #20]	; (8002430 <SysTick_Config+0x40>)
 800241a:	2200      	movs	r2, #0
 800241c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800241e:	4b04      	ldr	r3, [pc, #16]	; (8002430 <SysTick_Config+0x40>)
 8002420:	2207      	movs	r2, #7
 8002422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	e000e010 	.word	0xe000e010

08002434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff ff29 	bl	8002294 <__NVIC_SetPriorityGrouping>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b086      	sub	sp, #24
 800244e:	af00      	add	r7, sp, #0
 8002450:	4603      	mov	r3, r0
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	607a      	str	r2, [r7, #4]
 8002456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800245c:	f7ff ff3e 	bl	80022dc <__NVIC_GetPriorityGrouping>
 8002460:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	68b9      	ldr	r1, [r7, #8]
 8002466:	6978      	ldr	r0, [r7, #20]
 8002468:	f7ff ff8e 	bl	8002388 <NVIC_EncodePriority>
 800246c:	4602      	mov	r2, r0
 800246e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002472:	4611      	mov	r1, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ff5d 	bl	8002334 <__NVIC_SetPriority>
}
 800247a:	bf00      	nop
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	4603      	mov	r3, r0
 800248a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800248c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff ff31 	bl	80022f8 <__NVIC_EnableIRQ>
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff ffa2 	bl	80023f0 <SysTick_Config>
 80024ac:	4603      	mov	r3, r0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b085      	sub	sp, #20
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	60b9      	str	r1, [r7, #8]
 80024c0:	607a      	str	r2, [r7, #4]
 80024c2:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	019a      	lsls	r2, r3, #6
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	431a      	orrs	r2, r3
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	021b      	lsls	r3, r3, #8
 80024d0:	431a      	orrs	r2, r3
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	041b      	lsls	r3, r3, #16
 80024d6:	431a      	orrs	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80024dc:	bf00      	nop
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
 80024f4:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80024f6:	f7ff fe9d 	bl	8002234 <HAL_GetTick>
 80024fa:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80024fc:	e009      	b.n	8002512 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80024fe:	f7ff fe99 	bl	8002234 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800250c:	d901      	bls.n	8002512 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e015      	b.n	800253e <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0ee      	beq.n	80024fe <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	019a      	lsls	r2, r3, #6
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	431a      	orrs	r2, r3
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	021b      	lsls	r3, r3, #8
 800252c:	ea42 0103 	orr.w	r1, r2, r3
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	041a      	lsls	r2, r3, #16
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b088      	sub	sp, #32
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e10b      	b.n	8002774 <HAL_DSI_Init+0x22c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	7c5b      	ldrb	r3, [r3, #17]
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d102      	bne.n	800256c <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7ff fa2c 	bl	80019c4 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2203      	movs	r2, #3
 8002570:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8002572:	2300      	movs	r3, #0
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002586:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002592:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800259a:	f7ff fe4b 	bl	8002234 <HAL_GetTick>
 800259e:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80025a0:	e009      	b.n	80025b6 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80025a2:	f7ff fe47 	bl	8002234 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025b0:	d901      	bls.n	80025b6 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e0de      	b.n	8002774 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80025be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0ed      	beq.n	80025a2 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6812      	ldr	r2, [r2, #0]
 80025d2:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 80025d6:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 80025da:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80025f2:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80025fa:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0201 	orr.w	r2, r2, #1
 800261a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 800262e:	2001      	movs	r0, #1
 8002630:	f7ff fe0c 	bl	800224c <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8002634:	f7ff fdfe 	bl	8002234 <HAL_GetTick>
 8002638:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800263a:	e009      	b.n	8002650 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800263c:	f7ff fdfa 	bl	8002234 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800264a:	d901      	bls.n	8002650 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e091      	b.n	8002774 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0ed      	beq.n	800263c <HAL_DSI_Init+0xf4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f042 0206 	orr.w	r2, r2, #6
 8002670:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0203 	bic.w	r2, r2, #3
 8002684:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	431a      	orrs	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0201 	orr.w	r2, r2, #1
 800269e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0203 	bic.w	r2, r2, #3
 80026b2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026da:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6899      	ldr	r1, [r3, #8]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d002      	beq.n	80026fc <HAL_DSI_Init+0x1b4>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	e000      	b.n	80026fe <HAL_DSI_Init+0x1b6>
 80026fc:	2301      	movs	r3, #1
 80026fe:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	4a1e      	ldr	r2, [pc, #120]	; (800277c <HAL_DSI_Init+0x234>)
 8002704:	fb03 f202 	mul.w	r2, r3, r2
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	409a      	lsls	r2, r3
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800271a:	fb01 f303 	mul.w	r3, r1, r3
 800271e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002722:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002734:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	430a      	orrs	r2, r1
 8002748:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2200      	movs	r2, #0
 8002752:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2200      	movs	r2, #0
 800275c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3720      	adds	r7, #32
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	003d0900 	.word	0x003d0900

08002780 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	7c1b      	ldrb	r3, [r3, #16]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d101      	bne.n	8002796 <HAL_DSI_ConfigErrorMonitor+0x16>
 8002792:	2302      	movs	r3, #2
 8002794:	e0ab      	b.n	80028ee <HAL_DSI_ConfigErrorMonitor+0x16e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00b      	beq.n	80027d8 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80027d0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80027d4:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d009      	beq.n	80027f6 <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 80027f2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d009      	beq.n	8002814 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f042 0201 	orr.w	r2, r2, #1
 8002810:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d009      	beq.n	8002832 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0202 	orr.w	r2, r2, #2
 800282e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	2b00      	cmp	r3, #0
 800283a:	d009      	beq.n	8002850 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f042 020c 	orr.w	r2, r2, #12
 800284c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	f003 0320 	and.w	r3, r3, #32
 8002856:	2b00      	cmp	r3, #0
 8002858:	d009      	beq.n	800286e <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 0210 	orr.w	r2, r2, #16
 800286a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002874:	2b00      	cmp	r3, #0
 8002876:	d009      	beq.n	800288c <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f042 0220 	orr.w	r2, r2, #32
 8002888:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002892:	2b00      	cmp	r3, #0
 8002894:	d009      	beq.n	80028aa <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028a6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d009      	beq.n	80028c8 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028c4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d009      	beq.n	80028e6 <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 80028e2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	7c1b      	ldrb	r3, [r3, #16]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_DSI_SetGenericVCID+0x16>
 800290c:	2302      	movs	r3, #2
 800290e:	e016      	b.n	800293e <HAL_DSI_SetGenericVCID+0x44>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0203 	bic.w	r2, r2, #3
 8002924:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	7c1b      	ldrb	r3, [r3, #16]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d101      	bne.n	8002960 <HAL_DSI_ConfigVideoMode+0x16>
 800295c:	2302      	movs	r3, #2
 800295e:	e1f6      	b.n	8002d4e <HAL_DSI_ConfigVideoMode+0x404>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 0201 	bic.w	r2, r2, #1
 8002974:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0201 	bic.w	r2, r2, #1
 8002986:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0203 	bic.w	r2, r2, #3
 8002998:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6812      	ldr	r2, [r2, #0]
 80029b6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80029ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029be:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	691a      	ldr	r2, [r3, #16]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80029e0:	f023 031f 	bic.w	r3, r3, #31
 80029e4:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	695a      	ldr	r2, [r3, #20]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6812      	ldr	r2, [r2, #0]
 8002a02:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002a06:	f023 031f 	bic.w	r3, r3, #31
 8002a0a:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	699a      	ldr	r2, [r3, #24]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 0203 	bic.w	r2, r2, #3
 8002a2c:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68d9      	ldr	r1, [r3, #12]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	695a      	ldr	r2, [r3, #20]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0207 	bic.w	r2, r2, #7
 8002a4e:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6959      	ldr	r1, [r3, #20]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	431a      	orrs	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	691a      	ldr	r2, [r3, #16]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 020f 	bic.w	r2, r2, #15
 8002a7c:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6919      	ldr	r1, [r3, #16]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 020e 	bic.w	r2, r2, #14
 8002aa0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	005a      	lsls	r2, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	2b03      	cmp	r3, #3
 8002ac2:	d110      	bne.n	8002ae6 <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691a      	ldr	r2, [r3, #16]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ad2:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6919      	ldr	r1, [r3, #16]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002af4:	f023 030f 	bic.w	r3, r3, #15
 8002af8:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6812      	ldr	r2, [r2, #0]
 8002b16:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002b1a:	f023 030f 	bic.w	r3, r3, #15
 8002b1e:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002b40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002b44:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6812      	ldr	r2, [r2, #0]
 8002b62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b66:	f023 0303 	bic.w	r3, r3, #3
 8002b6a:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6812      	ldr	r2, [r2, #0]
 8002b88:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b8c:	f023 0303 	bic.w	r3, r3, #3
 8002b90:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6812      	ldr	r2, [r2, #0]
 8002bae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bb2:	f023 0303 	bic.w	r3, r3, #3
 8002bb6:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6812      	ldr	r2, [r2, #0]
 8002bd4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002bd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bdc:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bfe:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	699a      	ldr	r2, [r3, #24]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8002c20:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6999      	ldr	r1, [r3, #24]
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c2c:	041a      	lsls	r2, r3, #16
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	699a      	ldr	r2, [r3, #24]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c44:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6999      	ldr	r1, [r3, #24]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c66:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c88:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002caa:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ccc:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002cee:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d10:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d32:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b085      	sub	sp, #20
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	7c1b      	ldrb	r3, [r3, #16]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d101      	bne.n	8002d70 <HAL_DSI_ConfigPhyTimer+0x16>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	e058      	b.n	8002e22 <HAL_DSI_ConfigPhyTimer+0xc8>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	bf38      	it	cc
 8002d82:	4613      	movcc	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8002d96:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	041a      	lsls	r2, r3, #16
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8002dc4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	041b      	lsls	r3, r3, #16
 8002dda:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002dfe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	021a      	lsls	r2, r3, #8
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
 8002e36:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	7c1b      	ldrb	r3, [r3, #16]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_DSI_ConfigHostTimeouts+0x16>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e0b4      	b.n	8002fae <HAL_DSI_ConfigHostTimeouts+0x180>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002e58:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6899      	ldr	r1, [r3, #8]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	021a      	lsls	r2, r3, #8
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	b292      	uxth	r2, r2
 8002e7a:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	041a      	lsls	r2, r3, #16
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6812      	ldr	r2, [r2, #0]
 8002e9a:	0c1b      	lsrs	r3, r3, #16
 8002e9c:	041b      	lsls	r3, r3, #16
 8002e9e:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6812      	ldr	r2, [r2, #0]
 8002ebc:	0c1b      	lsrs	r3, r3, #16
 8002ebe:	041b      	lsls	r3, r3, #16
 8002ec0:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	68da      	ldr	r2, [r3, #12]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	0c1b      	lsrs	r3, r3, #16
 8002ee2:	041b      	lsls	r3, r3, #16
 8002ee4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	691a      	ldr	r2, [r3, #16]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	0c1b      	lsrs	r3, r3, #16
 8002f0c:	041b      	lsls	r3, r3, #16
 8002f0e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	695a      	ldr	r2, [r3, #20]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002f38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	699a      	ldr	r2, [r3, #24]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6812      	ldr	r2, [r2, #0]
 8002f5e:	0c1b      	lsrs	r3, r3, #16
 8002f60:	041b      	lsls	r3, r3, #16
 8002f62:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	69da      	ldr	r2, [r3, #28]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6812      	ldr	r2, [r2, #0]
 8002f88:	0c1b      	lsrs	r3, r3, #16
 8002f8a:	041b      	lsls	r3, r3, #16
 8002f8c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	6a1a      	ldr	r2, [r3, #32]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b085      	sub	sp, #20
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	7c1b      	ldrb	r3, [r3, #16]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_DSI_Start+0x14>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e02b      	b.n	8003026 <HAL_DSI_Start+0x6c>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0201 	orr.w	r2, r2, #1
 8002fe6:	605a      	str	r2, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0208 	orr.w	r2, r2, #8
 800300a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	60bb      	str	r3, [r7, #8]
 800301c:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b088      	sub	sp, #32
 8003036:	af02      	add	r7, sp, #8
 8003038:	60f8      	str	r0, [r7, #12]
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	607a      	str	r2, [r7, #4]
 800303e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	7c1b      	ldrb	r3, [r3, #16]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_DSI_ShortWrite+0x1a>
 8003048:	2302      	movs	r3, #2
 800304a:	e010      	b.n	800306e <HAL_DSI_ShortWrite+0x3c>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2201      	movs	r2, #1
 8003050:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	68b9      	ldr	r1, [r7, #8]
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f7ff fa43 	bl	80024e8 <DSI_ShortWrite>
 8003062:	4603      	mov	r3, r0
 8003064:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	741a      	strb	r2, [r3, #16]

  return status;
 800306c:	7dfb      	ldrb	r3, [r7, #23]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b08c      	sub	sp, #48	; 0x30
 800307a:	af02      	add	r7, sp, #8
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	607a      	str	r2, [r7, #4]
 8003082:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8003084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003086:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	7c1b      	ldrb	r3, [r3, #16]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_DSI_LongWrite+0x1e>
 8003090:	2302      	movs	r3, #2
 8003092:	e084      	b.n	800319e <HAL_DSI_LongWrite+0x128>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2201      	movs	r2, #1
 8003098:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800309a:	f7ff f8cb 	bl	8002234 <HAL_GetTick>
 800309e:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80030a0:	e00c      	b.n	80030bc <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80030a2:	f7ff f8c7 	bl	8002234 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030b0:	d904      	bls.n	80030bc <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e070      	b.n	800319e <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0eb      	beq.n	80030a2 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 80030ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030cc:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2b03      	cmp	r3, #3
 80030d2:	bf28      	it	cs
 80030d4:	2303      	movcs	r3, #3
 80030d6:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 80030d8:	2300      	movs	r3, #0
 80030da:	623b      	str	r3, [r7, #32]
 80030dc:	e00f      	b.n	80030fe <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	4413      	add	r3, r2
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	3301      	adds	r3, #1
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	69fa      	ldr	r2, [r7, #28]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	3301      	adds	r3, #1
 80030fc:	623b      	str	r3, [r7, #32]
 80030fe:	6a3a      	ldr	r2, [r7, #32]
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	429a      	cmp	r2, r3
 8003104:	d3eb      	bcc.n	80030de <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	4413      	add	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800311e:	e028      	b.n	8003172 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	2b04      	cmp	r3, #4
 8003124:	bf28      	it	cs
 8003126:	2304      	movcs	r3, #4
 8003128:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 800312a:	2300      	movs	r3, #0
 800312c:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 800312e:	2300      	movs	r3, #0
 8003130:	623b      	str	r3, [r7, #32]
 8003132:	e00e      	b.n	8003152 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	4413      	add	r3, r2
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	461a      	mov	r2, r3
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	69fa      	ldr	r2, [r7, #28]
 8003148:	4313      	orrs	r3, r2
 800314a:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	3301      	adds	r3, #1
 8003150:	623b      	str	r3, [r7, #32]
 8003152:	6a3a      	ldr	r2, [r7, #32]
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	429a      	cmp	r2, r3
 8003158:	d3ec      	bcc.n	8003134 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	69fa      	ldr	r2, [r7, #28]
 8003160:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8003162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	4413      	add	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1d3      	bne.n	8003120 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003180:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	3301      	adds	r3, #1
 8003186:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003188:	b2db      	uxtb	r3, r3
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	4613      	mov	r3, r2
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	68b9      	ldr	r1, [r7, #8]
 8003192:	f7ff f990 	bl	80024b6 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3728      	adds	r7, #40	; 0x28
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
 80031ae:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	7c1b      	ldrb	r3, [r3, #16]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <HAL_DSI_SetLowPowerRXFilter+0x16>
 80031b8:	2302      	movs	r3, #2
 80031ba:	e01b      	b.n	80031f4 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80031d2:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	065a      	lsls	r2, r3, #25
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003200:	b480      	push	{r7}
 8003202:	b087      	sub	sp, #28
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800320a:	2300      	movs	r3, #0
 800320c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800320e:	e166      	b.n	80034de <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	2101      	movs	r1, #1
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	fa01 f303 	lsl.w	r3, r1, r3
 800321c:	4013      	ands	r3, r2
 800321e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 8158 	beq.w	80034d8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 0303 	and.w	r3, r3, #3
 8003230:	2b01      	cmp	r3, #1
 8003232:	d005      	beq.n	8003240 <HAL_GPIO_Init+0x40>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f003 0303 	and.w	r3, r3, #3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d130      	bne.n	80032a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	2203      	movs	r2, #3
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4013      	ands	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	4313      	orrs	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003276:	2201      	movs	r2, #1
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	43db      	mvns	r3, r3
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	4013      	ands	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	091b      	lsrs	r3, r3, #4
 800328c:	f003 0201 	and.w	r2, r3, #1
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	4313      	orrs	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	2b03      	cmp	r3, #3
 80032ac:	d017      	beq.n	80032de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	2203      	movs	r2, #3
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43db      	mvns	r3, r3
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	4013      	ands	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d123      	bne.n	8003332 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	08da      	lsrs	r2, r3, #3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3208      	adds	r2, #8
 80032f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	220f      	movs	r2, #15
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	43db      	mvns	r3, r3
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	4013      	ands	r3, r2
 800330c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	691a      	ldr	r2, [r3, #16]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	08da      	lsrs	r2, r3, #3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3208      	adds	r2, #8
 800332c:	6939      	ldr	r1, [r7, #16]
 800332e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	2203      	movs	r2, #3
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	43db      	mvns	r3, r3
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	4013      	ands	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f003 0203 	and.w	r2, r3, #3
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 80b2 	beq.w	80034d8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003374:	4b61      	ldr	r3, [pc, #388]	; (80034fc <HAL_GPIO_Init+0x2fc>)
 8003376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003378:	4a60      	ldr	r2, [pc, #384]	; (80034fc <HAL_GPIO_Init+0x2fc>)
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	6613      	str	r3, [r2, #96]	; 0x60
 8003380:	4b5e      	ldr	r3, [pc, #376]	; (80034fc <HAL_GPIO_Init+0x2fc>)
 8003382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	60bb      	str	r3, [r7, #8]
 800338a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800338c:	4a5c      	ldr	r2, [pc, #368]	; (8003500 <HAL_GPIO_Init+0x300>)
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	089b      	lsrs	r3, r3, #2
 8003392:	3302      	adds	r3, #2
 8003394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003398:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f003 0303 	and.w	r3, r3, #3
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	220f      	movs	r2, #15
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	4013      	ands	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80033b6:	d02b      	beq.n	8003410 <HAL_GPIO_Init+0x210>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a52      	ldr	r2, [pc, #328]	; (8003504 <HAL_GPIO_Init+0x304>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d025      	beq.n	800340c <HAL_GPIO_Init+0x20c>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a51      	ldr	r2, [pc, #324]	; (8003508 <HAL_GPIO_Init+0x308>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d01f      	beq.n	8003408 <HAL_GPIO_Init+0x208>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a50      	ldr	r2, [pc, #320]	; (800350c <HAL_GPIO_Init+0x30c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d019      	beq.n	8003404 <HAL_GPIO_Init+0x204>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a4f      	ldr	r2, [pc, #316]	; (8003510 <HAL_GPIO_Init+0x310>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d013      	beq.n	8003400 <HAL_GPIO_Init+0x200>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a4e      	ldr	r2, [pc, #312]	; (8003514 <HAL_GPIO_Init+0x314>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d00d      	beq.n	80033fc <HAL_GPIO_Init+0x1fc>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a4d      	ldr	r2, [pc, #308]	; (8003518 <HAL_GPIO_Init+0x318>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d007      	beq.n	80033f8 <HAL_GPIO_Init+0x1f8>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a4c      	ldr	r2, [pc, #304]	; (800351c <HAL_GPIO_Init+0x31c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d101      	bne.n	80033f4 <HAL_GPIO_Init+0x1f4>
 80033f0:	2307      	movs	r3, #7
 80033f2:	e00e      	b.n	8003412 <HAL_GPIO_Init+0x212>
 80033f4:	2308      	movs	r3, #8
 80033f6:	e00c      	b.n	8003412 <HAL_GPIO_Init+0x212>
 80033f8:	2306      	movs	r3, #6
 80033fa:	e00a      	b.n	8003412 <HAL_GPIO_Init+0x212>
 80033fc:	2305      	movs	r3, #5
 80033fe:	e008      	b.n	8003412 <HAL_GPIO_Init+0x212>
 8003400:	2304      	movs	r3, #4
 8003402:	e006      	b.n	8003412 <HAL_GPIO_Init+0x212>
 8003404:	2303      	movs	r3, #3
 8003406:	e004      	b.n	8003412 <HAL_GPIO_Init+0x212>
 8003408:	2302      	movs	r3, #2
 800340a:	e002      	b.n	8003412 <HAL_GPIO_Init+0x212>
 800340c:	2301      	movs	r3, #1
 800340e:	e000      	b.n	8003412 <HAL_GPIO_Init+0x212>
 8003410:	2300      	movs	r3, #0
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	f002 0203 	and.w	r2, r2, #3
 8003418:	0092      	lsls	r2, r2, #2
 800341a:	4093      	lsls	r3, r2
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	4313      	orrs	r3, r2
 8003420:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003422:	4937      	ldr	r1, [pc, #220]	; (8003500 <HAL_GPIO_Init+0x300>)
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	089b      	lsrs	r3, r3, #2
 8003428:	3302      	adds	r3, #2
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003430:	4b3b      	ldr	r3, [pc, #236]	; (8003520 <HAL_GPIO_Init+0x320>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	43db      	mvns	r3, r3
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4013      	ands	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	4313      	orrs	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003454:	4a32      	ldr	r2, [pc, #200]	; (8003520 <HAL_GPIO_Init+0x320>)
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800345a:	4b31      	ldr	r3, [pc, #196]	; (8003520 <HAL_GPIO_Init+0x320>)
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	43db      	mvns	r3, r3
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4013      	ands	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4313      	orrs	r3, r2
 800347c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800347e:	4a28      	ldr	r2, [pc, #160]	; (8003520 <HAL_GPIO_Init+0x320>)
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003484:	4b26      	ldr	r3, [pc, #152]	; (8003520 <HAL_GPIO_Init+0x320>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	43db      	mvns	r3, r3
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	4013      	ands	r3, r2
 8003492:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034a8:	4a1d      	ldr	r2, [pc, #116]	; (8003520 <HAL_GPIO_Init+0x320>)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80034ae:	4b1c      	ldr	r3, [pc, #112]	; (8003520 <HAL_GPIO_Init+0x320>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	43db      	mvns	r3, r3
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	4013      	ands	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034d2:	4a13      	ldr	r2, [pc, #76]	; (8003520 <HAL_GPIO_Init+0x320>)
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	3301      	adds	r3, #1
 80034dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	fa22 f303 	lsr.w	r3, r2, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f47f ae91 	bne.w	8003210 <HAL_GPIO_Init+0x10>
  }
}
 80034ee:	bf00      	nop
 80034f0:	bf00      	nop
 80034f2:	371c      	adds	r7, #28
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	40021000 	.word	0x40021000
 8003500:	40010000 	.word	0x40010000
 8003504:	48000400 	.word	0x48000400
 8003508:	48000800 	.word	0x48000800
 800350c:	48000c00 	.word	0x48000c00
 8003510:	48001000 	.word	0x48001000
 8003514:	48001400 	.word	0x48001400
 8003518:	48001800 	.word	0x48001800
 800351c:	48001c00 	.word	0x48001c00
 8003520:	40010400 	.word	0x40010400

08003524 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691a      	ldr	r2, [r3, #16]
 8003534:	887b      	ldrh	r3, [r7, #2]
 8003536:	4013      	ands	r3, r2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d002      	beq.n	8003542 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800353c:	2301      	movs	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
 8003540:	e001      	b.n	8003546 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003542:	2300      	movs	r3, #0
 8003544:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003546:	7bfb      	ldrb	r3, [r7, #15]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	807b      	strh	r3, [r7, #2]
 8003560:	4613      	mov	r3, r2
 8003562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003564:	787b      	ldrb	r3, [r7, #1]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800356a:	887a      	ldrh	r2, [r7, #2]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003570:	e002      	b.n	8003578 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003572:	887a      	ldrh	r2, [r7, #2]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	4603      	mov	r3, r0
 800358c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800358e:	4b08      	ldr	r3, [pc, #32]	; (80035b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003590:	695a      	ldr	r2, [r3, #20]
 8003592:	88fb      	ldrh	r3, [r7, #6]
 8003594:	4013      	ands	r3, r2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d006      	beq.n	80035a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800359a:	4a05      	ldr	r2, [pc, #20]	; (80035b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800359c:	88fb      	ldrh	r3, [r7, #6]
 800359e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035a0:	88fb      	ldrh	r3, [r7, #6]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fe f80c 	bl	80015c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80035a8:	bf00      	nop
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	40010400 	.word	0x40010400

080035b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e08d      	b.n	80036e2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d106      	bne.n	80035e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7fe fa26 	bl	8001a2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2224      	movs	r2, #36	; 0x24
 80035e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0201 	bic.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003604:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003614:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d107      	bne.n	800362e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800362a:	609a      	str	r2, [r3, #8]
 800362c:	e006      	b.n	800363c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800363a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	2b02      	cmp	r3, #2
 8003642:	d108      	bne.n	8003656 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003652:	605a      	str	r2, [r3, #4]
 8003654:	e007      	b.n	8003666 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003664:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6812      	ldr	r2, [r2, #0]
 8003670:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003674:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003678:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003688:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691a      	ldr	r2, [r3, #16]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	69d9      	ldr	r1, [r3, #28]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a1a      	ldr	r2, [r3, #32]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0201 	orr.w	r2, r2, #1
 80036c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2220      	movs	r2, #32
 80036ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b083      	sub	sp, #12
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
 80036f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b20      	cmp	r3, #32
 80036fe:	d138      	bne.n	8003772 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003706:	2b01      	cmp	r3, #1
 8003708:	d101      	bne.n	800370e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800370a:	2302      	movs	r3, #2
 800370c:	e032      	b.n	8003774 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2224      	movs	r2, #36	; 0x24
 800371a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0201 	bic.w	r2, r2, #1
 800372c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800373c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6819      	ldr	r1, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f042 0201 	orr.w	r2, r2, #1
 800375c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2220      	movs	r2, #32
 8003762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	e000      	b.n	8003774 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003772:	2302      	movs	r3, #2
  }
}
 8003774:	4618      	mov	r0, r3
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b20      	cmp	r3, #32
 8003794:	d139      	bne.n	800380a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e033      	b.n	800380c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2224      	movs	r2, #36	; 0x24
 80037b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0201 	bic.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037d2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	021b      	lsls	r3, r3, #8
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	4313      	orrs	r3, r2
 80037dc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f042 0201 	orr.w	r2, r2, #1
 80037f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2220      	movs	r2, #32
 80037fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003806:	2300      	movs	r3, #0
 8003808:	e000      	b.n	800380c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800380a:	2302      	movs	r3, #2
  }
}
 800380c:	4618      	mov	r0, r3
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e0bf      	b.n	80039aa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d106      	bne.n	8003844 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7fe f996 	bl	8001b70 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699a      	ldr	r2, [r3, #24]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800385a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6999      	ldr	r1, [r3, #24]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003870:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6899      	ldr	r1, [r3, #8]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	4b4a      	ldr	r3, [pc, #296]	; (80039b4 <HAL_LTDC_Init+0x19c>)
 800388c:	400b      	ands	r3, r1
 800388e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	041b      	lsls	r3, r3, #16
 8003896:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6899      	ldr	r1, [r3, #8]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699a      	ldr	r2, [r3, #24]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	431a      	orrs	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68d9      	ldr	r1, [r3, #12]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	4b3e      	ldr	r3, [pc, #248]	; (80039b4 <HAL_LTDC_Init+0x19c>)
 80038ba:	400b      	ands	r3, r1
 80038bc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	041b      	lsls	r3, r3, #16
 80038c4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68d9      	ldr	r1, [r3, #12]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1a      	ldr	r2, [r3, #32]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6919      	ldr	r1, [r3, #16]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	4b33      	ldr	r3, [pc, #204]	; (80039b4 <HAL_LTDC_Init+0x19c>)
 80038e8:	400b      	ands	r3, r1
 80038ea:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	041b      	lsls	r3, r3, #16
 80038f2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6919      	ldr	r1, [r3, #16]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	431a      	orrs	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6959      	ldr	r1, [r3, #20]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	4b27      	ldr	r3, [pc, #156]	; (80039b4 <HAL_LTDC_Init+0x19c>)
 8003916:	400b      	ands	r3, r1
 8003918:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391e:	041b      	lsls	r3, r3, #16
 8003920:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6959      	ldr	r1, [r3, #20]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800393e:	021b      	lsls	r3, r3, #8
 8003940:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003948:	041b      	lsls	r3, r3, #16
 800394a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800395a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	4313      	orrs	r3, r2
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0206 	orr.w	r2, r2, #6
 8003986:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699a      	ldr	r2, [r3, #24]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0201 	orr.w	r2, r2, #1
 8003996:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	f000f800 	.word	0xf000f800

080039b8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80039b8:	b5b0      	push	{r4, r5, r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d101      	bne.n	80039d2 <HAL_LTDC_ConfigLayer+0x1a>
 80039ce:	2302      	movs	r3, #2
 80039d0:	e02c      	b.n	8003a2c <HAL_LTDC_ConfigLayer+0x74>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2202      	movs	r2, #2
 80039de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2134      	movs	r1, #52	; 0x34
 80039e8:	fb01 f303 	mul.w	r3, r1, r3
 80039ec:	4413      	add	r3, r2
 80039ee:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	4614      	mov	r4, r2
 80039f6:	461d      	mov	r5, r3
 80039f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a04:	682b      	ldr	r3, [r5, #0]
 8003a06:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	68b9      	ldr	r1, [r7, #8]
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 f811 	bl	8003a34 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2201      	movs	r2, #1
 8003a18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bdb0      	pop	{r4, r5, r7, pc}

08003a34 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b089      	sub	sp, #36	; 0x24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	0c1b      	lsrs	r3, r3, #16
 8003a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a50:	4413      	add	r3, r2
 8003a52:	041b      	lsls	r3, r3, #16
 8003a54:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	01db      	lsls	r3, r3, #7
 8003a60:	4413      	add	r3, r2
 8003a62:	3384      	adds	r3, #132	; 0x84
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	6812      	ldr	r2, [r2, #0]
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	01d2      	lsls	r2, r2, #7
 8003a70:	440a      	add	r2, r1
 8003a72:	3284      	adds	r2, #132	; 0x84
 8003a74:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8003a78:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	0c1b      	lsrs	r3, r3, #16
 8003a86:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003a8a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003a8c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4619      	mov	r1, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	01db      	lsls	r3, r3, #7
 8003a98:	440b      	add	r3, r1
 8003a9a:	3384      	adds	r3, #132	; 0x84
 8003a9c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003aa2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ab2:	4413      	add	r3, r2
 8003ab4:	041b      	lsls	r3, r3, #16
 8003ab6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	461a      	mov	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	01db      	lsls	r3, r3, #7
 8003ac2:	4413      	add	r3, r2
 8003ac4:	3384      	adds	r3, #132	; 0x84
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	6812      	ldr	r2, [r2, #0]
 8003acc:	4611      	mov	r1, r2
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	01d2      	lsls	r2, r2, #7
 8003ad2:	440a      	add	r2, r1
 8003ad4:	3284      	adds	r2, #132	; 0x84
 8003ad6:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8003ada:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003aea:	4413      	add	r3, r2
 8003aec:	1c5a      	adds	r2, r3, #1
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4619      	mov	r1, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	01db      	lsls	r3, r3, #7
 8003af8:	440b      	add	r3, r1
 8003afa:	3384      	adds	r3, #132	; 0x84
 8003afc:	4619      	mov	r1, r3
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	01db      	lsls	r3, r3, #7
 8003b0e:	4413      	add	r3, r2
 8003b10:	3384      	adds	r3, #132	; 0x84
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	6812      	ldr	r2, [r2, #0]
 8003b18:	4611      	mov	r1, r2
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	01d2      	lsls	r2, r2, #7
 8003b1e:	440a      	add	r2, r1
 8003b20:	3284      	adds	r2, #132	; 0x84
 8003b22:	f023 0307 	bic.w	r3, r3, #7
 8003b26:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	01db      	lsls	r3, r3, #7
 8003b32:	4413      	add	r3, r2
 8003b34:	3384      	adds	r3, #132	; 0x84
 8003b36:	461a      	mov	r2, r3
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003b44:	021b      	lsls	r3, r3, #8
 8003b46:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003b4e:	041b      	lsls	r3, r3, #16
 8003b50:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	061b      	lsls	r3, r3, #24
 8003b58:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	01db      	lsls	r3, r3, #7
 8003b64:	4413      	add	r3, r2
 8003b66:	3384      	adds	r3, #132	; 0x84
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	01db      	lsls	r3, r3, #7
 8003b74:	4413      	add	r3, r2
 8003b76:	3384      	adds	r3, #132	; 0x84
 8003b78:	461a      	mov	r2, r3
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b84:	461a      	mov	r2, r3
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4619      	mov	r1, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	01db      	lsls	r3, r3, #7
 8003b98:	440b      	add	r3, r1
 8003b9a:	3384      	adds	r3, #132	; 0x84
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	01db      	lsls	r3, r3, #7
 8003bae:	4413      	add	r3, r2
 8003bb0:	3384      	adds	r3, #132	; 0x84
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	6812      	ldr	r2, [r2, #0]
 8003bb8:	4611      	mov	r1, r2
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	01d2      	lsls	r2, r2, #7
 8003bbe:	440a      	add	r2, r1
 8003bc0:	3284      	adds	r2, #132	; 0x84
 8003bc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003bc6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	461a      	mov	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	01db      	lsls	r3, r3, #7
 8003bd2:	4413      	add	r3, r2
 8003bd4:	3384      	adds	r3, #132	; 0x84
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	01db      	lsls	r3, r3, #7
 8003be8:	4413      	add	r3, r2
 8003bea:	3384      	adds	r3, #132	; 0x84
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	6812      	ldr	r2, [r2, #0]
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	01d2      	lsls	r2, r2, #7
 8003bf8:	440a      	add	r2, r1
 8003bfa:	3284      	adds	r2, #132	; 0x84
 8003bfc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003c00:	f023 0307 	bic.w	r3, r3, #7
 8003c04:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	69da      	ldr	r2, [r3, #28]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	68f9      	ldr	r1, [r7, #12]
 8003c10:	6809      	ldr	r1, [r1, #0]
 8003c12:	4608      	mov	r0, r1
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	01c9      	lsls	r1, r1, #7
 8003c18:	4401      	add	r1, r0
 8003c1a:	3184      	adds	r1, #132	; 0x84
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	461a      	mov	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	01db      	lsls	r3, r3, #7
 8003c2a:	4413      	add	r3, r2
 8003c2c:	3384      	adds	r3, #132	; 0x84
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	461a      	mov	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	01db      	lsls	r3, r3, #7
 8003c3a:	4413      	add	r3, r2
 8003c3c:	3384      	adds	r3, #132	; 0x84
 8003c3e:	461a      	mov	r2, r3
 8003c40:	2300      	movs	r3, #0
 8003c42:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	01db      	lsls	r3, r3, #7
 8003c4e:	4413      	add	r3, r2
 8003c50:	3384      	adds	r3, #132	; 0x84
 8003c52:	461a      	mov	r2, r3
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d102      	bne.n	8003c68 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003c62:	2304      	movs	r3, #4
 8003c64:	61fb      	str	r3, [r7, #28]
 8003c66:	e01b      	b.n	8003ca0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d102      	bne.n	8003c76 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003c70:	2303      	movs	r3, #3
 8003c72:	61fb      	str	r3, [r7, #28]
 8003c74:	e014      	b.n	8003ca0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d00b      	beq.n	8003c96 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d007      	beq.n	8003c96 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003c8a:	2b03      	cmp	r3, #3
 8003c8c:	d003      	beq.n	8003c96 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003c92:	2b07      	cmp	r3, #7
 8003c94:	d102      	bne.n	8003c9c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003c96:	2302      	movs	r3, #2
 8003c98:	61fb      	str	r3, [r7, #28]
 8003c9a:	e001      	b.n	8003ca0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	01db      	lsls	r3, r3, #7
 8003caa:	4413      	add	r3, r2
 8003cac:	3384      	adds	r3, #132	; 0x84
 8003cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	6812      	ldr	r2, [r2, #0]
 8003cb4:	4611      	mov	r1, r2
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	01d2      	lsls	r2, r2, #7
 8003cba:	440a      	add	r2, r1
 8003cbc:	3284      	adds	r2, #132	; 0x84
 8003cbe:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003cc2:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc8:	69fa      	ldr	r2, [r7, #28]
 8003cca:	fb02 f303 	mul.w	r3, r2, r3
 8003cce:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	6859      	ldr	r1, [r3, #4]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	1acb      	subs	r3, r1, r3
 8003cda:	69f9      	ldr	r1, [r7, #28]
 8003cdc:	fb01 f303 	mul.w	r3, r1, r3
 8003ce0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003ce2:	68f9      	ldr	r1, [r7, #12]
 8003ce4:	6809      	ldr	r1, [r1, #0]
 8003ce6:	4608      	mov	r0, r1
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	01c9      	lsls	r1, r1, #7
 8003cec:	4401      	add	r1, r0
 8003cee:	3184      	adds	r1, #132	; 0x84
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	01db      	lsls	r3, r3, #7
 8003cfe:	4413      	add	r3, r2
 8003d00:	3384      	adds	r3, #132	; 0x84
 8003d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	6812      	ldr	r2, [r2, #0]
 8003d08:	4611      	mov	r1, r2
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	01d2      	lsls	r2, r2, #7
 8003d0e:	440a      	add	r2, r1
 8003d10:	3284      	adds	r2, #132	; 0x84
 8003d12:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003d16:	f023 0307 	bic.w	r3, r3, #7
 8003d1a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	461a      	mov	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	01db      	lsls	r3, r3, #7
 8003d26:	4413      	add	r3, r2
 8003d28:	3384      	adds	r3, #132	; 0x84
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	01db      	lsls	r3, r3, #7
 8003d3c:	4413      	add	r3, r2
 8003d3e:	3384      	adds	r3, #132	; 0x84
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	6812      	ldr	r2, [r2, #0]
 8003d46:	4611      	mov	r1, r2
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	01d2      	lsls	r2, r2, #7
 8003d4c:	440a      	add	r2, r1
 8003d4e:	3284      	adds	r2, #132	; 0x84
 8003d50:	f043 0301 	orr.w	r3, r3, #1
 8003d54:	6013      	str	r3, [r2, #0]
}
 8003d56:	bf00      	nop
 8003d58:	3724      	adds	r7, #36	; 0x24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
	...

08003d64 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af02      	add	r7, sp, #8
 8003d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003d70:	f7fe fa60 	bl	8002234 <HAL_GetTick>
 8003d74:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d102      	bne.n	8003d82 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	73fb      	strb	r3, [r7, #15]
 8003d80:	e092      	b.n	8003ea8 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f040 808b 	bne.w	8003ea8 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7fd ff30 	bl	8001bf8 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003d98:	f241 3188 	movw	r1, #5000	; 0x1388
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f88b 	bl	8003eb8 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	4b42      	ldr	r3, [pc, #264]	; (8003eb4 <HAL_OSPI_Init+0x150>)
 8003daa:	4013      	ands	r3, r2
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	68d1      	ldr	r1, [r2, #12]
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6912      	ldr	r2, [r2, #16]
 8003db4:	3a01      	subs	r2, #1
 8003db6:	0412      	lsls	r2, r2, #16
 8003db8:	4311      	orrs	r1, r2
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6952      	ldr	r2, [r2, #20]
 8003dbe:	3a01      	subs	r2, #1
 8003dc0:	0212      	lsls	r2, r2, #8
 8003dc2:	4311      	orrs	r1, r2
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003dc8:	4311      	orrs	r1, r2
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	69d2      	ldr	r2, [r2, #28]
 8003dce:	4311      	orrs	r1, r2
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6812      	ldr	r2, [r2, #0]
 8003dd4:	430b      	orrs	r3, r1
 8003dd6:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	0412      	lsls	r2, r2, #16
 8003de2:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	021a      	lsls	r2, r3, #8
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	2200      	movs	r2, #0
 8003e08:	2120      	movs	r1, #32
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 fb98 	bl	8004540 <OSPI_WaitFlagStateUntilTimeout>
 8003e10:	4603      	mov	r3, r0
 8003e12:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d146      	bne.n	8003ea8 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	1e5a      	subs	r2, r3, #1
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003e50:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0201 	orr.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d107      	bne.n	8003e90 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689a      	ldr	r2, [r3, #8]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0202 	orr.w	r2, r2, #2
 8003e8e:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e98:	d103      	bne.n	8003ea2 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	645a      	str	r2, [r3, #68]	; 0x44
 8003ea0:	e002      	b.n	8003ea8 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	f8e0f8f4 	.word	0xf8e0f8f4

08003eb8 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
	...

08003ed8 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b092      	sub	sp, #72	; 0x48
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a08      	ldr	r2, [pc, #32]	; (8003f18 <HAL_OSPIM_Config+0x40>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d105      	bne.n	8003f06 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8003efe:	2301      	movs	r3, #1
 8003f00:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003f04:	e004      	b.n	8003f10 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8003f06:	2301      	movs	r3, #1
 8003f08:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003f10:	2300      	movs	r3, #0
 8003f12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003f16:	e01f      	b.n	8003f58 <HAL_OSPIM_Config+0x80>
 8003f18:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8003f1c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f20:	3301      	adds	r3, #1
 8003f22:	b2d8      	uxtb	r0, r3
 8003f24:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003f28:	f107 0114 	add.w	r1, r7, #20
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	4619      	mov	r1, r3
 8003f38:	f000 fb3a 	bl	80045b0 <OSPIM_GetConfig>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d005      	beq.n	8003f4e <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2208      	movs	r2, #8
 8003f4c:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003f4e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f52:	3301      	adds	r3, #1
 8003f54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003f58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d9dd      	bls.n	8003f1c <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8003f60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f040 82de 	bne.w	8004526 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003f6a:	4bc6      	ldr	r3, [pc, #792]	; (8004284 <HAL_OSPIM_Config+0x3ac>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00b      	beq.n	8003f8e <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003f76:	4bc3      	ldr	r3, [pc, #780]	; (8004284 <HAL_OSPIM_Config+0x3ac>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4ac2      	ldr	r2, [pc, #776]	; (8004284 <HAL_OSPIM_Config+0x3ac>)
 8003f7c:	f023 0301 	bic.w	r3, r3, #1
 8003f80:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8003f82:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003f86:	f043 0301 	orr.w	r3, r3, #1
 8003f8a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8003f8e:	4bbe      	ldr	r3, [pc, #760]	; (8004288 <HAL_OSPIM_Config+0x3b0>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00b      	beq.n	8003fb2 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003f9a:	4bbb      	ldr	r3, [pc, #748]	; (8004288 <HAL_OSPIM_Config+0x3b0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4aba      	ldr	r2, [pc, #744]	; (8004288 <HAL_OSPIM_Config+0x3b0>)
 8003fa0:	f023 0301 	bic.w	r3, r3, #1
 8003fa4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8003fa6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003faa:	f043 0302 	orr.w	r3, r3, #2
 8003fae:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8003fb2:	49b6      	ldr	r1, [pc, #728]	; (800428c <HAL_OSPIM_Config+0x3b4>)
 8003fb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	3348      	adds	r3, #72	; 0x48
 8003fc0:	443b      	add	r3, r7
 8003fc2:	3b2c      	subs	r3, #44	; 0x2c
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	440b      	add	r3, r1
 8003fcc:	6859      	ldr	r1, [r3, #4]
 8003fce:	48af      	ldr	r0, [pc, #700]	; (800428c <HAL_OSPIM_Config+0x3b4>)
 8003fd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4413      	add	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	3348      	adds	r3, #72	; 0x48
 8003fdc:	443b      	add	r3, r7
 8003fde:	3b2c      	subs	r3, #44	; 0x2c
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4403      	add	r3, r0
 8003fec:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8003fee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	3348      	adds	r3, #72	; 0x48
 8003ffa:	443b      	add	r3, r7
 8003ffc:	3b34      	subs	r3, #52	; 0x34
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 80a1 	beq.w	8004148 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004006:	49a1      	ldr	r1, [pc, #644]	; (800428c <HAL_OSPIM_Config+0x3b4>)
 8004008:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800400a:	4613      	mov	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	3348      	adds	r3, #72	; 0x48
 8004014:	443b      	add	r3, r7
 8004016:	3b34      	subs	r3, #52	; 0x34
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3b01      	subs	r3, #1
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	440b      	add	r3, r1
 8004020:	6859      	ldr	r1, [r3, #4]
 8004022:	489a      	ldr	r0, [pc, #616]	; (800428c <HAL_OSPIM_Config+0x3b4>)
 8004024:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004026:	4613      	mov	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	3348      	adds	r3, #72	; 0x48
 8004030:	443b      	add	r3, r7
 8004032:	3b34      	subs	r3, #52	; 0x34
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	3b01      	subs	r3, #1
 8004038:	f021 0201 	bic.w	r2, r1, #1
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4403      	add	r3, r0
 8004040:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8004042:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004044:	4613      	mov	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	3348      	adds	r3, #72	; 0x48
 800404e:	443b      	add	r3, r7
 8004050:	3b30      	subs	r3, #48	; 0x30
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d01d      	beq.n	8004094 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004058:	498c      	ldr	r1, [pc, #560]	; (800428c <HAL_OSPIM_Config+0x3b4>)
 800405a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800405c:	4613      	mov	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	3348      	adds	r3, #72	; 0x48
 8004066:	443b      	add	r3, r7
 8004068:	3b30      	subs	r3, #48	; 0x30
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3b01      	subs	r3, #1
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	440b      	add	r3, r1
 8004072:	6859      	ldr	r1, [r3, #4]
 8004074:	4885      	ldr	r0, [pc, #532]	; (800428c <HAL_OSPIM_Config+0x3b4>)
 8004076:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004078:	4613      	mov	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	3348      	adds	r3, #72	; 0x48
 8004082:	443b      	add	r3, r7
 8004084:	3b30      	subs	r3, #48	; 0x30
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	3b01      	subs	r3, #1
 800408a:	f021 0210 	bic.w	r2, r1, #16
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4403      	add	r3, r0
 8004092:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004094:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004096:	4613      	mov	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4413      	add	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	3348      	adds	r3, #72	; 0x48
 80040a0:	443b      	add	r3, r7
 80040a2:	3b28      	subs	r3, #40	; 0x28
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d021      	beq.n	80040ee <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80040aa:	4978      	ldr	r1, [pc, #480]	; (800428c <HAL_OSPIM_Config+0x3b4>)
 80040ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040ae:	4613      	mov	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	3348      	adds	r3, #72	; 0x48
 80040b8:	443b      	add	r3, r7
 80040ba:	3b28      	subs	r3, #40	; 0x28
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	3b01      	subs	r3, #1
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	440b      	add	r3, r1
 80040c8:	6859      	ldr	r1, [r3, #4]
 80040ca:	4870      	ldr	r0, [pc, #448]	; (800428c <HAL_OSPIM_Config+0x3b4>)
 80040cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040ce:	4613      	mov	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	3348      	adds	r3, #72	; 0x48
 80040d8:	443b      	add	r3, r7
 80040da:	3b28      	subs	r3, #40	; 0x28
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3b01      	subs	r3, #1
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4403      	add	r3, r0
 80040ec:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80040ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040f0:	4613      	mov	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	3348      	adds	r3, #72	; 0x48
 80040fa:	443b      	add	r3, r7
 80040fc:	3b24      	subs	r3, #36	; 0x24
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d021      	beq.n	8004148 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8004104:	4961      	ldr	r1, [pc, #388]	; (800428c <HAL_OSPIM_Config+0x3b4>)
 8004106:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004108:	4613      	mov	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	3348      	adds	r3, #72	; 0x48
 8004112:	443b      	add	r3, r7
 8004114:	3b24      	subs	r3, #36	; 0x24
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	3b01      	subs	r3, #1
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	440b      	add	r3, r1
 8004122:	6859      	ldr	r1, [r3, #4]
 8004124:	4859      	ldr	r0, [pc, #356]	; (800428c <HAL_OSPIM_Config+0x3b4>)
 8004126:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004128:	4613      	mov	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	3348      	adds	r3, #72	; 0x48
 8004132:	443b      	add	r3, r7
 8004134:	3b24      	subs	r3, #36	; 0x24
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	3b01      	subs	r3, #1
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4403      	add	r3, r0
 8004146:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	6819      	ldr	r1, [r3, #0]
 800414c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004150:	4613      	mov	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	3348      	adds	r3, #72	; 0x48
 800415a:	443b      	add	r3, r7
 800415c:	3b34      	subs	r3, #52	; 0x34
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4299      	cmp	r1, r3
 8004162:	d038      	beq.n	80041d6 <HAL_OSPIM_Config+0x2fe>
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	6859      	ldr	r1, [r3, #4]
 8004168:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800416c:	4613      	mov	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	3348      	adds	r3, #72	; 0x48
 8004176:	443b      	add	r3, r7
 8004178:	3b30      	subs	r3, #48	; 0x30
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4299      	cmp	r1, r3
 800417e:	d02a      	beq.n	80041d6 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	6899      	ldr	r1, [r3, #8]
 8004184:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004188:	4613      	mov	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	3348      	adds	r3, #72	; 0x48
 8004192:	443b      	add	r3, r7
 8004194:	3b2c      	subs	r3, #44	; 0x2c
 8004196:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004198:	4299      	cmp	r1, r3
 800419a:	d01c      	beq.n	80041d6 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	68d9      	ldr	r1, [r3, #12]
 80041a0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80041a4:	4613      	mov	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4413      	add	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	3348      	adds	r3, #72	; 0x48
 80041ae:	443b      	add	r3, r7
 80041b0:	3b28      	subs	r3, #40	; 0x28
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4299      	cmp	r1, r3
 80041b6:	d00e      	beq.n	80041d6 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	6919      	ldr	r1, [r3, #16]
 80041bc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80041c0:	4613      	mov	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	3348      	adds	r3, #72	; 0x48
 80041ca:	443b      	add	r3, r7
 80041cc:	3b24      	subs	r3, #36	; 0x24
 80041ce:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80041d0:	4299      	cmp	r1, r3
 80041d2:	f040 80d3 	bne.w	800437c <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80041d6:	492d      	ldr	r1, [pc, #180]	; (800428c <HAL_OSPIM_Config+0x3b4>)
 80041d8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80041dc:	4613      	mov	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	3348      	adds	r3, #72	; 0x48
 80041e6:	443b      	add	r3, r7
 80041e8:	3b34      	subs	r3, #52	; 0x34
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3b01      	subs	r3, #1
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	6859      	ldr	r1, [r3, #4]
 80041f4:	4825      	ldr	r0, [pc, #148]	; (800428c <HAL_OSPIM_Config+0x3b4>)
 80041f6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80041fa:	4613      	mov	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4413      	add	r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	3348      	adds	r3, #72	; 0x48
 8004204:	443b      	add	r3, r7
 8004206:	3b34      	subs	r3, #52	; 0x34
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	3b01      	subs	r3, #1
 800420c:	f021 0201 	bic.w	r2, r1, #1
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4403      	add	r3, r0
 8004214:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004216:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800421a:	4613      	mov	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	3348      	adds	r3, #72	; 0x48
 8004224:	443b      	add	r3, r7
 8004226:	3b30      	subs	r3, #48	; 0x30
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d01f      	beq.n	800426e <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800422e:	4917      	ldr	r1, [pc, #92]	; (800428c <HAL_OSPIM_Config+0x3b4>)
 8004230:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004234:	4613      	mov	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	3348      	adds	r3, #72	; 0x48
 800423e:	443b      	add	r3, r7
 8004240:	3b30      	subs	r3, #48	; 0x30
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3b01      	subs	r3, #1
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	440b      	add	r3, r1
 800424a:	6859      	ldr	r1, [r3, #4]
 800424c:	480f      	ldr	r0, [pc, #60]	; (800428c <HAL_OSPIM_Config+0x3b4>)
 800424e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004252:	4613      	mov	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	3348      	adds	r3, #72	; 0x48
 800425c:	443b      	add	r3, r7
 800425e:	3b30      	subs	r3, #48	; 0x30
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	3b01      	subs	r3, #1
 8004264:	f021 0210 	bic.w	r2, r1, #16
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4403      	add	r3, r0
 800426c:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800426e:	4907      	ldr	r1, [pc, #28]	; (800428c <HAL_OSPIM_Config+0x3b4>)
 8004270:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004274:	4613      	mov	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	3348      	adds	r3, #72	; 0x48
 800427e:	443b      	add	r3, r7
 8004280:	3b2c      	subs	r3, #44	; 0x2c
 8004282:	e005      	b.n	8004290 <HAL_OSPIM_Config+0x3b8>
 8004284:	a0001000 	.word	0xa0001000
 8004288:	a0001400 	.word	0xa0001400
 800428c:	50061c00 	.word	0x50061c00
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	3b01      	subs	r3, #1
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	440b      	add	r3, r1
 8004298:	6859      	ldr	r1, [r3, #4]
 800429a:	48a6      	ldr	r0, [pc, #664]	; (8004534 <HAL_OSPIM_Config+0x65c>)
 800429c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80042a0:	4613      	mov	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	3348      	adds	r3, #72	; 0x48
 80042aa:	443b      	add	r3, r7
 80042ac:	3b2c      	subs	r3, #44	; 0x2c
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3b01      	subs	r3, #1
 80042b2:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4403      	add	r3, r0
 80042ba:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80042bc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80042c0:	4613      	mov	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	3348      	adds	r3, #72	; 0x48
 80042ca:	443b      	add	r3, r7
 80042cc:	3b28      	subs	r3, #40	; 0x28
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d023      	beq.n	800431c <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80042d4:	4997      	ldr	r1, [pc, #604]	; (8004534 <HAL_OSPIM_Config+0x65c>)
 80042d6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80042da:	4613      	mov	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4413      	add	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	3348      	adds	r3, #72	; 0x48
 80042e4:	443b      	add	r3, r7
 80042e6:	3b28      	subs	r3, #40	; 0x28
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	3b01      	subs	r3, #1
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	440b      	add	r3, r1
 80042f4:	6859      	ldr	r1, [r3, #4]
 80042f6:	488f      	ldr	r0, [pc, #572]	; (8004534 <HAL_OSPIM_Config+0x65c>)
 80042f8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80042fc:	4613      	mov	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	3348      	adds	r3, #72	; 0x48
 8004306:	443b      	add	r3, r7
 8004308:	3b28      	subs	r3, #40	; 0x28
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	3b01      	subs	r3, #1
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4403      	add	r3, r0
 800431a:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800431c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004320:	4613      	mov	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	3348      	adds	r3, #72	; 0x48
 800432a:	443b      	add	r3, r7
 800432c:	3b24      	subs	r3, #36	; 0x24
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d023      	beq.n	800437c <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004334:	497f      	ldr	r1, [pc, #508]	; (8004534 <HAL_OSPIM_Config+0x65c>)
 8004336:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800433a:	4613      	mov	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	3348      	adds	r3, #72	; 0x48
 8004344:	443b      	add	r3, r7
 8004346:	3b24      	subs	r3, #36	; 0x24
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	3b01      	subs	r3, #1
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	440b      	add	r3, r1
 8004354:	6859      	ldr	r1, [r3, #4]
 8004356:	4877      	ldr	r0, [pc, #476]	; (8004534 <HAL_OSPIM_Config+0x65c>)
 8004358:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800435c:	4613      	mov	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4413      	add	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	3348      	adds	r3, #72	; 0x48
 8004366:	443b      	add	r3, r7
 8004368:	3b24      	subs	r3, #36	; 0x24
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3b01      	subs	r3, #1
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4403      	add	r3, r0
 800437a:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800437c:	4a6d      	ldr	r2, [pc, #436]	; (8004534 <HAL_OSPIM_Config+0x65c>)
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	3b01      	subs	r3, #1
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4413      	add	r3, r2
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800438e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004390:	025b      	lsls	r3, r3, #9
 8004392:	431a      	orrs	r2, r3
 8004394:	4967      	ldr	r1, [pc, #412]	; (8004534 <HAL_OSPIM_Config+0x65c>)
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	3b01      	subs	r3, #1
 800439c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	440b      	add	r3, r1
 80043a4:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80043a6:	4a63      	ldr	r2, [pc, #396]	; (8004534 <HAL_OSPIM_Config+0x65c>)
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3b01      	subs	r3, #1
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f023 0203 	bic.w	r2, r3, #3
 80043b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	431a      	orrs	r2, r3
 80043be:	495d      	ldr	r1, [pc, #372]	; (8004534 <HAL_OSPIM_Config+0x65c>)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3b01      	subs	r3, #1
 80043c6:	f042 0201 	orr.w	r2, r2, #1
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	440b      	add	r3, r1
 80043ce:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d014      	beq.n	8004402 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80043d8:	4a56      	ldr	r2, [pc, #344]	; (8004534 <HAL_OSPIM_Config+0x65c>)
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	3b01      	subs	r3, #1
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043ec:	015b      	lsls	r3, r3, #5
 80043ee:	431a      	orrs	r2, r3
 80043f0:	4950      	ldr	r1, [pc, #320]	; (8004534 <HAL_OSPIM_Config+0x65c>)
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	f042 0210 	orr.w	r2, r2, #16
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d019      	beq.n	8004442 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800440e:	4a49      	ldr	r2, [pc, #292]	; (8004534 <HAL_OSPIM_Config+0x65c>)
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	3b01      	subs	r3, #1
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004426:	049b      	lsls	r3, r3, #18
 8004428:	431a      	orrs	r2, r3
 800442a:	4942      	ldr	r1, [pc, #264]	; (8004534 <HAL_OSPIM_Config+0x65c>)
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	3b01      	subs	r3, #1
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	440b      	add	r3, r1
 800443e:	605a      	str	r2, [r3, #4]
 8004440:	e01c      	b.n	800447c <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d018      	beq.n	800447c <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800444a:	4a3a      	ldr	r2, [pc, #232]	; (8004534 <HAL_OSPIM_Config+0x65c>)
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	3b01      	subs	r3, #1
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004462:	069b      	lsls	r3, r3, #26
 8004464:	431a      	orrs	r2, r3
 8004466:	4933      	ldr	r1, [pc, #204]	; (8004534 <HAL_OSPIM_Config+0x65c>)
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	3b01      	subs	r3, #1
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	440b      	add	r3, r1
 800447a:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d019      	beq.n	80044bc <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004488:	4a2a      	ldr	r2, [pc, #168]	; (8004534 <HAL_OSPIM_Config+0x65c>)
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	3b01      	subs	r3, #1
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800449e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044a0:	049b      	lsls	r3, r3, #18
 80044a2:	431a      	orrs	r2, r3
 80044a4:	4923      	ldr	r1, [pc, #140]	; (8004534 <HAL_OSPIM_Config+0x65c>)
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	440b      	add	r3, r1
 80044b8:	605a      	str	r2, [r3, #4]
 80044ba:	e01c      	b.n	80044f6 <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d018      	beq.n	80044f6 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80044c4:	4a1b      	ldr	r2, [pc, #108]	; (8004534 <HAL_OSPIM_Config+0x65c>)
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	3b01      	subs	r3, #1
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4413      	add	r3, r2
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80044da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044dc:	069b      	lsls	r3, r3, #26
 80044de:	431a      	orrs	r2, r3
 80044e0:	4914      	ldr	r1, [pc, #80]	; (8004534 <HAL_OSPIM_Config+0x65c>)
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	440b      	add	r3, r1
 80044f4:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80044f6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d005      	beq.n	800450e <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004502:	4b0d      	ldr	r3, [pc, #52]	; (8004538 <HAL_OSPIM_Config+0x660>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a0c      	ldr	r2, [pc, #48]	; (8004538 <HAL_OSPIM_Config+0x660>)
 8004508:	f043 0301 	orr.w	r3, r3, #1
 800450c:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800450e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d005      	beq.n	8004526 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800451a:	4b08      	ldr	r3, [pc, #32]	; (800453c <HAL_OSPIM_Config+0x664>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a07      	ldr	r2, [pc, #28]	; (800453c <HAL_OSPIM_Config+0x664>)
 8004520:	f043 0301 	orr.w	r3, r3, #1
 8004524:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8004526:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800452a:	4618      	mov	r0, r3
 800452c:	3748      	adds	r7, #72	; 0x48
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	50061c00 	.word	0x50061c00
 8004538:	a0001000 	.word	0xa0001000
 800453c:	a0001400 	.word	0xa0001400

08004540 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	603b      	str	r3, [r7, #0]
 800454c:	4613      	mov	r3, r2
 800454e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004550:	e01a      	b.n	8004588 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004558:	d016      	beq.n	8004588 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800455a:	f7fd fe6b 	bl	8002234 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	429a      	cmp	r2, r3
 8004568:	d302      	bcc.n	8004570 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10b      	bne.n	8004588 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004576:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800457c:	f043 0201 	orr.w	r2, r3, #1
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e00e      	b.n	80045a6 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6a1a      	ldr	r2, [r3, #32]
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	4013      	ands	r3, r2
 8004592:	2b00      	cmp	r3, #0
 8004594:	bf14      	ite	ne
 8004596:	2301      	movne	r3, #1
 8004598:	2300      	moveq	r3, #0
 800459a:	b2db      	uxtb	r3, r3
 800459c:	461a      	mov	r2, r3
 800459e:	79fb      	ldrb	r3, [r7, #7]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d1d6      	bne.n	8004552 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
	...

080045b0 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b087      	sub	sp, #28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	6039      	str	r1, [r7, #0]
 80045ba:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80045bc:	2300      	movs	r3, #0
 80045be:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80045c4:	79fb      	ldrb	r3, [r7, #7]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d005      	beq.n	80045d6 <OSPIM_GetConfig+0x26>
 80045ca:	79fb      	ldrb	r3, [r7, #7]
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d802      	bhi.n	80045d6 <OSPIM_GetConfig+0x26>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d102      	bne.n	80045dc <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	75fb      	strb	r3, [r7, #23]
 80045da:	e08e      	b.n	80046fa <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	2200      	movs	r2, #0
 80045e0:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2200      	movs	r2, #0
 80045e6:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	2200      	movs	r2, #0
 80045ec:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2200      	movs	r2, #0
 80045f2:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	2200      	movs	r2, #0
 80045f8:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80045fa:	79fb      	ldrb	r3, [r7, #7]
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d101      	bne.n	8004604 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8004600:	4b41      	ldr	r3, [pc, #260]	; (8004708 <OSPIM_GetConfig+0x158>)
 8004602:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004604:	2300      	movs	r3, #0
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	e074      	b.n	80046f4 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 800460a:	4a40      	ldr	r2, [pc, #256]	; (800470c <OSPIM_GetConfig+0x15c>)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00a      	beq.n	8004636 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	4053      	eors	r3, r2
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d103      	bne.n	8004636 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	1c5a      	adds	r2, r3, #1
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	f003 0310 	and.w	r3, r3, #16
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00a      	beq.n	8004656 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	4053      	eors	r3, r2
 8004646:	f003 0320 	and.w	r3, r3, #32
 800464a:	2b00      	cmp	r3, #0
 800464c:	d103      	bne.n	8004656 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	4053      	eors	r3, r2
 8004666:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800466a:	2b00      	cmp	r3, #0
 800466c:	d103      	bne.n	8004676 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d018      	beq.n	80046b2 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	4053      	eors	r3, r2
 8004686:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d111      	bne.n	80046b2 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d106      	bne.n	80046a6 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	3301      	adds	r3, #1
 800469c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	60da      	str	r2, [r3, #12]
 80046a4:	e005      	b.n	80046b2 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	3301      	adds	r3, #1
 80046aa:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d018      	beq.n	80046ee <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	4053      	eors	r3, r2
 80046c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d111      	bne.n	80046ee <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d106      	bne.n	80046e2 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	3301      	adds	r3, #1
 80046d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	611a      	str	r2, [r3, #16]
 80046e0:	e005      	b.n	80046ee <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	3301      	adds	r3, #1
 80046e6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	3301      	adds	r3, #1
 80046f2:	60fb      	str	r3, [r7, #12]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d987      	bls.n	800460a <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 80046fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	371c      	adds	r7, #28
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	04040222 	.word	0x04040222
 800470c:	50061c00 	.word	0x50061c00

08004710 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004710:	b480      	push	{r7}
 8004712:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004714:	4b0d      	ldr	r3, [pc, #52]	; (800474c <HAL_PWREx_GetVoltageRange+0x3c>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800471c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004720:	d102      	bne.n	8004728 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004726:	e00b      	b.n	8004740 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004728:	4b08      	ldr	r3, [pc, #32]	; (800474c <HAL_PWREx_GetVoltageRange+0x3c>)
 800472a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800472e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004736:	d102      	bne.n	800473e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800473c:	e000      	b.n	8004740 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800473e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004740:	4618      	mov	r0, r3
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	40007000 	.word	0x40007000

08004750 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d141      	bne.n	80047e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800475e:	4b4b      	ldr	r3, [pc, #300]	; (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800476a:	d131      	bne.n	80047d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800476c:	4b47      	ldr	r3, [pc, #284]	; (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800476e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004772:	4a46      	ldr	r2, [pc, #280]	; (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004778:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800477c:	4b43      	ldr	r3, [pc, #268]	; (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004784:	4a41      	ldr	r2, [pc, #260]	; (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800478a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800478c:	4b40      	ldr	r3, [pc, #256]	; (8004890 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2232      	movs	r2, #50	; 0x32
 8004792:	fb02 f303 	mul.w	r3, r2, r3
 8004796:	4a3f      	ldr	r2, [pc, #252]	; (8004894 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004798:	fba2 2303 	umull	r2, r3, r2, r3
 800479c:	0c9b      	lsrs	r3, r3, #18
 800479e:	3301      	adds	r3, #1
 80047a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047a2:	e002      	b.n	80047aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047aa:	4b38      	ldr	r3, [pc, #224]	; (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b6:	d102      	bne.n	80047be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f2      	bne.n	80047a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047be:	4b33      	ldr	r3, [pc, #204]	; (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ca:	d158      	bne.n	800487e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e057      	b.n	8004880 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047d0:	4b2e      	ldr	r3, [pc, #184]	; (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047d6:	4a2d      	ldr	r2, [pc, #180]	; (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80047e0:	e04d      	b.n	800487e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047e8:	d141      	bne.n	800486e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047ea:	4b28      	ldr	r3, [pc, #160]	; (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f6:	d131      	bne.n	800485c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047f8:	4b24      	ldr	r3, [pc, #144]	; (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047fe:	4a23      	ldr	r2, [pc, #140]	; (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004804:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004808:	4b20      	ldr	r3, [pc, #128]	; (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004810:	4a1e      	ldr	r2, [pc, #120]	; (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004812:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004816:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004818:	4b1d      	ldr	r3, [pc, #116]	; (8004890 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2232      	movs	r2, #50	; 0x32
 800481e:	fb02 f303 	mul.w	r3, r2, r3
 8004822:	4a1c      	ldr	r2, [pc, #112]	; (8004894 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004824:	fba2 2303 	umull	r2, r3, r2, r3
 8004828:	0c9b      	lsrs	r3, r3, #18
 800482a:	3301      	adds	r3, #1
 800482c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800482e:	e002      	b.n	8004836 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	3b01      	subs	r3, #1
 8004834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004836:	4b15      	ldr	r3, [pc, #84]	; (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800483e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004842:	d102      	bne.n	800484a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1f2      	bne.n	8004830 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800484a:	4b10      	ldr	r3, [pc, #64]	; (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004856:	d112      	bne.n	800487e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e011      	b.n	8004880 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800485c:	4b0b      	ldr	r3, [pc, #44]	; (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800485e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004862:	4a0a      	ldr	r2, [pc, #40]	; (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004868:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800486c:	e007      	b.n	800487e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800486e:	4b07      	ldr	r3, [pc, #28]	; (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004876:	4a05      	ldr	r2, [pc, #20]	; (800488c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004878:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800487c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	40007000 	.word	0x40007000
 8004890:	20000000 	.word	0x20000000
 8004894:	431bde83 	.word	0x431bde83

08004898 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004898:	b480      	push	{r7}
 800489a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800489c:	4b05      	ldr	r3, [pc, #20]	; (80048b4 <HAL_PWREx_EnableVddIO2+0x1c>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	4a04      	ldr	r2, [pc, #16]	; (80048b4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80048a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048a6:	6053      	str	r3, [r2, #4]
}
 80048a8:	bf00      	nop
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	40007000 	.word	0x40007000

080048b8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b088      	sub	sp, #32
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d102      	bne.n	80048cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	f000 bc08 	b.w	80050dc <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048cc:	4b96      	ldr	r3, [pc, #600]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f003 030c 	and.w	r3, r3, #12
 80048d4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048d6:	4b94      	ldr	r3, [pc, #592]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f003 0303 	and.w	r3, r3, #3
 80048de:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0310 	and.w	r3, r3, #16
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 80e4 	beq.w	8004ab6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d007      	beq.n	8004904 <HAL_RCC_OscConfig+0x4c>
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	2b0c      	cmp	r3, #12
 80048f8:	f040 808b 	bne.w	8004a12 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	f040 8087 	bne.w	8004a12 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004904:	4b88      	ldr	r3, [pc, #544]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d005      	beq.n	800491c <HAL_RCC_OscConfig+0x64>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e3df      	b.n	80050dc <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a1a      	ldr	r2, [r3, #32]
 8004920:	4b81      	ldr	r3, [pc, #516]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0308 	and.w	r3, r3, #8
 8004928:	2b00      	cmp	r3, #0
 800492a:	d004      	beq.n	8004936 <HAL_RCC_OscConfig+0x7e>
 800492c:	4b7e      	ldr	r3, [pc, #504]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004934:	e005      	b.n	8004942 <HAL_RCC_OscConfig+0x8a>
 8004936:	4b7c      	ldr	r3, [pc, #496]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004938:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800493c:	091b      	lsrs	r3, r3, #4
 800493e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004942:	4293      	cmp	r3, r2
 8004944:	d223      	bcs.n	800498e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fdcc 	bl	80054e8 <RCC_SetFlashLatencyFromMSIRange>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e3c0      	b.n	80050dc <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800495a:	4b73      	ldr	r3, [pc, #460]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a72      	ldr	r2, [pc, #456]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004960:	f043 0308 	orr.w	r3, r3, #8
 8004964:	6013      	str	r3, [r2, #0]
 8004966:	4b70      	ldr	r3, [pc, #448]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	496d      	ldr	r1, [pc, #436]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004974:	4313      	orrs	r3, r2
 8004976:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004978:	4b6b      	ldr	r3, [pc, #428]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	021b      	lsls	r3, r3, #8
 8004986:	4968      	ldr	r1, [pc, #416]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004988:	4313      	orrs	r3, r2
 800498a:	604b      	str	r3, [r1, #4]
 800498c:	e025      	b.n	80049da <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800498e:	4b66      	ldr	r3, [pc, #408]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a65      	ldr	r2, [pc, #404]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004994:	f043 0308 	orr.w	r3, r3, #8
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	4b63      	ldr	r3, [pc, #396]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	4960      	ldr	r1, [pc, #384]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049ac:	4b5e      	ldr	r3, [pc, #376]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	69db      	ldr	r3, [r3, #28]
 80049b8:	021b      	lsls	r3, r3, #8
 80049ba:	495b      	ldr	r1, [pc, #364]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d109      	bne.n	80049da <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 fd8c 	bl	80054e8 <RCC_SetFlashLatencyFromMSIRange>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e380      	b.n	80050dc <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049da:	f000 fcc1 	bl	8005360 <HAL_RCC_GetSysClockFreq>
 80049de:	4602      	mov	r2, r0
 80049e0:	4b51      	ldr	r3, [pc, #324]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	091b      	lsrs	r3, r3, #4
 80049e6:	f003 030f 	and.w	r3, r3, #15
 80049ea:	4950      	ldr	r1, [pc, #320]	; (8004b2c <HAL_RCC_OscConfig+0x274>)
 80049ec:	5ccb      	ldrb	r3, [r1, r3]
 80049ee:	f003 031f 	and.w	r3, r3, #31
 80049f2:	fa22 f303 	lsr.w	r3, r2, r3
 80049f6:	4a4e      	ldr	r2, [pc, #312]	; (8004b30 <HAL_RCC_OscConfig+0x278>)
 80049f8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80049fa:	4b4e      	ldr	r3, [pc, #312]	; (8004b34 <HAL_RCC_OscConfig+0x27c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fd fbc8 	bl	8002194 <HAL_InitTick>
 8004a04:	4603      	mov	r3, r0
 8004a06:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d052      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	e364      	b.n	80050dc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d032      	beq.n	8004a80 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a1a:	4b43      	ldr	r3, [pc, #268]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a42      	ldr	r2, [pc, #264]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004a20:	f043 0301 	orr.w	r3, r3, #1
 8004a24:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a26:	f7fd fc05 	bl	8002234 <HAL_GetTick>
 8004a2a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a2c:	e008      	b.n	8004a40 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a2e:	f7fd fc01 	bl	8002234 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d901      	bls.n	8004a40 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e34d      	b.n	80050dc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a40:	4b39      	ldr	r3, [pc, #228]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0f0      	beq.n	8004a2e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a4c:	4b36      	ldr	r3, [pc, #216]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a35      	ldr	r2, [pc, #212]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004a52:	f043 0308 	orr.w	r3, r3, #8
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	4b33      	ldr	r3, [pc, #204]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	4930      	ldr	r1, [pc, #192]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a6a:	4b2f      	ldr	r3, [pc, #188]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	021b      	lsls	r3, r3, #8
 8004a78:	492b      	ldr	r1, [pc, #172]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	604b      	str	r3, [r1, #4]
 8004a7e:	e01a      	b.n	8004ab6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a80:	4b29      	ldr	r3, [pc, #164]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a28      	ldr	r2, [pc, #160]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004a86:	f023 0301 	bic.w	r3, r3, #1
 8004a8a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a8c:	f7fd fbd2 	bl	8002234 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a94:	f7fd fbce 	bl	8002234 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e31a      	b.n	80050dc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004aa6:	4b20      	ldr	r3, [pc, #128]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1f0      	bne.n	8004a94 <HAL_RCC_OscConfig+0x1dc>
 8004ab2:	e000      	b.n	8004ab6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ab4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d073      	beq.n	8004baa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d005      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x21c>
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	2b0c      	cmp	r3, #12
 8004acc:	d10e      	bne.n	8004aec <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	2b03      	cmp	r3, #3
 8004ad2:	d10b      	bne.n	8004aec <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ad4:	4b14      	ldr	r3, [pc, #80]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d063      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x2f0>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d15f      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e2f7      	b.n	80050dc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af4:	d106      	bne.n	8004b04 <HAL_RCC_OscConfig+0x24c>
 8004af6:	4b0c      	ldr	r3, [pc, #48]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a0b      	ldr	r2, [pc, #44]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b00:	6013      	str	r3, [r2, #0]
 8004b02:	e025      	b.n	8004b50 <HAL_RCC_OscConfig+0x298>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b0c:	d114      	bne.n	8004b38 <HAL_RCC_OscConfig+0x280>
 8004b0e:	4b06      	ldr	r3, [pc, #24]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a05      	ldr	r2, [pc, #20]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b18:	6013      	str	r3, [r2, #0]
 8004b1a:	4b03      	ldr	r3, [pc, #12]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a02      	ldr	r2, [pc, #8]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	e013      	b.n	8004b50 <HAL_RCC_OscConfig+0x298>
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	080084bc 	.word	0x080084bc
 8004b30:	20000000 	.word	0x20000000
 8004b34:	20000004 	.word	0x20000004
 8004b38:	4ba0      	ldr	r3, [pc, #640]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a9f      	ldr	r2, [pc, #636]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b42:	6013      	str	r3, [r2, #0]
 8004b44:	4b9d      	ldr	r3, [pc, #628]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a9c      	ldr	r2, [pc, #624]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d013      	beq.n	8004b80 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b58:	f7fd fb6c 	bl	8002234 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b60:	f7fd fb68 	bl	8002234 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b64      	cmp	r3, #100	; 0x64
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e2b4      	b.n	80050dc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b72:	4b92      	ldr	r3, [pc, #584]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d0f0      	beq.n	8004b60 <HAL_RCC_OscConfig+0x2a8>
 8004b7e:	e014      	b.n	8004baa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b80:	f7fd fb58 	bl	8002234 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b88:	f7fd fb54 	bl	8002234 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b64      	cmp	r3, #100	; 0x64
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e2a0      	b.n	80050dc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b9a:	4b88      	ldr	r3, [pc, #544]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1f0      	bne.n	8004b88 <HAL_RCC_OscConfig+0x2d0>
 8004ba6:	e000      	b.n	8004baa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d060      	beq.n	8004c78 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	2b04      	cmp	r3, #4
 8004bba:	d005      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x310>
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	2b0c      	cmp	r3, #12
 8004bc0:	d119      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d116      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bc8:	4b7c      	ldr	r3, [pc, #496]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d005      	beq.n	8004be0 <HAL_RCC_OscConfig+0x328>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e27d      	b.n	80050dc <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004be0:	4b76      	ldr	r3, [pc, #472]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	061b      	lsls	r3, r3, #24
 8004bee:	4973      	ldr	r1, [pc, #460]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bf4:	e040      	b.n	8004c78 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d023      	beq.n	8004c46 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bfe:	4b6f      	ldr	r3, [pc, #444]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a6e      	ldr	r2, [pc, #440]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0a:	f7fd fb13 	bl	8002234 <HAL_GetTick>
 8004c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c10:	e008      	b.n	8004c24 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c12:	f7fd fb0f 	bl	8002234 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d901      	bls.n	8004c24 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e25b      	b.n	80050dc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c24:	4b65      	ldr	r3, [pc, #404]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d0f0      	beq.n	8004c12 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c30:	4b62      	ldr	r3, [pc, #392]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	061b      	lsls	r3, r3, #24
 8004c3e:	495f      	ldr	r1, [pc, #380]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	604b      	str	r3, [r1, #4]
 8004c44:	e018      	b.n	8004c78 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c46:	4b5d      	ldr	r3, [pc, #372]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a5c      	ldr	r2, [pc, #368]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c52:	f7fd faef 	bl	8002234 <HAL_GetTick>
 8004c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c58:	e008      	b.n	8004c6c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c5a:	f7fd faeb 	bl	8002234 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d901      	bls.n	8004c6c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e237      	b.n	80050dc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c6c:	4b53      	ldr	r3, [pc, #332]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1f0      	bne.n	8004c5a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0308 	and.w	r3, r3, #8
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d03c      	beq.n	8004cfe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d01c      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c8c:	4b4b      	ldr	r3, [pc, #300]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c92:	4a4a      	ldr	r2, [pc, #296]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004c94:	f043 0301 	orr.w	r3, r3, #1
 8004c98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c9c:	f7fd faca 	bl	8002234 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ca4:	f7fd fac6 	bl	8002234 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e212      	b.n	80050dc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cb6:	4b41      	ldr	r3, [pc, #260]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0ef      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x3ec>
 8004cc4:	e01b      	b.n	8004cfe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cc6:	4b3d      	ldr	r3, [pc, #244]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004cc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ccc:	4a3b      	ldr	r2, [pc, #236]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004cce:	f023 0301 	bic.w	r3, r3, #1
 8004cd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd6:	f7fd faad 	bl	8002234 <HAL_GetTick>
 8004cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cde:	f7fd faa9 	bl	8002234 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e1f5      	b.n	80050dc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cf0:	4b32      	ldr	r3, [pc, #200]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1ef      	bne.n	8004cde <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0304 	and.w	r3, r3, #4
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 80a6 	beq.w	8004e58 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004d10:	4b2a      	ldr	r3, [pc, #168]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10d      	bne.n	8004d38 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d1c:	4b27      	ldr	r3, [pc, #156]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d20:	4a26      	ldr	r2, [pc, #152]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d26:	6593      	str	r3, [r2, #88]	; 0x58
 8004d28:	4b24      	ldr	r3, [pc, #144]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d30:	60bb      	str	r3, [r7, #8]
 8004d32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d34:	2301      	movs	r3, #1
 8004d36:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d38:	4b21      	ldr	r3, [pc, #132]	; (8004dc0 <HAL_RCC_OscConfig+0x508>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d118      	bne.n	8004d76 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d44:	4b1e      	ldr	r3, [pc, #120]	; (8004dc0 <HAL_RCC_OscConfig+0x508>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a1d      	ldr	r2, [pc, #116]	; (8004dc0 <HAL_RCC_OscConfig+0x508>)
 8004d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d50:	f7fd fa70 	bl	8002234 <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d58:	f7fd fa6c 	bl	8002234 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e1b8      	b.n	80050dc <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d6a:	4b15      	ldr	r3, [pc, #84]	; (8004dc0 <HAL_RCC_OscConfig+0x508>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d0f0      	beq.n	8004d58 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d108      	bne.n	8004d90 <HAL_RCC_OscConfig+0x4d8>
 8004d7e:	4b0f      	ldr	r3, [pc, #60]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d84:	4a0d      	ldr	r2, [pc, #52]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004d86:	f043 0301 	orr.w	r3, r3, #1
 8004d8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d8e:	e029      	b.n	8004de4 <HAL_RCC_OscConfig+0x52c>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	2b05      	cmp	r3, #5
 8004d96:	d115      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x50c>
 8004d98:	4b08      	ldr	r3, [pc, #32]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9e:	4a07      	ldr	r2, [pc, #28]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004da0:	f043 0304 	orr.w	r3, r3, #4
 8004da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004da8:	4b04      	ldr	r3, [pc, #16]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dae:	4a03      	ldr	r2, [pc, #12]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004db0:	f043 0301 	orr.w	r3, r3, #1
 8004db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004db8:	e014      	b.n	8004de4 <HAL_RCC_OscConfig+0x52c>
 8004dba:	bf00      	nop
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	40007000 	.word	0x40007000
 8004dc4:	4b9d      	ldr	r3, [pc, #628]	; (800503c <HAL_RCC_OscConfig+0x784>)
 8004dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dca:	4a9c      	ldr	r2, [pc, #624]	; (800503c <HAL_RCC_OscConfig+0x784>)
 8004dcc:	f023 0301 	bic.w	r3, r3, #1
 8004dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004dd4:	4b99      	ldr	r3, [pc, #612]	; (800503c <HAL_RCC_OscConfig+0x784>)
 8004dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dda:	4a98      	ldr	r2, [pc, #608]	; (800503c <HAL_RCC_OscConfig+0x784>)
 8004ddc:	f023 0304 	bic.w	r3, r3, #4
 8004de0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d016      	beq.n	8004e1a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dec:	f7fd fa22 	bl	8002234 <HAL_GetTick>
 8004df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004df2:	e00a      	b.n	8004e0a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004df4:	f7fd fa1e 	bl	8002234 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e168      	b.n	80050dc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e0a:	4b8c      	ldr	r3, [pc, #560]	; (800503c <HAL_RCC_OscConfig+0x784>)
 8004e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0ed      	beq.n	8004df4 <HAL_RCC_OscConfig+0x53c>
 8004e18:	e015      	b.n	8004e46 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e1a:	f7fd fa0b 	bl	8002234 <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e20:	e00a      	b.n	8004e38 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e22:	f7fd fa07 	bl	8002234 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e151      	b.n	80050dc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e38:	4b80      	ldr	r3, [pc, #512]	; (800503c <HAL_RCC_OscConfig+0x784>)
 8004e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1ed      	bne.n	8004e22 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e46:	7ffb      	ldrb	r3, [r7, #31]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d105      	bne.n	8004e58 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e4c:	4b7b      	ldr	r3, [pc, #492]	; (800503c <HAL_RCC_OscConfig+0x784>)
 8004e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e50:	4a7a      	ldr	r2, [pc, #488]	; (800503c <HAL_RCC_OscConfig+0x784>)
 8004e52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e56:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0320 	and.w	r3, r3, #32
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d03c      	beq.n	8004ede <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d01c      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e6c:	4b73      	ldr	r3, [pc, #460]	; (800503c <HAL_RCC_OscConfig+0x784>)
 8004e6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e72:	4a72      	ldr	r2, [pc, #456]	; (800503c <HAL_RCC_OscConfig+0x784>)
 8004e74:	f043 0301 	orr.w	r3, r3, #1
 8004e78:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e7c:	f7fd f9da 	bl	8002234 <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e84:	f7fd f9d6 	bl	8002234 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e122      	b.n	80050dc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e96:	4b69      	ldr	r3, [pc, #420]	; (800503c <HAL_RCC_OscConfig+0x784>)
 8004e98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d0ef      	beq.n	8004e84 <HAL_RCC_OscConfig+0x5cc>
 8004ea4:	e01b      	b.n	8004ede <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ea6:	4b65      	ldr	r3, [pc, #404]	; (800503c <HAL_RCC_OscConfig+0x784>)
 8004ea8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004eac:	4a63      	ldr	r2, [pc, #396]	; (800503c <HAL_RCC_OscConfig+0x784>)
 8004eae:	f023 0301 	bic.w	r3, r3, #1
 8004eb2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb6:	f7fd f9bd 	bl	8002234 <HAL_GetTick>
 8004eba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ebc:	e008      	b.n	8004ed0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ebe:	f7fd f9b9 	bl	8002234 <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e105      	b.n	80050dc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ed0:	4b5a      	ldr	r3, [pc, #360]	; (800503c <HAL_RCC_OscConfig+0x784>)
 8004ed2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1ef      	bne.n	8004ebe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f000 80f9 	beq.w	80050da <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	f040 80cf 	bne.w	8005090 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ef2:	4b52      	ldr	r3, [pc, #328]	; (800503c <HAL_RCC_OscConfig+0x784>)
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f003 0203 	and.w	r2, r3, #3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d12c      	bne.n	8004f60 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f10:	3b01      	subs	r3, #1
 8004f12:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d123      	bne.n	8004f60 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f22:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d11b      	bne.n	8004f60 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f32:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d113      	bne.n	8004f60 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f42:	085b      	lsrs	r3, r3, #1
 8004f44:	3b01      	subs	r3, #1
 8004f46:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d109      	bne.n	8004f60 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f56:	085b      	lsrs	r3, r3, #1
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d071      	beq.n	8005044 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	2b0c      	cmp	r3, #12
 8004f64:	d068      	beq.n	8005038 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004f66:	4b35      	ldr	r3, [pc, #212]	; (800503c <HAL_RCC_OscConfig+0x784>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d105      	bne.n	8004f7e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004f72:	4b32      	ldr	r3, [pc, #200]	; (800503c <HAL_RCC_OscConfig+0x784>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e0ac      	b.n	80050dc <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004f82:	4b2e      	ldr	r3, [pc, #184]	; (800503c <HAL_RCC_OscConfig+0x784>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a2d      	ldr	r2, [pc, #180]	; (800503c <HAL_RCC_OscConfig+0x784>)
 8004f88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f8c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f8e:	f7fd f951 	bl	8002234 <HAL_GetTick>
 8004f92:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f94:	e008      	b.n	8004fa8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f96:	f7fd f94d 	bl	8002234 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d901      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e099      	b.n	80050dc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fa8:	4b24      	ldr	r3, [pc, #144]	; (800503c <HAL_RCC_OscConfig+0x784>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1f0      	bne.n	8004f96 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fb4:	4b21      	ldr	r3, [pc, #132]	; (800503c <HAL_RCC_OscConfig+0x784>)
 8004fb6:	68da      	ldr	r2, [r3, #12]
 8004fb8:	4b21      	ldr	r3, [pc, #132]	; (8005040 <HAL_RCC_OscConfig+0x788>)
 8004fba:	4013      	ands	r3, r2
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004fc4:	3a01      	subs	r2, #1
 8004fc6:	0112      	lsls	r2, r2, #4
 8004fc8:	4311      	orrs	r1, r2
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004fce:	0212      	lsls	r2, r2, #8
 8004fd0:	4311      	orrs	r1, r2
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004fd6:	0852      	lsrs	r2, r2, #1
 8004fd8:	3a01      	subs	r2, #1
 8004fda:	0552      	lsls	r2, r2, #21
 8004fdc:	4311      	orrs	r1, r2
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004fe2:	0852      	lsrs	r2, r2, #1
 8004fe4:	3a01      	subs	r2, #1
 8004fe6:	0652      	lsls	r2, r2, #25
 8004fe8:	4311      	orrs	r1, r2
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004fee:	06d2      	lsls	r2, r2, #27
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	4912      	ldr	r1, [pc, #72]	; (800503c <HAL_RCC_OscConfig+0x784>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ff8:	4b10      	ldr	r3, [pc, #64]	; (800503c <HAL_RCC_OscConfig+0x784>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a0f      	ldr	r2, [pc, #60]	; (800503c <HAL_RCC_OscConfig+0x784>)
 8004ffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005002:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005004:	4b0d      	ldr	r3, [pc, #52]	; (800503c <HAL_RCC_OscConfig+0x784>)
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	4a0c      	ldr	r2, [pc, #48]	; (800503c <HAL_RCC_OscConfig+0x784>)
 800500a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800500e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005010:	f7fd f910 	bl	8002234 <HAL_GetTick>
 8005014:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005018:	f7fd f90c 	bl	8002234 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e058      	b.n	80050dc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800502a:	4b04      	ldr	r3, [pc, #16]	; (800503c <HAL_RCC_OscConfig+0x784>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0f0      	beq.n	8005018 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005036:	e050      	b.n	80050da <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e04f      	b.n	80050dc <HAL_RCC_OscConfig+0x824>
 800503c:	40021000 	.word	0x40021000
 8005040:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005044:	4b27      	ldr	r3, [pc, #156]	; (80050e4 <HAL_RCC_OscConfig+0x82c>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d144      	bne.n	80050da <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005050:	4b24      	ldr	r3, [pc, #144]	; (80050e4 <HAL_RCC_OscConfig+0x82c>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a23      	ldr	r2, [pc, #140]	; (80050e4 <HAL_RCC_OscConfig+0x82c>)
 8005056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800505a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800505c:	4b21      	ldr	r3, [pc, #132]	; (80050e4 <HAL_RCC_OscConfig+0x82c>)
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	4a20      	ldr	r2, [pc, #128]	; (80050e4 <HAL_RCC_OscConfig+0x82c>)
 8005062:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005066:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005068:	f7fd f8e4 	bl	8002234 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005070:	f7fd f8e0 	bl	8002234 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e02c      	b.n	80050dc <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005082:	4b18      	ldr	r3, [pc, #96]	; (80050e4 <HAL_RCC_OscConfig+0x82c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0f0      	beq.n	8005070 <HAL_RCC_OscConfig+0x7b8>
 800508e:	e024      	b.n	80050da <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	2b0c      	cmp	r3, #12
 8005094:	d01f      	beq.n	80050d6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005096:	4b13      	ldr	r3, [pc, #76]	; (80050e4 <HAL_RCC_OscConfig+0x82c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a12      	ldr	r2, [pc, #72]	; (80050e4 <HAL_RCC_OscConfig+0x82c>)
 800509c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a2:	f7fd f8c7 	bl	8002234 <HAL_GetTick>
 80050a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050a8:	e008      	b.n	80050bc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050aa:	f7fd f8c3 	bl	8002234 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e00f      	b.n	80050dc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050bc:	4b09      	ldr	r3, [pc, #36]	; (80050e4 <HAL_RCC_OscConfig+0x82c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1f0      	bne.n	80050aa <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80050c8:	4b06      	ldr	r3, [pc, #24]	; (80050e4 <HAL_RCC_OscConfig+0x82c>)
 80050ca:	68da      	ldr	r2, [r3, #12]
 80050cc:	4905      	ldr	r1, [pc, #20]	; (80050e4 <HAL_RCC_OscConfig+0x82c>)
 80050ce:	4b06      	ldr	r3, [pc, #24]	; (80050e8 <HAL_RCC_OscConfig+0x830>)
 80050d0:	4013      	ands	r3, r2
 80050d2:	60cb      	str	r3, [r1, #12]
 80050d4:	e001      	b.n	80050da <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e000      	b.n	80050dc <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3720      	adds	r7, #32
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	40021000 	.word	0x40021000
 80050e8:	feeefffc 	.word	0xfeeefffc

080050ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80050f6:	2300      	movs	r3, #0
 80050f8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d101      	bne.n	8005104 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e11d      	b.n	8005340 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005104:	4b90      	ldr	r3, [pc, #576]	; (8005348 <HAL_RCC_ClockConfig+0x25c>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 030f 	and.w	r3, r3, #15
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	429a      	cmp	r2, r3
 8005110:	d910      	bls.n	8005134 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005112:	4b8d      	ldr	r3, [pc, #564]	; (8005348 <HAL_RCC_ClockConfig+0x25c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f023 020f 	bic.w	r2, r3, #15
 800511a:	498b      	ldr	r1, [pc, #556]	; (8005348 <HAL_RCC_ClockConfig+0x25c>)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	4313      	orrs	r3, r2
 8005120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005122:	4b89      	ldr	r3, [pc, #548]	; (8005348 <HAL_RCC_ClockConfig+0x25c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 030f 	and.w	r3, r3, #15
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	429a      	cmp	r2, r3
 800512e:	d001      	beq.n	8005134 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e105      	b.n	8005340 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d010      	beq.n	8005162 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	4b81      	ldr	r3, [pc, #516]	; (800534c <HAL_RCC_ClockConfig+0x260>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800514c:	429a      	cmp	r2, r3
 800514e:	d908      	bls.n	8005162 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005150:	4b7e      	ldr	r3, [pc, #504]	; (800534c <HAL_RCC_ClockConfig+0x260>)
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	497b      	ldr	r1, [pc, #492]	; (800534c <HAL_RCC_ClockConfig+0x260>)
 800515e:	4313      	orrs	r3, r2
 8005160:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d079      	beq.n	8005262 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	2b03      	cmp	r3, #3
 8005174:	d11e      	bne.n	80051b4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005176:	4b75      	ldr	r3, [pc, #468]	; (800534c <HAL_RCC_ClockConfig+0x260>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e0dc      	b.n	8005340 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005186:	f000 fa09 	bl	800559c <RCC_GetSysClockFreqFromPLLSource>
 800518a:	4603      	mov	r3, r0
 800518c:	4a70      	ldr	r2, [pc, #448]	; (8005350 <HAL_RCC_ClockConfig+0x264>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d946      	bls.n	8005220 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005192:	4b6e      	ldr	r3, [pc, #440]	; (800534c <HAL_RCC_ClockConfig+0x260>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d140      	bne.n	8005220 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800519e:	4b6b      	ldr	r3, [pc, #428]	; (800534c <HAL_RCC_ClockConfig+0x260>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051a6:	4a69      	ldr	r2, [pc, #420]	; (800534c <HAL_RCC_ClockConfig+0x260>)
 80051a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80051ae:	2380      	movs	r3, #128	; 0x80
 80051b0:	617b      	str	r3, [r7, #20]
 80051b2:	e035      	b.n	8005220 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d107      	bne.n	80051cc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051bc:	4b63      	ldr	r3, [pc, #396]	; (800534c <HAL_RCC_ClockConfig+0x260>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d115      	bne.n	80051f4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e0b9      	b.n	8005340 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d107      	bne.n	80051e4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051d4:	4b5d      	ldr	r3, [pc, #372]	; (800534c <HAL_RCC_ClockConfig+0x260>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d109      	bne.n	80051f4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e0ad      	b.n	8005340 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051e4:	4b59      	ldr	r3, [pc, #356]	; (800534c <HAL_RCC_ClockConfig+0x260>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e0a5      	b.n	8005340 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80051f4:	f000 f8b4 	bl	8005360 <HAL_RCC_GetSysClockFreq>
 80051f8:	4603      	mov	r3, r0
 80051fa:	4a55      	ldr	r2, [pc, #340]	; (8005350 <HAL_RCC_ClockConfig+0x264>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d90f      	bls.n	8005220 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005200:	4b52      	ldr	r3, [pc, #328]	; (800534c <HAL_RCC_ClockConfig+0x260>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d109      	bne.n	8005220 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800520c:	4b4f      	ldr	r3, [pc, #316]	; (800534c <HAL_RCC_ClockConfig+0x260>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005214:	4a4d      	ldr	r2, [pc, #308]	; (800534c <HAL_RCC_ClockConfig+0x260>)
 8005216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800521a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800521c:	2380      	movs	r3, #128	; 0x80
 800521e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005220:	4b4a      	ldr	r3, [pc, #296]	; (800534c <HAL_RCC_ClockConfig+0x260>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f023 0203 	bic.w	r2, r3, #3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	4947      	ldr	r1, [pc, #284]	; (800534c <HAL_RCC_ClockConfig+0x260>)
 800522e:	4313      	orrs	r3, r2
 8005230:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005232:	f7fc ffff 	bl	8002234 <HAL_GetTick>
 8005236:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005238:	e00a      	b.n	8005250 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800523a:	f7fc fffb 	bl	8002234 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	f241 3288 	movw	r2, #5000	; 0x1388
 8005248:	4293      	cmp	r3, r2
 800524a:	d901      	bls.n	8005250 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e077      	b.n	8005340 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005250:	4b3e      	ldr	r3, [pc, #248]	; (800534c <HAL_RCC_ClockConfig+0x260>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f003 020c 	and.w	r2, r3, #12
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	429a      	cmp	r2, r3
 8005260:	d1eb      	bne.n	800523a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2b80      	cmp	r3, #128	; 0x80
 8005266:	d105      	bne.n	8005274 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005268:	4b38      	ldr	r3, [pc, #224]	; (800534c <HAL_RCC_ClockConfig+0x260>)
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	4a37      	ldr	r2, [pc, #220]	; (800534c <HAL_RCC_ClockConfig+0x260>)
 800526e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005272:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0302 	and.w	r3, r3, #2
 800527c:	2b00      	cmp	r3, #0
 800527e:	d010      	beq.n	80052a2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	4b31      	ldr	r3, [pc, #196]	; (800534c <HAL_RCC_ClockConfig+0x260>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800528c:	429a      	cmp	r2, r3
 800528e:	d208      	bcs.n	80052a2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005290:	4b2e      	ldr	r3, [pc, #184]	; (800534c <HAL_RCC_ClockConfig+0x260>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	492b      	ldr	r1, [pc, #172]	; (800534c <HAL_RCC_ClockConfig+0x260>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052a2:	4b29      	ldr	r3, [pc, #164]	; (8005348 <HAL_RCC_ClockConfig+0x25c>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 030f 	and.w	r3, r3, #15
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d210      	bcs.n	80052d2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052b0:	4b25      	ldr	r3, [pc, #148]	; (8005348 <HAL_RCC_ClockConfig+0x25c>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f023 020f 	bic.w	r2, r3, #15
 80052b8:	4923      	ldr	r1, [pc, #140]	; (8005348 <HAL_RCC_ClockConfig+0x25c>)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	4313      	orrs	r3, r2
 80052be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052c0:	4b21      	ldr	r3, [pc, #132]	; (8005348 <HAL_RCC_ClockConfig+0x25c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 030f 	and.w	r3, r3, #15
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d001      	beq.n	80052d2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e036      	b.n	8005340 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0304 	and.w	r3, r3, #4
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d008      	beq.n	80052f0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052de:	4b1b      	ldr	r3, [pc, #108]	; (800534c <HAL_RCC_ClockConfig+0x260>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	4918      	ldr	r1, [pc, #96]	; (800534c <HAL_RCC_ClockConfig+0x260>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0308 	and.w	r3, r3, #8
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d009      	beq.n	8005310 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052fc:	4b13      	ldr	r3, [pc, #76]	; (800534c <HAL_RCC_ClockConfig+0x260>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	00db      	lsls	r3, r3, #3
 800530a:	4910      	ldr	r1, [pc, #64]	; (800534c <HAL_RCC_ClockConfig+0x260>)
 800530c:	4313      	orrs	r3, r2
 800530e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005310:	f000 f826 	bl	8005360 <HAL_RCC_GetSysClockFreq>
 8005314:	4602      	mov	r2, r0
 8005316:	4b0d      	ldr	r3, [pc, #52]	; (800534c <HAL_RCC_ClockConfig+0x260>)
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	091b      	lsrs	r3, r3, #4
 800531c:	f003 030f 	and.w	r3, r3, #15
 8005320:	490c      	ldr	r1, [pc, #48]	; (8005354 <HAL_RCC_ClockConfig+0x268>)
 8005322:	5ccb      	ldrb	r3, [r1, r3]
 8005324:	f003 031f 	and.w	r3, r3, #31
 8005328:	fa22 f303 	lsr.w	r3, r2, r3
 800532c:	4a0a      	ldr	r2, [pc, #40]	; (8005358 <HAL_RCC_ClockConfig+0x26c>)
 800532e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005330:	4b0a      	ldr	r3, [pc, #40]	; (800535c <HAL_RCC_ClockConfig+0x270>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4618      	mov	r0, r3
 8005336:	f7fc ff2d 	bl	8002194 <HAL_InitTick>
 800533a:	4603      	mov	r3, r0
 800533c:	73fb      	strb	r3, [r7, #15]

  return status;
 800533e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3718      	adds	r7, #24
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	40022000 	.word	0x40022000
 800534c:	40021000 	.word	0x40021000
 8005350:	04c4b400 	.word	0x04c4b400
 8005354:	080084bc 	.word	0x080084bc
 8005358:	20000000 	.word	0x20000000
 800535c:	20000004 	.word	0x20000004

08005360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005360:	b480      	push	{r7}
 8005362:	b089      	sub	sp, #36	; 0x24
 8005364:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005366:	2300      	movs	r3, #0
 8005368:	61fb      	str	r3, [r7, #28]
 800536a:	2300      	movs	r3, #0
 800536c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800536e:	4b3e      	ldr	r3, [pc, #248]	; (8005468 <HAL_RCC_GetSysClockFreq+0x108>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f003 030c 	and.w	r3, r3, #12
 8005376:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005378:	4b3b      	ldr	r3, [pc, #236]	; (8005468 <HAL_RCC_GetSysClockFreq+0x108>)
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f003 0303 	and.w	r3, r3, #3
 8005380:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d005      	beq.n	8005394 <HAL_RCC_GetSysClockFreq+0x34>
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	2b0c      	cmp	r3, #12
 800538c:	d121      	bne.n	80053d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d11e      	bne.n	80053d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005394:	4b34      	ldr	r3, [pc, #208]	; (8005468 <HAL_RCC_GetSysClockFreq+0x108>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0308 	and.w	r3, r3, #8
 800539c:	2b00      	cmp	r3, #0
 800539e:	d107      	bne.n	80053b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80053a0:	4b31      	ldr	r3, [pc, #196]	; (8005468 <HAL_RCC_GetSysClockFreq+0x108>)
 80053a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053a6:	0a1b      	lsrs	r3, r3, #8
 80053a8:	f003 030f 	and.w	r3, r3, #15
 80053ac:	61fb      	str	r3, [r7, #28]
 80053ae:	e005      	b.n	80053bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80053b0:	4b2d      	ldr	r3, [pc, #180]	; (8005468 <HAL_RCC_GetSysClockFreq+0x108>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	091b      	lsrs	r3, r3, #4
 80053b6:	f003 030f 	and.w	r3, r3, #15
 80053ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80053bc:	4a2b      	ldr	r2, [pc, #172]	; (800546c <HAL_RCC_GetSysClockFreq+0x10c>)
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10d      	bne.n	80053e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053d0:	e00a      	b.n	80053e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	2b04      	cmp	r3, #4
 80053d6:	d102      	bne.n	80053de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80053d8:	4b25      	ldr	r3, [pc, #148]	; (8005470 <HAL_RCC_GetSysClockFreq+0x110>)
 80053da:	61bb      	str	r3, [r7, #24]
 80053dc:	e004      	b.n	80053e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d101      	bne.n	80053e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80053e4:	4b23      	ldr	r3, [pc, #140]	; (8005474 <HAL_RCC_GetSysClockFreq+0x114>)
 80053e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	2b0c      	cmp	r3, #12
 80053ec:	d134      	bne.n	8005458 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053ee:	4b1e      	ldr	r3, [pc, #120]	; (8005468 <HAL_RCC_GetSysClockFreq+0x108>)
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	f003 0303 	and.w	r3, r3, #3
 80053f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d003      	beq.n	8005406 <HAL_RCC_GetSysClockFreq+0xa6>
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	2b03      	cmp	r3, #3
 8005402:	d003      	beq.n	800540c <HAL_RCC_GetSysClockFreq+0xac>
 8005404:	e005      	b.n	8005412 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005406:	4b1a      	ldr	r3, [pc, #104]	; (8005470 <HAL_RCC_GetSysClockFreq+0x110>)
 8005408:	617b      	str	r3, [r7, #20]
      break;
 800540a:	e005      	b.n	8005418 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800540c:	4b19      	ldr	r3, [pc, #100]	; (8005474 <HAL_RCC_GetSysClockFreq+0x114>)
 800540e:	617b      	str	r3, [r7, #20]
      break;
 8005410:	e002      	b.n	8005418 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	617b      	str	r3, [r7, #20]
      break;
 8005416:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005418:	4b13      	ldr	r3, [pc, #76]	; (8005468 <HAL_RCC_GetSysClockFreq+0x108>)
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	091b      	lsrs	r3, r3, #4
 800541e:	f003 030f 	and.w	r3, r3, #15
 8005422:	3301      	adds	r3, #1
 8005424:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005426:	4b10      	ldr	r3, [pc, #64]	; (8005468 <HAL_RCC_GetSysClockFreq+0x108>)
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	0a1b      	lsrs	r3, r3, #8
 800542c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	fb03 f202 	mul.w	r2, r3, r2
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	fbb2 f3f3 	udiv	r3, r2, r3
 800543c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800543e:	4b0a      	ldr	r3, [pc, #40]	; (8005468 <HAL_RCC_GetSysClockFreq+0x108>)
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	0e5b      	lsrs	r3, r3, #25
 8005444:	f003 0303 	and.w	r3, r3, #3
 8005448:	3301      	adds	r3, #1
 800544a:	005b      	lsls	r3, r3, #1
 800544c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	fbb2 f3f3 	udiv	r3, r2, r3
 8005456:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005458:	69bb      	ldr	r3, [r7, #24]
}
 800545a:	4618      	mov	r0, r3
 800545c:	3724      	adds	r7, #36	; 0x24
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	40021000 	.word	0x40021000
 800546c:	080084d4 	.word	0x080084d4
 8005470:	00f42400 	.word	0x00f42400
 8005474:	007a1200 	.word	0x007a1200

08005478 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005478:	b480      	push	{r7}
 800547a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800547c:	4b03      	ldr	r3, [pc, #12]	; (800548c <HAL_RCC_GetHCLKFreq+0x14>)
 800547e:	681b      	ldr	r3, [r3, #0]
}
 8005480:	4618      	mov	r0, r3
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	20000000 	.word	0x20000000

08005490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005494:	f7ff fff0 	bl	8005478 <HAL_RCC_GetHCLKFreq>
 8005498:	4602      	mov	r2, r0
 800549a:	4b06      	ldr	r3, [pc, #24]	; (80054b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	0a1b      	lsrs	r3, r3, #8
 80054a0:	f003 0307 	and.w	r3, r3, #7
 80054a4:	4904      	ldr	r1, [pc, #16]	; (80054b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054a6:	5ccb      	ldrb	r3, [r1, r3]
 80054a8:	f003 031f 	and.w	r3, r3, #31
 80054ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	40021000 	.word	0x40021000
 80054b8:	080084cc 	.word	0x080084cc

080054bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80054c0:	f7ff ffda 	bl	8005478 <HAL_RCC_GetHCLKFreq>
 80054c4:	4602      	mov	r2, r0
 80054c6:	4b06      	ldr	r3, [pc, #24]	; (80054e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	0adb      	lsrs	r3, r3, #11
 80054cc:	f003 0307 	and.w	r3, r3, #7
 80054d0:	4904      	ldr	r1, [pc, #16]	; (80054e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80054d2:	5ccb      	ldrb	r3, [r1, r3]
 80054d4:	f003 031f 	and.w	r3, r3, #31
 80054d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054dc:	4618      	mov	r0, r3
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	40021000 	.word	0x40021000
 80054e4:	080084cc 	.word	0x080084cc

080054e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80054f0:	2300      	movs	r3, #0
 80054f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80054f4:	4b27      	ldr	r3, [pc, #156]	; (8005594 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80054f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d003      	beq.n	8005508 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005500:	f7ff f906 	bl	8004710 <HAL_PWREx_GetVoltageRange>
 8005504:	6178      	str	r0, [r7, #20]
 8005506:	e014      	b.n	8005532 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005508:	4b22      	ldr	r3, [pc, #136]	; (8005594 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800550a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800550c:	4a21      	ldr	r2, [pc, #132]	; (8005594 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800550e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005512:	6593      	str	r3, [r2, #88]	; 0x58
 8005514:	4b1f      	ldr	r3, [pc, #124]	; (8005594 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005520:	f7ff f8f6 	bl	8004710 <HAL_PWREx_GetVoltageRange>
 8005524:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005526:	4b1b      	ldr	r3, [pc, #108]	; (8005594 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552a:	4a1a      	ldr	r2, [pc, #104]	; (8005594 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800552c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005530:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005538:	d10b      	bne.n	8005552 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b80      	cmp	r3, #128	; 0x80
 800553e:	d913      	bls.n	8005568 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2ba0      	cmp	r3, #160	; 0xa0
 8005544:	d902      	bls.n	800554c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005546:	2302      	movs	r3, #2
 8005548:	613b      	str	r3, [r7, #16]
 800554a:	e00d      	b.n	8005568 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800554c:	2301      	movs	r3, #1
 800554e:	613b      	str	r3, [r7, #16]
 8005550:	e00a      	b.n	8005568 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b7f      	cmp	r3, #127	; 0x7f
 8005556:	d902      	bls.n	800555e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005558:	2302      	movs	r3, #2
 800555a:	613b      	str	r3, [r7, #16]
 800555c:	e004      	b.n	8005568 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b70      	cmp	r3, #112	; 0x70
 8005562:	d101      	bne.n	8005568 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005564:	2301      	movs	r3, #1
 8005566:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005568:	4b0b      	ldr	r3, [pc, #44]	; (8005598 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f023 020f 	bic.w	r2, r3, #15
 8005570:	4909      	ldr	r1, [pc, #36]	; (8005598 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	4313      	orrs	r3, r2
 8005576:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005578:	4b07      	ldr	r3, [pc, #28]	; (8005598 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 030f 	and.w	r3, r3, #15
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	429a      	cmp	r2, r3
 8005584:	d001      	beq.n	800558a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e000      	b.n	800558c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3718      	adds	r7, #24
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	40021000 	.word	0x40021000
 8005598:	40022000 	.word	0x40022000

0800559c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800559c:	b480      	push	{r7}
 800559e:	b087      	sub	sp, #28
 80055a0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055a2:	4b2d      	ldr	r3, [pc, #180]	; (8005658 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f003 0303 	and.w	r3, r3, #3
 80055aa:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2b03      	cmp	r3, #3
 80055b0:	d00b      	beq.n	80055ca <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2b03      	cmp	r3, #3
 80055b6:	d825      	bhi.n	8005604 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d008      	beq.n	80055d0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d11f      	bne.n	8005604 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80055c4:	4b25      	ldr	r3, [pc, #148]	; (800565c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80055c6:	613b      	str	r3, [r7, #16]
    break;
 80055c8:	e01f      	b.n	800560a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80055ca:	4b25      	ldr	r3, [pc, #148]	; (8005660 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80055cc:	613b      	str	r3, [r7, #16]
    break;
 80055ce:	e01c      	b.n	800560a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80055d0:	4b21      	ldr	r3, [pc, #132]	; (8005658 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0308 	and.w	r3, r3, #8
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d107      	bne.n	80055ec <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80055dc:	4b1e      	ldr	r3, [pc, #120]	; (8005658 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055e2:	0a1b      	lsrs	r3, r3, #8
 80055e4:	f003 030f 	and.w	r3, r3, #15
 80055e8:	617b      	str	r3, [r7, #20]
 80055ea:	e005      	b.n	80055f8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80055ec:	4b1a      	ldr	r3, [pc, #104]	; (8005658 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	091b      	lsrs	r3, r3, #4
 80055f2:	f003 030f 	and.w	r3, r3, #15
 80055f6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80055f8:	4a1a      	ldr	r2, [pc, #104]	; (8005664 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005600:	613b      	str	r3, [r7, #16]
    break;
 8005602:	e002      	b.n	800560a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005604:	2300      	movs	r3, #0
 8005606:	613b      	str	r3, [r7, #16]
    break;
 8005608:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800560a:	4b13      	ldr	r3, [pc, #76]	; (8005658 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	091b      	lsrs	r3, r3, #4
 8005610:	f003 030f 	and.w	r3, r3, #15
 8005614:	3301      	adds	r3, #1
 8005616:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005618:	4b0f      	ldr	r3, [pc, #60]	; (8005658 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	0a1b      	lsrs	r3, r3, #8
 800561e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	fb03 f202 	mul.w	r2, r3, r2
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	fbb2 f3f3 	udiv	r3, r2, r3
 800562e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005630:	4b09      	ldr	r3, [pc, #36]	; (8005658 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	0e5b      	lsrs	r3, r3, #25
 8005636:	f003 0303 	and.w	r3, r3, #3
 800563a:	3301      	adds	r3, #1
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	fbb2 f3f3 	udiv	r3, r2, r3
 8005648:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800564a:	683b      	ldr	r3, [r7, #0]
}
 800564c:	4618      	mov	r0, r3
 800564e:	371c      	adds	r7, #28
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	40021000 	.word	0x40021000
 800565c:	00f42400 	.word	0x00f42400
 8005660:	007a1200 	.word	0x007a1200
 8005664:	080084d4 	.word	0x080084d4

08005668 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005670:	2300      	movs	r3, #0
 8005672:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005674:	2300      	movs	r3, #0
 8005676:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005680:	2b00      	cmp	r3, #0
 8005682:	d040      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005688:	2b80      	cmp	r3, #128	; 0x80
 800568a:	d02a      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800568c:	2b80      	cmp	r3, #128	; 0x80
 800568e:	d825      	bhi.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005690:	2b60      	cmp	r3, #96	; 0x60
 8005692:	d026      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005694:	2b60      	cmp	r3, #96	; 0x60
 8005696:	d821      	bhi.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005698:	2b40      	cmp	r3, #64	; 0x40
 800569a:	d006      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x42>
 800569c:	2b40      	cmp	r3, #64	; 0x40
 800569e:	d81d      	bhi.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d009      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80056a4:	2b20      	cmp	r3, #32
 80056a6:	d010      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x62>
 80056a8:	e018      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80056aa:	4b89      	ldr	r3, [pc, #548]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	4a88      	ldr	r2, [pc, #544]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056b4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056b6:	e015      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	3304      	adds	r3, #4
 80056bc:	2100      	movs	r1, #0
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 fb62 	bl	8005d88 <RCCEx_PLLSAI1_Config>
 80056c4:	4603      	mov	r3, r0
 80056c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056c8:	e00c      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	3320      	adds	r3, #32
 80056ce:	2100      	movs	r1, #0
 80056d0:	4618      	mov	r0, r3
 80056d2:	f000 fc4d 	bl	8005f70 <RCCEx_PLLSAI2_Config>
 80056d6:	4603      	mov	r3, r0
 80056d8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056da:	e003      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	74fb      	strb	r3, [r7, #19]
      break;
 80056e0:	e000      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80056e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056e4:	7cfb      	ldrb	r3, [r7, #19]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10b      	bne.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056ea:	4b79      	ldr	r3, [pc, #484]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056f0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056f8:	4975      	ldr	r1, [pc, #468]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005700:	e001      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005702:	7cfb      	ldrb	r3, [r7, #19]
 8005704:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d047      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800571a:	d030      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800571c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005720:	d82a      	bhi.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005722:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005726:	d02a      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005728:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800572c:	d824      	bhi.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800572e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005732:	d008      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005738:	d81e      	bhi.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00a      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800573e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005742:	d010      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005744:	e018      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005746:	4b62      	ldr	r3, [pc, #392]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	4a61      	ldr	r2, [pc, #388]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800574c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005750:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005752:	e015      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	3304      	adds	r3, #4
 8005758:	2100      	movs	r1, #0
 800575a:	4618      	mov	r0, r3
 800575c:	f000 fb14 	bl	8005d88 <RCCEx_PLLSAI1_Config>
 8005760:	4603      	mov	r3, r0
 8005762:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005764:	e00c      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	3320      	adds	r3, #32
 800576a:	2100      	movs	r1, #0
 800576c:	4618      	mov	r0, r3
 800576e:	f000 fbff 	bl	8005f70 <RCCEx_PLLSAI2_Config>
 8005772:	4603      	mov	r3, r0
 8005774:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005776:	e003      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	74fb      	strb	r3, [r7, #19]
      break;
 800577c:	e000      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800577e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005780:	7cfb      	ldrb	r3, [r7, #19]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10b      	bne.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005786:	4b52      	ldr	r3, [pc, #328]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005788:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800578c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005794:	494e      	ldr	r1, [pc, #312]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005796:	4313      	orrs	r3, r2
 8005798:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800579c:	e001      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800579e:	7cfb      	ldrb	r3, [r7, #19]
 80057a0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f000 809f 	beq.w	80058ee <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057b0:	2300      	movs	r3, #0
 80057b2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80057b4:	4b46      	ldr	r3, [pc, #280]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d101      	bne.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80057c0:	2301      	movs	r3, #1
 80057c2:	e000      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80057c4:	2300      	movs	r3, #0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00d      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057ca:	4b41      	ldr	r3, [pc, #260]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ce:	4a40      	ldr	r2, [pc, #256]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057d4:	6593      	str	r3, [r2, #88]	; 0x58
 80057d6:	4b3e      	ldr	r3, [pc, #248]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057de:	60bb      	str	r3, [r7, #8]
 80057e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057e2:	2301      	movs	r3, #1
 80057e4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057e6:	4b3b      	ldr	r3, [pc, #236]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a3a      	ldr	r2, [pc, #232]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80057ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057f2:	f7fc fd1f 	bl	8002234 <HAL_GetTick>
 80057f6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80057f8:	e009      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057fa:	f7fc fd1b 	bl	8002234 <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	2b02      	cmp	r3, #2
 8005806:	d902      	bls.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	74fb      	strb	r3, [r7, #19]
        break;
 800580c:	e005      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800580e:	4b31      	ldr	r3, [pc, #196]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0ef      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800581a:	7cfb      	ldrb	r3, [r7, #19]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d15b      	bne.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005820:	4b2b      	ldr	r3, [pc, #172]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800582a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d01f      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	429a      	cmp	r2, r3
 800583c:	d019      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800583e:	4b24      	ldr	r3, [pc, #144]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005848:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800584a:	4b21      	ldr	r3, [pc, #132]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800584c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005850:	4a1f      	ldr	r2, [pc, #124]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005856:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800585a:	4b1d      	ldr	r3, [pc, #116]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800585c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005860:	4a1b      	ldr	r2, [pc, #108]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005866:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800586a:	4a19      	ldr	r2, [pc, #100]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b00      	cmp	r3, #0
 800587a:	d016      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800587c:	f7fc fcda 	bl	8002234 <HAL_GetTick>
 8005880:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005882:	e00b      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005884:	f7fc fcd6 	bl	8002234 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005892:	4293      	cmp	r3, r2
 8005894:	d902      	bls.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	74fb      	strb	r3, [r7, #19]
            break;
 800589a:	e006      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800589c:	4b0c      	ldr	r3, [pc, #48]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800589e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d0ec      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80058aa:	7cfb      	ldrb	r3, [r7, #19]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10c      	bne.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058b0:	4b07      	ldr	r3, [pc, #28]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058c0:	4903      	ldr	r1, [pc, #12]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80058c8:	e008      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058ca:	7cfb      	ldrb	r3, [r7, #19]
 80058cc:	74bb      	strb	r3, [r7, #18]
 80058ce:	e005      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x274>
 80058d0:	40021000 	.word	0x40021000
 80058d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d8:	7cfb      	ldrb	r3, [r7, #19]
 80058da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058dc:	7c7b      	ldrb	r3, [r7, #17]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d105      	bne.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058e2:	4ba0      	ldr	r3, [pc, #640]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e6:	4a9f      	ldr	r2, [pc, #636]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00a      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058fa:	4b9a      	ldr	r3, [pc, #616]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005900:	f023 0203 	bic.w	r2, r3, #3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005908:	4996      	ldr	r1, [pc, #600]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800590a:	4313      	orrs	r3, r2
 800590c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0302 	and.w	r3, r3, #2
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00a      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800591c:	4b91      	ldr	r3, [pc, #580]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800591e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005922:	f023 020c 	bic.w	r2, r3, #12
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592a:	498e      	ldr	r1, [pc, #568]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800592c:	4313      	orrs	r3, r2
 800592e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0304 	and.w	r3, r3, #4
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00a      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800593e:	4b89      	ldr	r3, [pc, #548]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005944:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800594c:	4985      	ldr	r1, [pc, #532]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800594e:	4313      	orrs	r3, r2
 8005950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0308 	and.w	r3, r3, #8
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00a      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005960:	4b80      	ldr	r3, [pc, #512]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005966:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800596e:	497d      	ldr	r1, [pc, #500]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005970:	4313      	orrs	r3, r2
 8005972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0310 	and.w	r3, r3, #16
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00a      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005982:	4b78      	ldr	r3, [pc, #480]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005988:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005990:	4974      	ldr	r1, [pc, #464]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005992:	4313      	orrs	r3, r2
 8005994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0320 	and.w	r3, r3, #32
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00a      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059a4:	4b6f      	ldr	r3, [pc, #444]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b2:	496c      	ldr	r1, [pc, #432]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00a      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059c6:	4b67      	ldr	r3, [pc, #412]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059d4:	4963      	ldr	r1, [pc, #396]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00a      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059e8:	4b5e      	ldr	r3, [pc, #376]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059f6:	495b      	ldr	r1, [pc, #364]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a0a:	4b56      	ldr	r3, [pc, #344]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a10:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a18:	4952      	ldr	r1, [pc, #328]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00a      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a2c:	4b4d      	ldr	r3, [pc, #308]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a32:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a3a:	494a      	ldr	r1, [pc, #296]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00a      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a4e:	4b45      	ldr	r3, [pc, #276]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a5c:	4941      	ldr	r1, [pc, #260]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00a      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a70:	4b3c      	ldr	r3, [pc, #240]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a76:	f023 0203 	bic.w	r2, r3, #3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a7e:	4939      	ldr	r1, [pc, #228]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d028      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a92:	4b34      	ldr	r3, [pc, #208]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a98:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aa0:	4930      	ldr	r1, [pc, #192]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ab0:	d106      	bne.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ab2:	4b2c      	ldr	r3, [pc, #176]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	4a2b      	ldr	r2, [pc, #172]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ab8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005abc:	60d3      	str	r3, [r2, #12]
 8005abe:	e011      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ac4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ac8:	d10c      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	3304      	adds	r3, #4
 8005ace:	2101      	movs	r1, #1
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 f959 	bl	8005d88 <RCCEx_PLLSAI1_Config>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005ada:	7cfb      	ldrb	r3, [r7, #19]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d001      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005ae0:	7cfb      	ldrb	r3, [r7, #19]
 8005ae2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d04d      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005af4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005af8:	d108      	bne.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005afa:	4b1a      	ldr	r3, [pc, #104]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005afc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b00:	4a18      	ldr	r2, [pc, #96]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b06:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005b0a:	e012      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005b0c:	4b15      	ldr	r3, [pc, #84]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b12:	4a14      	ldr	r2, [pc, #80]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b18:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005b1c:	4b11      	ldr	r3, [pc, #68]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b2a:	490e      	ldr	r1, [pc, #56]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b3a:	d106      	bne.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b3c:	4b09      	ldr	r3, [pc, #36]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	4a08      	ldr	r2, [pc, #32]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b46:	60d3      	str	r3, [r2, #12]
 8005b48:	e020      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b52:	d109      	bne.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b54:	4b03      	ldr	r3, [pc, #12]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	4a02      	ldr	r2, [pc, #8]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b5e:	60d3      	str	r3, [r2, #12]
 8005b60:	e014      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005b62:	bf00      	nop
 8005b64:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b70:	d10c      	bne.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	3304      	adds	r3, #4
 8005b76:	2101      	movs	r1, #1
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 f905 	bl	8005d88 <RCCEx_PLLSAI1_Config>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b82:	7cfb      	ldrb	r3, [r7, #19]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d001      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005b88:	7cfb      	ldrb	r3, [r7, #19]
 8005b8a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d028      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b98:	4b7a      	ldr	r3, [pc, #488]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ba6:	4977      	ldr	r1, [pc, #476]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bb6:	d106      	bne.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bb8:	4b72      	ldr	r3, [pc, #456]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	4a71      	ldr	r2, [pc, #452]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005bbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bc2:	60d3      	str	r3, [r2, #12]
 8005bc4:	e011      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bce:	d10c      	bne.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	3304      	adds	r3, #4
 8005bd4:	2101      	movs	r1, #1
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 f8d6 	bl	8005d88 <RCCEx_PLLSAI1_Config>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005be0:	7cfb      	ldrb	r3, [r7, #19]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005be6:	7cfb      	ldrb	r3, [r7, #19]
 8005be8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d01e      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005bf6:	4b63      	ldr	r3, [pc, #396]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bfc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c06:	495f      	ldr	r1, [pc, #380]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c18:	d10c      	bne.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	2102      	movs	r1, #2
 8005c20:	4618      	mov	r0, r3
 8005c22:	f000 f8b1 	bl	8005d88 <RCCEx_PLLSAI1_Config>
 8005c26:	4603      	mov	r3, r0
 8005c28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c2a:	7cfb      	ldrb	r3, [r7, #19]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005c30:	7cfb      	ldrb	r3, [r7, #19]
 8005c32:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00b      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c40:	4b50      	ldr	r3, [pc, #320]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c46:	f023 0204 	bic.w	r2, r3, #4
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c50:	494c      	ldr	r1, [pc, #304]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00b      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005c64:	4b47      	ldr	r3, [pc, #284]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c6a:	f023 0218 	bic.w	r2, r3, #24
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c74:	4943      	ldr	r1, [pc, #268]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d035      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005c88:	4b3e      	ldr	r3, [pc, #248]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a3d      	ldr	r2, [pc, #244]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c94:	f7fc face 	bl	8002234 <HAL_GetTick>
 8005c98:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c9a:	e009      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c9c:	f7fc faca 	bl	8002234 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d902      	bls.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	74fb      	strb	r3, [r7, #19]
        break;
 8005cae:	e005      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005cb0:	4b34      	ldr	r3, [pc, #208]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1ef      	bne.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8005cbc:	7cfb      	ldrb	r3, [r7, #19]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d113      	bne.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8005cc2:	4b30      	ldr	r3, [pc, #192]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005cc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cd2:	492c      	ldr	r1, [pc, #176]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	3320      	adds	r3, #32
 8005cde:	2102      	movs	r1, #2
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f000 f945 	bl	8005f70 <RCCEx_PLLSAI2_Config>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8005cea:	7cfb      	ldrb	r3, [r7, #19]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8005cf0:	7cfb      	ldrb	r3, [r7, #19]
 8005cf2:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d01e      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005d00:	4b20      	ldr	r3, [pc, #128]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d10:	491c      	ldr	r1, [pc, #112]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d22:	d10c      	bne.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	3320      	adds	r3, #32
 8005d28:	2101      	movs	r1, #1
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 f920 	bl	8005f70 <RCCEx_PLLSAI2_Config>
 8005d30:	4603      	mov	r3, r0
 8005d32:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d34:	7cfb      	ldrb	r3, [r7, #19]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d001      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8005d3a:	7cfb      	ldrb	r3, [r7, #19]
 8005d3c:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d017      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005d4a:	4b0e      	ldr	r3, [pc, #56]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d5a:	490a      	ldr	r1, [pc, #40]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d6c:	d105      	bne.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d6e:	4b05      	ldr	r3, [pc, #20]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	4a04      	ldr	r2, [pc, #16]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d78:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005d7a:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3718      	adds	r7, #24
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	40021000 	.word	0x40021000

08005d88 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d92:	2300      	movs	r3, #0
 8005d94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d96:	4b72      	ldr	r3, [pc, #456]	; (8005f60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	f003 0303 	and.w	r3, r3, #3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00e      	beq.n	8005dc0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005da2:	4b6f      	ldr	r3, [pc, #444]	; (8005f60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	f003 0203 	and.w	r2, r3, #3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d103      	bne.n	8005dba <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
       ||
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d142      	bne.n	8005e40 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	73fb      	strb	r3, [r7, #15]
 8005dbe:	e03f      	b.n	8005e40 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	d018      	beq.n	8005dfa <RCCEx_PLLSAI1_Config+0x72>
 8005dc8:	2b03      	cmp	r3, #3
 8005dca:	d825      	bhi.n	8005e18 <RCCEx_PLLSAI1_Config+0x90>
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d002      	beq.n	8005dd6 <RCCEx_PLLSAI1_Config+0x4e>
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d009      	beq.n	8005de8 <RCCEx_PLLSAI1_Config+0x60>
 8005dd4:	e020      	b.n	8005e18 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005dd6:	4b62      	ldr	r3, [pc, #392]	; (8005f60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d11d      	bne.n	8005e1e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005de6:	e01a      	b.n	8005e1e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005de8:	4b5d      	ldr	r3, [pc, #372]	; (8005f60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d116      	bne.n	8005e22 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005df8:	e013      	b.n	8005e22 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005dfa:	4b59      	ldr	r3, [pc, #356]	; (8005f60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10f      	bne.n	8005e26 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005e06:	4b56      	ldr	r3, [pc, #344]	; (8005f60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d109      	bne.n	8005e26 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e16:	e006      	b.n	8005e26 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e1c:	e004      	b.n	8005e28 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005e1e:	bf00      	nop
 8005e20:	e002      	b.n	8005e28 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005e22:	bf00      	nop
 8005e24:	e000      	b.n	8005e28 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005e26:	bf00      	nop
    }

    if(status == HAL_OK)
 8005e28:	7bfb      	ldrb	r3, [r7, #15]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d108      	bne.n	8005e40 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005e2e:	4b4c      	ldr	r3, [pc, #304]	; (8005f60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	f023 0203 	bic.w	r2, r3, #3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4949      	ldr	r1, [pc, #292]	; (8005f60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f040 8086 	bne.w	8005f54 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005e48:	4b45      	ldr	r3, [pc, #276]	; (8005f60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a44      	ldr	r2, [pc, #272]	; (8005f60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e54:	f7fc f9ee 	bl	8002234 <HAL_GetTick>
 8005e58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e5a:	e009      	b.n	8005e70 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e5c:	f7fc f9ea 	bl	8002234 <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d902      	bls.n	8005e70 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	73fb      	strb	r3, [r7, #15]
        break;
 8005e6e:	e005      	b.n	8005e7c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e70:	4b3b      	ldr	r3, [pc, #236]	; (8005f60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1ef      	bne.n	8005e5c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005e7c:	7bfb      	ldrb	r3, [r7, #15]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d168      	bne.n	8005f54 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d113      	bne.n	8005eb0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e88:	4b35      	ldr	r3, [pc, #212]	; (8005f60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e8a:	691a      	ldr	r2, [r3, #16]
 8005e8c:	4b35      	ldr	r3, [pc, #212]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e8e:	4013      	ands	r3, r2
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	6892      	ldr	r2, [r2, #8]
 8005e94:	0211      	lsls	r1, r2, #8
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	68d2      	ldr	r2, [r2, #12]
 8005e9a:	06d2      	lsls	r2, r2, #27
 8005e9c:	4311      	orrs	r1, r2
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	6852      	ldr	r2, [r2, #4]
 8005ea2:	3a01      	subs	r2, #1
 8005ea4:	0112      	lsls	r2, r2, #4
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	492d      	ldr	r1, [pc, #180]	; (8005f60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	610b      	str	r3, [r1, #16]
 8005eae:	e02d      	b.n	8005f0c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d115      	bne.n	8005ee2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005eb6:	4b2a      	ldr	r3, [pc, #168]	; (8005f60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005eb8:	691a      	ldr	r2, [r3, #16]
 8005eba:	4b2b      	ldr	r3, [pc, #172]	; (8005f68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	6892      	ldr	r2, [r2, #8]
 8005ec2:	0211      	lsls	r1, r2, #8
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	6912      	ldr	r2, [r2, #16]
 8005ec8:	0852      	lsrs	r2, r2, #1
 8005eca:	3a01      	subs	r2, #1
 8005ecc:	0552      	lsls	r2, r2, #21
 8005ece:	4311      	orrs	r1, r2
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	6852      	ldr	r2, [r2, #4]
 8005ed4:	3a01      	subs	r2, #1
 8005ed6:	0112      	lsls	r2, r2, #4
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	4921      	ldr	r1, [pc, #132]	; (8005f60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	610b      	str	r3, [r1, #16]
 8005ee0:	e014      	b.n	8005f0c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ee2:	4b1f      	ldr	r3, [pc, #124]	; (8005f60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ee4:	691a      	ldr	r2, [r3, #16]
 8005ee6:	4b21      	ldr	r3, [pc, #132]	; (8005f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ee8:	4013      	ands	r3, r2
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	6892      	ldr	r2, [r2, #8]
 8005eee:	0211      	lsls	r1, r2, #8
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	6952      	ldr	r2, [r2, #20]
 8005ef4:	0852      	lsrs	r2, r2, #1
 8005ef6:	3a01      	subs	r2, #1
 8005ef8:	0652      	lsls	r2, r2, #25
 8005efa:	4311      	orrs	r1, r2
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	6852      	ldr	r2, [r2, #4]
 8005f00:	3a01      	subs	r2, #1
 8005f02:	0112      	lsls	r2, r2, #4
 8005f04:	430a      	orrs	r2, r1
 8005f06:	4916      	ldr	r1, [pc, #88]	; (8005f60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005f0c:	4b14      	ldr	r3, [pc, #80]	; (8005f60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a13      	ldr	r2, [pc, #76]	; (8005f60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f18:	f7fc f98c 	bl	8002234 <HAL_GetTick>
 8005f1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f1e:	e009      	b.n	8005f34 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f20:	f7fc f988 	bl	8002234 <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d902      	bls.n	8005f34 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	73fb      	strb	r3, [r7, #15]
          break;
 8005f32:	e005      	b.n	8005f40 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f34:	4b0a      	ldr	r3, [pc, #40]	; (8005f60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d0ef      	beq.n	8005f20 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d106      	bne.n	8005f54 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005f46:	4b06      	ldr	r3, [pc, #24]	; (8005f60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f48:	691a      	ldr	r2, [r3, #16]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	4904      	ldr	r1, [pc, #16]	; (8005f60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f50:	4313      	orrs	r3, r2
 8005f52:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	40021000 	.word	0x40021000
 8005f64:	07ff800f 	.word	0x07ff800f
 8005f68:	ff9f800f 	.word	0xff9f800f
 8005f6c:	f9ff800f 	.word	0xf9ff800f

08005f70 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f7e:	4b72      	ldr	r3, [pc, #456]	; (8006148 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	f003 0303 	and.w	r3, r3, #3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00e      	beq.n	8005fa8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005f8a:	4b6f      	ldr	r3, [pc, #444]	; (8006148 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	f003 0203 	and.w	r2, r3, #3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d103      	bne.n	8005fa2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
       ||
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d142      	bne.n	8006028 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	73fb      	strb	r3, [r7, #15]
 8005fa6:	e03f      	b.n	8006028 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2b03      	cmp	r3, #3
 8005fae:	d018      	beq.n	8005fe2 <RCCEx_PLLSAI2_Config+0x72>
 8005fb0:	2b03      	cmp	r3, #3
 8005fb2:	d825      	bhi.n	8006000 <RCCEx_PLLSAI2_Config+0x90>
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d002      	beq.n	8005fbe <RCCEx_PLLSAI2_Config+0x4e>
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d009      	beq.n	8005fd0 <RCCEx_PLLSAI2_Config+0x60>
 8005fbc:	e020      	b.n	8006000 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005fbe:	4b62      	ldr	r3, [pc, #392]	; (8006148 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0302 	and.w	r3, r3, #2
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d11d      	bne.n	8006006 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fce:	e01a      	b.n	8006006 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005fd0:	4b5d      	ldr	r3, [pc, #372]	; (8006148 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d116      	bne.n	800600a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fe0:	e013      	b.n	800600a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005fe2:	4b59      	ldr	r3, [pc, #356]	; (8006148 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10f      	bne.n	800600e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005fee:	4b56      	ldr	r3, [pc, #344]	; (8006148 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d109      	bne.n	800600e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ffe:	e006      	b.n	800600e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	73fb      	strb	r3, [r7, #15]
      break;
 8006004:	e004      	b.n	8006010 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006006:	bf00      	nop
 8006008:	e002      	b.n	8006010 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800600a:	bf00      	nop
 800600c:	e000      	b.n	8006010 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800600e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006010:	7bfb      	ldrb	r3, [r7, #15]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d108      	bne.n	8006028 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006016:	4b4c      	ldr	r3, [pc, #304]	; (8006148 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	f023 0203 	bic.w	r2, r3, #3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4949      	ldr	r1, [pc, #292]	; (8006148 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006024:	4313      	orrs	r3, r2
 8006026:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006028:	7bfb      	ldrb	r3, [r7, #15]
 800602a:	2b00      	cmp	r3, #0
 800602c:	f040 8086 	bne.w	800613c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006030:	4b45      	ldr	r3, [pc, #276]	; (8006148 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a44      	ldr	r2, [pc, #272]	; (8006148 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006036:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800603a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800603c:	f7fc f8fa 	bl	8002234 <HAL_GetTick>
 8006040:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006042:	e009      	b.n	8006058 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006044:	f7fc f8f6 	bl	8002234 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	2b02      	cmp	r3, #2
 8006050:	d902      	bls.n	8006058 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	73fb      	strb	r3, [r7, #15]
        break;
 8006056:	e005      	b.n	8006064 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006058:	4b3b      	ldr	r3, [pc, #236]	; (8006148 <RCCEx_PLLSAI2_Config+0x1d8>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1ef      	bne.n	8006044 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006064:	7bfb      	ldrb	r3, [r7, #15]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d168      	bne.n	800613c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d113      	bne.n	8006098 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006070:	4b35      	ldr	r3, [pc, #212]	; (8006148 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006072:	695a      	ldr	r2, [r3, #20]
 8006074:	4b35      	ldr	r3, [pc, #212]	; (800614c <RCCEx_PLLSAI2_Config+0x1dc>)
 8006076:	4013      	ands	r3, r2
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	6892      	ldr	r2, [r2, #8]
 800607c:	0211      	lsls	r1, r2, #8
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	68d2      	ldr	r2, [r2, #12]
 8006082:	06d2      	lsls	r2, r2, #27
 8006084:	4311      	orrs	r1, r2
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	6852      	ldr	r2, [r2, #4]
 800608a:	3a01      	subs	r2, #1
 800608c:	0112      	lsls	r2, r2, #4
 800608e:	430a      	orrs	r2, r1
 8006090:	492d      	ldr	r1, [pc, #180]	; (8006148 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006092:	4313      	orrs	r3, r2
 8006094:	614b      	str	r3, [r1, #20]
 8006096:	e02d      	b.n	80060f4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d115      	bne.n	80060ca <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800609e:	4b2a      	ldr	r3, [pc, #168]	; (8006148 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060a0:	695a      	ldr	r2, [r3, #20]
 80060a2:	4b2b      	ldr	r3, [pc, #172]	; (8006150 <RCCEx_PLLSAI2_Config+0x1e0>)
 80060a4:	4013      	ands	r3, r2
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	6892      	ldr	r2, [r2, #8]
 80060aa:	0211      	lsls	r1, r2, #8
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	6912      	ldr	r2, [r2, #16]
 80060b0:	0852      	lsrs	r2, r2, #1
 80060b2:	3a01      	subs	r2, #1
 80060b4:	0552      	lsls	r2, r2, #21
 80060b6:	4311      	orrs	r1, r2
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	6852      	ldr	r2, [r2, #4]
 80060bc:	3a01      	subs	r2, #1
 80060be:	0112      	lsls	r2, r2, #4
 80060c0:	430a      	orrs	r2, r1
 80060c2:	4921      	ldr	r1, [pc, #132]	; (8006148 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	614b      	str	r3, [r1, #20]
 80060c8:	e014      	b.n	80060f4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80060ca:	4b1f      	ldr	r3, [pc, #124]	; (8006148 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060cc:	695a      	ldr	r2, [r3, #20]
 80060ce:	4b21      	ldr	r3, [pc, #132]	; (8006154 <RCCEx_PLLSAI2_Config+0x1e4>)
 80060d0:	4013      	ands	r3, r2
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	6892      	ldr	r2, [r2, #8]
 80060d6:	0211      	lsls	r1, r2, #8
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	6952      	ldr	r2, [r2, #20]
 80060dc:	0852      	lsrs	r2, r2, #1
 80060de:	3a01      	subs	r2, #1
 80060e0:	0652      	lsls	r2, r2, #25
 80060e2:	4311      	orrs	r1, r2
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	6852      	ldr	r2, [r2, #4]
 80060e8:	3a01      	subs	r2, #1
 80060ea:	0112      	lsls	r2, r2, #4
 80060ec:	430a      	orrs	r2, r1
 80060ee:	4916      	ldr	r1, [pc, #88]	; (8006148 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80060f4:	4b14      	ldr	r3, [pc, #80]	; (8006148 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a13      	ldr	r2, [pc, #76]	; (8006148 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006100:	f7fc f898 	bl	8002234 <HAL_GetTick>
 8006104:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006106:	e009      	b.n	800611c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006108:	f7fc f894 	bl	8002234 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	2b02      	cmp	r3, #2
 8006114:	d902      	bls.n	800611c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	73fb      	strb	r3, [r7, #15]
          break;
 800611a:	e005      	b.n	8006128 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800611c:	4b0a      	ldr	r3, [pc, #40]	; (8006148 <RCCEx_PLLSAI2_Config+0x1d8>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d0ef      	beq.n	8006108 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006128:	7bfb      	ldrb	r3, [r7, #15]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d106      	bne.n	800613c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800612e:	4b06      	ldr	r3, [pc, #24]	; (8006148 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006130:	695a      	ldr	r2, [r3, #20]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	4904      	ldr	r1, [pc, #16]	; (8006148 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006138:	4313      	orrs	r3, r2
 800613a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800613c:	7bfb      	ldrb	r3, [r7, #15]
}
 800613e:	4618      	mov	r0, r3
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	40021000 	.word	0x40021000
 800614c:	07ff800f 	.word	0x07ff800f
 8006150:	ff9f800f 	.word	0xff9f800f
 8006154:	f9ff800f 	.word	0xf9ff800f

08006158 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e095      	b.n	8006296 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616e:	2b00      	cmp	r3, #0
 8006170:	d108      	bne.n	8006184 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800617a:	d009      	beq.n	8006190 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	61da      	str	r2, [r3, #28]
 8006182:	e005      	b.n	8006190 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d106      	bne.n	80061b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7fb fdb2 	bl	8001d14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2202      	movs	r2, #2
 80061b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061d0:	d902      	bls.n	80061d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80061d2:	2300      	movs	r3, #0
 80061d4:	60fb      	str	r3, [r7, #12]
 80061d6:	e002      	b.n	80061de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80061d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80061e6:	d007      	beq.n	80061f8 <HAL_SPI_Init+0xa0>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061f0:	d002      	beq.n	80061f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006208:	431a      	orrs	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	431a      	orrs	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	431a      	orrs	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006226:	431a      	orrs	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	69db      	ldr	r3, [r3, #28]
 800622c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006230:	431a      	orrs	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800623a:	ea42 0103 	orr.w	r1, r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006242:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	0c1b      	lsrs	r3, r3, #16
 8006254:	f003 0204 	and.w	r2, r3, #4
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625c:	f003 0310 	and.w	r3, r3, #16
 8006260:	431a      	orrs	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006266:	f003 0308 	and.w	r3, r3, #8
 800626a:	431a      	orrs	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006274:	ea42 0103 	orr.w	r1, r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	430a      	orrs	r2, r1
 8006284:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b088      	sub	sp, #32
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	60f8      	str	r0, [r7, #12]
 80062a6:	60b9      	str	r1, [r7, #8]
 80062a8:	603b      	str	r3, [r7, #0]
 80062aa:	4613      	mov	r3, r2
 80062ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d101      	bne.n	80062c0 <HAL_SPI_Transmit+0x22>
 80062bc:	2302      	movs	r3, #2
 80062be:	e15f      	b.n	8006580 <HAL_SPI_Transmit+0x2e2>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062c8:	f7fb ffb4 	bl	8002234 <HAL_GetTick>
 80062cc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80062ce:	88fb      	ldrh	r3, [r7, #6]
 80062d0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d002      	beq.n	80062e4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80062de:	2302      	movs	r3, #2
 80062e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80062e2:	e148      	b.n	8006576 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d002      	beq.n	80062f0 <HAL_SPI_Transmit+0x52>
 80062ea:	88fb      	ldrh	r3, [r7, #6]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d102      	bne.n	80062f6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80062f4:	e13f      	b.n	8006576 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2203      	movs	r2, #3
 80062fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	88fa      	ldrh	r2, [r7, #6]
 800630e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	88fa      	ldrh	r2, [r7, #6]
 8006314:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006340:	d10f      	bne.n	8006362 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006350:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006360:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800636c:	2b40      	cmp	r3, #64	; 0x40
 800636e:	d007      	beq.n	8006380 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800637e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006388:	d94f      	bls.n	800642a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d002      	beq.n	8006398 <HAL_SPI_Transmit+0xfa>
 8006392:	8afb      	ldrh	r3, [r7, #22]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d142      	bne.n	800641e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639c:	881a      	ldrh	r2, [r3, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a8:	1c9a      	adds	r2, r3, #2
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	3b01      	subs	r3, #1
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80063bc:	e02f      	b.n	800641e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d112      	bne.n	80063f2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d0:	881a      	ldrh	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063dc:	1c9a      	adds	r2, r3, #2
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	3b01      	subs	r3, #1
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063f0:	e015      	b.n	800641e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063f2:	f7fb ff1f 	bl	8002234 <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d803      	bhi.n	800640a <HAL_SPI_Transmit+0x16c>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006408:	d102      	bne.n	8006410 <HAL_SPI_Transmit+0x172>
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d106      	bne.n	800641e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800641c:	e0ab      	b.n	8006576 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006422:	b29b      	uxth	r3, r3
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1ca      	bne.n	80063be <HAL_SPI_Transmit+0x120>
 8006428:	e080      	b.n	800652c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d002      	beq.n	8006438 <HAL_SPI_Transmit+0x19a>
 8006432:	8afb      	ldrh	r3, [r7, #22]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d174      	bne.n	8006522 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800643c:	b29b      	uxth	r3, r3
 800643e:	2b01      	cmp	r3, #1
 8006440:	d912      	bls.n	8006468 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006446:	881a      	ldrh	r2, [r3, #0]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006452:	1c9a      	adds	r2, r3, #2
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800645c:	b29b      	uxth	r3, r3
 800645e:	3b02      	subs	r3, #2
 8006460:	b29a      	uxth	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006466:	e05c      	b.n	8006522 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	330c      	adds	r3, #12
 8006472:	7812      	ldrb	r2, [r2, #0]
 8006474:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647a:	1c5a      	adds	r2, r3, #1
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006484:	b29b      	uxth	r3, r3
 8006486:	3b01      	subs	r3, #1
 8006488:	b29a      	uxth	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800648e:	e048      	b.n	8006522 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	2b02      	cmp	r3, #2
 800649c:	d12b      	bne.n	80064f6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d912      	bls.n	80064ce <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ac:	881a      	ldrh	r2, [r3, #0]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b8:	1c9a      	adds	r2, r3, #2
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	3b02      	subs	r3, #2
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064cc:	e029      	b.n	8006522 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	330c      	adds	r3, #12
 80064d8:	7812      	ldrb	r2, [r2, #0]
 80064da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e0:	1c5a      	adds	r2, r3, #1
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	3b01      	subs	r3, #1
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064f4:	e015      	b.n	8006522 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064f6:	f7fb fe9d 	bl	8002234 <HAL_GetTick>
 80064fa:	4602      	mov	r2, r0
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	429a      	cmp	r2, r3
 8006504:	d803      	bhi.n	800650e <HAL_SPI_Transmit+0x270>
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800650c:	d102      	bne.n	8006514 <HAL_SPI_Transmit+0x276>
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d106      	bne.n	8006522 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006520:	e029      	b.n	8006576 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006526:	b29b      	uxth	r3, r3
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1b1      	bne.n	8006490 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800652c:	69ba      	ldr	r2, [r7, #24]
 800652e:	6839      	ldr	r1, [r7, #0]
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f000 fb69 	bl	8006c08 <SPI_EndRxTxTransaction>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d002      	beq.n	8006542 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2220      	movs	r2, #32
 8006540:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10a      	bne.n	8006560 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800654a:	2300      	movs	r3, #0
 800654c:	613b      	str	r3, [r7, #16]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	613b      	str	r3, [r7, #16]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	613b      	str	r3, [r7, #16]
 800655e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	77fb      	strb	r3, [r7, #31]
 800656c:	e003      	b.n	8006576 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800657e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3720      	adds	r7, #32
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b08a      	sub	sp, #40	; 0x28
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
 8006594:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006596:	2301      	movs	r3, #1
 8006598:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800659a:	2300      	movs	r3, #0
 800659c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d101      	bne.n	80065ae <HAL_SPI_TransmitReceive+0x26>
 80065aa:	2302      	movs	r3, #2
 80065ac:	e20a      	b.n	80069c4 <HAL_SPI_TransmitReceive+0x43c>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065b6:	f7fb fe3d 	bl	8002234 <HAL_GetTick>
 80065ba:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80065c2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80065ca:	887b      	ldrh	r3, [r7, #2]
 80065cc:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80065ce:	887b      	ldrh	r3, [r7, #2]
 80065d0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80065d2:	7efb      	ldrb	r3, [r7, #27]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d00e      	beq.n	80065f6 <HAL_SPI_TransmitReceive+0x6e>
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065de:	d106      	bne.n	80065ee <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d102      	bne.n	80065ee <HAL_SPI_TransmitReceive+0x66>
 80065e8:	7efb      	ldrb	r3, [r7, #27]
 80065ea:	2b04      	cmp	r3, #4
 80065ec:	d003      	beq.n	80065f6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80065ee:	2302      	movs	r3, #2
 80065f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80065f4:	e1e0      	b.n	80069b8 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d005      	beq.n	8006608 <HAL_SPI_TransmitReceive+0x80>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d002      	beq.n	8006608 <HAL_SPI_TransmitReceive+0x80>
 8006602:	887b      	ldrh	r3, [r7, #2]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d103      	bne.n	8006610 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800660e:	e1d3      	b.n	80069b8 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b04      	cmp	r3, #4
 800661a:	d003      	beq.n	8006624 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2205      	movs	r2, #5
 8006620:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	887a      	ldrh	r2, [r7, #2]
 8006634:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	887a      	ldrh	r2, [r7, #2]
 800663c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	887a      	ldrh	r2, [r7, #2]
 800664a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	887a      	ldrh	r2, [r7, #2]
 8006650:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006666:	d802      	bhi.n	800666e <HAL_SPI_TransmitReceive+0xe6>
 8006668:	8a3b      	ldrh	r3, [r7, #16]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d908      	bls.n	8006680 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	685a      	ldr	r2, [r3, #4]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800667c:	605a      	str	r2, [r3, #4]
 800667e:	e007      	b.n	8006690 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800668e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669a:	2b40      	cmp	r3, #64	; 0x40
 800669c:	d007      	beq.n	80066ae <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066b6:	f240 8081 	bls.w	80067bc <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d002      	beq.n	80066c8 <HAL_SPI_TransmitReceive+0x140>
 80066c2:	8a7b      	ldrh	r3, [r7, #18]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d16d      	bne.n	80067a4 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066cc:	881a      	ldrh	r2, [r3, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d8:	1c9a      	adds	r2, r3, #2
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	3b01      	subs	r3, #1
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066ec:	e05a      	b.n	80067a4 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	f003 0302 	and.w	r3, r3, #2
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d11b      	bne.n	8006734 <HAL_SPI_TransmitReceive+0x1ac>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006700:	b29b      	uxth	r3, r3
 8006702:	2b00      	cmp	r3, #0
 8006704:	d016      	beq.n	8006734 <HAL_SPI_TransmitReceive+0x1ac>
 8006706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006708:	2b01      	cmp	r3, #1
 800670a:	d113      	bne.n	8006734 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006710:	881a      	ldrh	r2, [r3, #0]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671c:	1c9a      	adds	r2, r3, #2
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006726:	b29b      	uxth	r3, r3
 8006728:	3b01      	subs	r3, #1
 800672a:	b29a      	uxth	r2, r3
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006730:	2300      	movs	r3, #0
 8006732:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b01      	cmp	r3, #1
 8006740:	d11c      	bne.n	800677c <HAL_SPI_TransmitReceive+0x1f4>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006748:	b29b      	uxth	r3, r3
 800674a:	2b00      	cmp	r3, #0
 800674c:	d016      	beq.n	800677c <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68da      	ldr	r2, [r3, #12]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006758:	b292      	uxth	r2, r2
 800675a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006760:	1c9a      	adds	r2, r3, #2
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800676c:	b29b      	uxth	r3, r3
 800676e:	3b01      	subs	r3, #1
 8006770:	b29a      	uxth	r2, r3
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006778:	2301      	movs	r3, #1
 800677a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800677c:	f7fb fd5a 	bl	8002234 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006788:	429a      	cmp	r2, r3
 800678a:	d80b      	bhi.n	80067a4 <HAL_SPI_TransmitReceive+0x21c>
 800678c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006792:	d007      	beq.n	80067a4 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80067a2:	e109      	b.n	80069b8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d19f      	bne.n	80066ee <HAL_SPI_TransmitReceive+0x166>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d199      	bne.n	80066ee <HAL_SPI_TransmitReceive+0x166>
 80067ba:	e0e3      	b.n	8006984 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d003      	beq.n	80067cc <HAL_SPI_TransmitReceive+0x244>
 80067c4:	8a7b      	ldrh	r3, [r7, #18]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	f040 80cf 	bne.w	800696a <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d912      	bls.n	80067fc <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067da:	881a      	ldrh	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e6:	1c9a      	adds	r2, r3, #2
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	3b02      	subs	r3, #2
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80067fa:	e0b6      	b.n	800696a <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	330c      	adds	r3, #12
 8006806:	7812      	ldrb	r2, [r2, #0]
 8006808:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680e:	1c5a      	adds	r2, r3, #1
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006818:	b29b      	uxth	r3, r3
 800681a:	3b01      	subs	r3, #1
 800681c:	b29a      	uxth	r2, r3
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006822:	e0a2      	b.n	800696a <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	2b02      	cmp	r3, #2
 8006830:	d134      	bne.n	800689c <HAL_SPI_TransmitReceive+0x314>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006836:	b29b      	uxth	r3, r3
 8006838:	2b00      	cmp	r3, #0
 800683a:	d02f      	beq.n	800689c <HAL_SPI_TransmitReceive+0x314>
 800683c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683e:	2b01      	cmp	r3, #1
 8006840:	d12c      	bne.n	800689c <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006846:	b29b      	uxth	r3, r3
 8006848:	2b01      	cmp	r3, #1
 800684a:	d912      	bls.n	8006872 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006850:	881a      	ldrh	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685c:	1c9a      	adds	r2, r3, #2
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006866:	b29b      	uxth	r3, r3
 8006868:	3b02      	subs	r3, #2
 800686a:	b29a      	uxth	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006870:	e012      	b.n	8006898 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	330c      	adds	r3, #12
 800687c:	7812      	ldrb	r2, [r2, #0]
 800687e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006884:	1c5a      	adds	r2, r3, #1
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800688e:	b29b      	uxth	r3, r3
 8006890:	3b01      	subs	r3, #1
 8006892:	b29a      	uxth	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006898:	2300      	movs	r3, #0
 800689a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d148      	bne.n	800693c <HAL_SPI_TransmitReceive+0x3b4>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d042      	beq.n	800693c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068bc:	b29b      	uxth	r3, r3
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d923      	bls.n	800690a <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68da      	ldr	r2, [r3, #12]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068cc:	b292      	uxth	r2, r2
 80068ce:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d4:	1c9a      	adds	r2, r3, #2
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	3b02      	subs	r3, #2
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d81f      	bhi.n	8006938 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	685a      	ldr	r2, [r3, #4]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006906:	605a      	str	r2, [r3, #4]
 8006908:	e016      	b.n	8006938 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f103 020c 	add.w	r2, r3, #12
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006916:	7812      	ldrb	r2, [r2, #0]
 8006918:	b2d2      	uxtb	r2, r2
 800691a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006920:	1c5a      	adds	r2, r3, #1
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800692c:	b29b      	uxth	r3, r3
 800692e:	3b01      	subs	r3, #1
 8006930:	b29a      	uxth	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006938:	2301      	movs	r3, #1
 800693a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800693c:	f7fb fc7a 	bl	8002234 <HAL_GetTick>
 8006940:	4602      	mov	r2, r0
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006948:	429a      	cmp	r2, r3
 800694a:	d803      	bhi.n	8006954 <HAL_SPI_TransmitReceive+0x3cc>
 800694c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006952:	d102      	bne.n	800695a <HAL_SPI_TransmitReceive+0x3d2>
 8006954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006956:	2b00      	cmp	r3, #0
 8006958:	d107      	bne.n	800696a <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006968:	e026      	b.n	80069b8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800696e:	b29b      	uxth	r3, r3
 8006970:	2b00      	cmp	r3, #0
 8006972:	f47f af57 	bne.w	8006824 <HAL_SPI_TransmitReceive+0x29c>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800697c:	b29b      	uxth	r3, r3
 800697e:	2b00      	cmp	r3, #0
 8006980:	f47f af50 	bne.w	8006824 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006984:	69fa      	ldr	r2, [r7, #28]
 8006986:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f000 f93d 	bl	8006c08 <SPI_EndRxTxTransaction>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d005      	beq.n	80069a0 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2220      	movs	r2, #32
 800699e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d003      	beq.n	80069b0 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ae:	e003      	b.n	80069b8 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80069c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3728      	adds	r7, #40	; 0x28
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b088      	sub	sp, #32
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	603b      	str	r3, [r7, #0]
 80069d8:	4613      	mov	r3, r2
 80069da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80069dc:	f7fb fc2a 	bl	8002234 <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e4:	1a9b      	subs	r3, r3, r2
 80069e6:	683a      	ldr	r2, [r7, #0]
 80069e8:	4413      	add	r3, r2
 80069ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80069ec:	f7fb fc22 	bl	8002234 <HAL_GetTick>
 80069f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80069f2:	4b39      	ldr	r3, [pc, #228]	; (8006ad8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	015b      	lsls	r3, r3, #5
 80069f8:	0d1b      	lsrs	r3, r3, #20
 80069fa:	69fa      	ldr	r2, [r7, #28]
 80069fc:	fb02 f303 	mul.w	r3, r2, r3
 8006a00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a02:	e054      	b.n	8006aae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0a:	d050      	beq.n	8006aae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a0c:	f7fb fc12 	bl	8002234 <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	69fa      	ldr	r2, [r7, #28]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d902      	bls.n	8006a22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d13d      	bne.n	8006a9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a3a:	d111      	bne.n	8006a60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a44:	d004      	beq.n	8006a50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a4e:	d107      	bne.n	8006a60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a68:	d10f      	bne.n	8006a8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a78:	601a      	str	r2, [r3, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e017      	b.n	8006ace <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d101      	bne.n	8006aa8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689a      	ldr	r2, [r3, #8]
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	bf0c      	ite	eq
 8006abe:	2301      	moveq	r3, #1
 8006ac0:	2300      	movne	r3, #0
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	79fb      	ldrb	r3, [r7, #7]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d19b      	bne.n	8006a04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3720      	adds	r7, #32
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	20000000 	.word	0x20000000

08006adc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b08a      	sub	sp, #40	; 0x28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
 8006ae8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006aea:	2300      	movs	r3, #0
 8006aec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006aee:	f7fb fba1 	bl	8002234 <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af6:	1a9b      	subs	r3, r3, r2
 8006af8:	683a      	ldr	r2, [r7, #0]
 8006afa:	4413      	add	r3, r2
 8006afc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006afe:	f7fb fb99 	bl	8002234 <HAL_GetTick>
 8006b02:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	330c      	adds	r3, #12
 8006b0a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006b0c:	4b3d      	ldr	r3, [pc, #244]	; (8006c04 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	4613      	mov	r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	00da      	lsls	r2, r3, #3
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	0d1b      	lsrs	r3, r3, #20
 8006b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b1e:	fb02 f303 	mul.w	r3, r2, r3
 8006b22:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006b24:	e060      	b.n	8006be8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006b2c:	d107      	bne.n	8006b3e <SPI_WaitFifoStateUntilTimeout+0x62>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d104      	bne.n	8006b3e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006b3c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b44:	d050      	beq.n	8006be8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b46:	f7fb fb75 	bl	8002234 <HAL_GetTick>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d902      	bls.n	8006b5c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d13d      	bne.n	8006bd8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	685a      	ldr	r2, [r3, #4]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b74:	d111      	bne.n	8006b9a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b7e:	d004      	beq.n	8006b8a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b88:	d107      	bne.n	8006b9a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ba2:	d10f      	bne.n	8006bc4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bc2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e010      	b.n	8006bfa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006bde:	2300      	movs	r3, #0
 8006be0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	3b01      	subs	r3, #1
 8006be6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	689a      	ldr	r2, [r3, #8]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d196      	bne.n	8006b26 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3728      	adds	r7, #40	; 0x28
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	20000000 	.word	0x20000000

08006c08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af02      	add	r7, sp, #8
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	9300      	str	r3, [sp, #0]
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f7ff ff5b 	bl	8006adc <SPI_WaitFifoStateUntilTimeout>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d007      	beq.n	8006c3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c30:	f043 0220 	orr.w	r2, r3, #32
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e027      	b.n	8006c8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	2200      	movs	r2, #0
 8006c44:	2180      	movs	r1, #128	; 0x80
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f7ff fec0 	bl	80069cc <SPI_WaitFlagStateUntilTimeout>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d007      	beq.n	8006c62 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c56:	f043 0220 	orr.w	r2, r3, #32
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e014      	b.n	8006c8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006c6e:	68f8      	ldr	r0, [r7, #12]
 8006c70:	f7ff ff34 	bl	8006adc <SPI_WaitFifoStateUntilTimeout>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d007      	beq.n	8006c8a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c7e:	f043 0220 	orr.w	r2, r3, #32
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e000      	b.n	8006c8c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e042      	b.n	8006d2c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d106      	bne.n	8006cbe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f7fb f94b 	bl	8001f54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2224      	movs	r2, #36	; 0x24
 8006cc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f022 0201 	bic.w	r2, r2, #1
 8006cd4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d002      	beq.n	8006ce4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 fbb4 	bl	800744c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 f8b5 	bl	8006e54 <UART_SetConfig>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d101      	bne.n	8006cf4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e01b      	b.n	8006d2c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	685a      	ldr	r2, [r3, #4]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689a      	ldr	r2, [r3, #8]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f042 0201 	orr.w	r2, r2, #1
 8006d22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fc33 	bl	8007590 <UART_CheckIdleState>
 8006d2a:	4603      	mov	r3, r0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b08a      	sub	sp, #40	; 0x28
 8006d38:	af02      	add	r7, sp, #8
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	603b      	str	r3, [r7, #0]
 8006d40:	4613      	mov	r3, r2
 8006d42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d4a:	2b20      	cmp	r3, #32
 8006d4c:	d17c      	bne.n	8006e48 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d002      	beq.n	8006d5a <HAL_UART_Transmit+0x26>
 8006d54:	88fb      	ldrh	r3, [r7, #6]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e075      	b.n	8006e4a <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2221      	movs	r2, #33	; 0x21
 8006d6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d6e:	f7fb fa61 	bl	8002234 <HAL_GetTick>
 8006d72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	88fa      	ldrh	r2, [r7, #6]
 8006d78:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	88fa      	ldrh	r2, [r7, #6]
 8006d80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d8c:	d108      	bne.n	8006da0 <HAL_UART_Transmit+0x6c>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d104      	bne.n	8006da0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006d96:	2300      	movs	r3, #0
 8006d98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	61bb      	str	r3, [r7, #24]
 8006d9e:	e003      	b.n	8006da8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006da4:	2300      	movs	r3, #0
 8006da6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006da8:	e031      	b.n	8006e0e <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	9300      	str	r3, [sp, #0]
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	2200      	movs	r2, #0
 8006db2:	2180      	movs	r1, #128	; 0x80
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f000 fc95 	bl	80076e4 <UART_WaitOnFlagUntilTimeout>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d005      	beq.n	8006dcc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e03e      	b.n	8006e4a <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10b      	bne.n	8006dea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	881a      	ldrh	r2, [r3, #0]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dde:	b292      	uxth	r2, r2
 8006de0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	3302      	adds	r3, #2
 8006de6:	61bb      	str	r3, [r7, #24]
 8006de8:	e008      	b.n	8006dfc <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	781a      	ldrb	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	b292      	uxth	r2, r2
 8006df4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	3b01      	subs	r3, #1
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1c7      	bne.n	8006daa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	2200      	movs	r2, #0
 8006e22:	2140      	movs	r1, #64	; 0x40
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f000 fc5d 	bl	80076e4 <UART_WaitOnFlagUntilTimeout>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d005      	beq.n	8006e3c <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2220      	movs	r2, #32
 8006e34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	e006      	b.n	8006e4a <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2220      	movs	r2, #32
 8006e40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006e44:	2300      	movs	r3, #0
 8006e46:	e000      	b.n	8006e4a <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8006e48:	2302      	movs	r3, #2
  }
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3720      	adds	r7, #32
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
	...

08006e54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e58:	b08c      	sub	sp, #48	; 0x30
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	689a      	ldr	r2, [r3, #8]
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	431a      	orrs	r2, r3
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	695b      	ldr	r3, [r3, #20]
 8006e72:	431a      	orrs	r2, r3
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	69db      	ldr	r3, [r3, #28]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	4baa      	ldr	r3, [pc, #680]	; (800712c <UART_SetConfig+0x2d8>)
 8006e84:	4013      	ands	r3, r2
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	6812      	ldr	r2, [r2, #0]
 8006e8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e8c:	430b      	orrs	r3, r1
 8006e8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	68da      	ldr	r2, [r3, #12]
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	430a      	orrs	r2, r1
 8006ea4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a9f      	ldr	r2, [pc, #636]	; (8007130 <UART_SetConfig+0x2dc>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d004      	beq.n	8006ec0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006eca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006ece:	697a      	ldr	r2, [r7, #20]
 8006ed0:	6812      	ldr	r2, [r2, #0]
 8006ed2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ed4:	430b      	orrs	r3, r1
 8006ed6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ede:	f023 010f 	bic.w	r1, r3, #15
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	430a      	orrs	r2, r1
 8006eec:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a90      	ldr	r2, [pc, #576]	; (8007134 <UART_SetConfig+0x2e0>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d125      	bne.n	8006f44 <UART_SetConfig+0xf0>
 8006ef8:	4b8f      	ldr	r3, [pc, #572]	; (8007138 <UART_SetConfig+0x2e4>)
 8006efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006efe:	f003 0303 	and.w	r3, r3, #3
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	d81a      	bhi.n	8006f3c <UART_SetConfig+0xe8>
 8006f06:	a201      	add	r2, pc, #4	; (adr r2, 8006f0c <UART_SetConfig+0xb8>)
 8006f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0c:	08006f1d 	.word	0x08006f1d
 8006f10:	08006f2d 	.word	0x08006f2d
 8006f14:	08006f25 	.word	0x08006f25
 8006f18:	08006f35 	.word	0x08006f35
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f22:	e116      	b.n	8007152 <UART_SetConfig+0x2fe>
 8006f24:	2302      	movs	r3, #2
 8006f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f2a:	e112      	b.n	8007152 <UART_SetConfig+0x2fe>
 8006f2c:	2304      	movs	r3, #4
 8006f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f32:	e10e      	b.n	8007152 <UART_SetConfig+0x2fe>
 8006f34:	2308      	movs	r3, #8
 8006f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f3a:	e10a      	b.n	8007152 <UART_SetConfig+0x2fe>
 8006f3c:	2310      	movs	r3, #16
 8006f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f42:	e106      	b.n	8007152 <UART_SetConfig+0x2fe>
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a7c      	ldr	r2, [pc, #496]	; (800713c <UART_SetConfig+0x2e8>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d138      	bne.n	8006fc0 <UART_SetConfig+0x16c>
 8006f4e:	4b7a      	ldr	r3, [pc, #488]	; (8007138 <UART_SetConfig+0x2e4>)
 8006f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f54:	f003 030c 	and.w	r3, r3, #12
 8006f58:	2b0c      	cmp	r3, #12
 8006f5a:	d82d      	bhi.n	8006fb8 <UART_SetConfig+0x164>
 8006f5c:	a201      	add	r2, pc, #4	; (adr r2, 8006f64 <UART_SetConfig+0x110>)
 8006f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f62:	bf00      	nop
 8006f64:	08006f99 	.word	0x08006f99
 8006f68:	08006fb9 	.word	0x08006fb9
 8006f6c:	08006fb9 	.word	0x08006fb9
 8006f70:	08006fb9 	.word	0x08006fb9
 8006f74:	08006fa9 	.word	0x08006fa9
 8006f78:	08006fb9 	.word	0x08006fb9
 8006f7c:	08006fb9 	.word	0x08006fb9
 8006f80:	08006fb9 	.word	0x08006fb9
 8006f84:	08006fa1 	.word	0x08006fa1
 8006f88:	08006fb9 	.word	0x08006fb9
 8006f8c:	08006fb9 	.word	0x08006fb9
 8006f90:	08006fb9 	.word	0x08006fb9
 8006f94:	08006fb1 	.word	0x08006fb1
 8006f98:	2300      	movs	r3, #0
 8006f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f9e:	e0d8      	b.n	8007152 <UART_SetConfig+0x2fe>
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fa6:	e0d4      	b.n	8007152 <UART_SetConfig+0x2fe>
 8006fa8:	2304      	movs	r3, #4
 8006faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fae:	e0d0      	b.n	8007152 <UART_SetConfig+0x2fe>
 8006fb0:	2308      	movs	r3, #8
 8006fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fb6:	e0cc      	b.n	8007152 <UART_SetConfig+0x2fe>
 8006fb8:	2310      	movs	r3, #16
 8006fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fbe:	e0c8      	b.n	8007152 <UART_SetConfig+0x2fe>
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a5e      	ldr	r2, [pc, #376]	; (8007140 <UART_SetConfig+0x2ec>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d125      	bne.n	8007016 <UART_SetConfig+0x1c2>
 8006fca:	4b5b      	ldr	r3, [pc, #364]	; (8007138 <UART_SetConfig+0x2e4>)
 8006fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fd0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006fd4:	2b30      	cmp	r3, #48	; 0x30
 8006fd6:	d016      	beq.n	8007006 <UART_SetConfig+0x1b2>
 8006fd8:	2b30      	cmp	r3, #48	; 0x30
 8006fda:	d818      	bhi.n	800700e <UART_SetConfig+0x1ba>
 8006fdc:	2b20      	cmp	r3, #32
 8006fde:	d00a      	beq.n	8006ff6 <UART_SetConfig+0x1a2>
 8006fe0:	2b20      	cmp	r3, #32
 8006fe2:	d814      	bhi.n	800700e <UART_SetConfig+0x1ba>
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d002      	beq.n	8006fee <UART_SetConfig+0x19a>
 8006fe8:	2b10      	cmp	r3, #16
 8006fea:	d008      	beq.n	8006ffe <UART_SetConfig+0x1aa>
 8006fec:	e00f      	b.n	800700e <UART_SetConfig+0x1ba>
 8006fee:	2300      	movs	r3, #0
 8006ff0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ff4:	e0ad      	b.n	8007152 <UART_SetConfig+0x2fe>
 8006ff6:	2302      	movs	r3, #2
 8006ff8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ffc:	e0a9      	b.n	8007152 <UART_SetConfig+0x2fe>
 8006ffe:	2304      	movs	r3, #4
 8007000:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007004:	e0a5      	b.n	8007152 <UART_SetConfig+0x2fe>
 8007006:	2308      	movs	r3, #8
 8007008:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800700c:	e0a1      	b.n	8007152 <UART_SetConfig+0x2fe>
 800700e:	2310      	movs	r3, #16
 8007010:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007014:	e09d      	b.n	8007152 <UART_SetConfig+0x2fe>
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a4a      	ldr	r2, [pc, #296]	; (8007144 <UART_SetConfig+0x2f0>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d125      	bne.n	800706c <UART_SetConfig+0x218>
 8007020:	4b45      	ldr	r3, [pc, #276]	; (8007138 <UART_SetConfig+0x2e4>)
 8007022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007026:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800702a:	2bc0      	cmp	r3, #192	; 0xc0
 800702c:	d016      	beq.n	800705c <UART_SetConfig+0x208>
 800702e:	2bc0      	cmp	r3, #192	; 0xc0
 8007030:	d818      	bhi.n	8007064 <UART_SetConfig+0x210>
 8007032:	2b80      	cmp	r3, #128	; 0x80
 8007034:	d00a      	beq.n	800704c <UART_SetConfig+0x1f8>
 8007036:	2b80      	cmp	r3, #128	; 0x80
 8007038:	d814      	bhi.n	8007064 <UART_SetConfig+0x210>
 800703a:	2b00      	cmp	r3, #0
 800703c:	d002      	beq.n	8007044 <UART_SetConfig+0x1f0>
 800703e:	2b40      	cmp	r3, #64	; 0x40
 8007040:	d008      	beq.n	8007054 <UART_SetConfig+0x200>
 8007042:	e00f      	b.n	8007064 <UART_SetConfig+0x210>
 8007044:	2300      	movs	r3, #0
 8007046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800704a:	e082      	b.n	8007152 <UART_SetConfig+0x2fe>
 800704c:	2302      	movs	r3, #2
 800704e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007052:	e07e      	b.n	8007152 <UART_SetConfig+0x2fe>
 8007054:	2304      	movs	r3, #4
 8007056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800705a:	e07a      	b.n	8007152 <UART_SetConfig+0x2fe>
 800705c:	2308      	movs	r3, #8
 800705e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007062:	e076      	b.n	8007152 <UART_SetConfig+0x2fe>
 8007064:	2310      	movs	r3, #16
 8007066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800706a:	e072      	b.n	8007152 <UART_SetConfig+0x2fe>
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a35      	ldr	r2, [pc, #212]	; (8007148 <UART_SetConfig+0x2f4>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d12a      	bne.n	80070cc <UART_SetConfig+0x278>
 8007076:	4b30      	ldr	r3, [pc, #192]	; (8007138 <UART_SetConfig+0x2e4>)
 8007078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800707c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007080:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007084:	d01a      	beq.n	80070bc <UART_SetConfig+0x268>
 8007086:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800708a:	d81b      	bhi.n	80070c4 <UART_SetConfig+0x270>
 800708c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007090:	d00c      	beq.n	80070ac <UART_SetConfig+0x258>
 8007092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007096:	d815      	bhi.n	80070c4 <UART_SetConfig+0x270>
 8007098:	2b00      	cmp	r3, #0
 800709a:	d003      	beq.n	80070a4 <UART_SetConfig+0x250>
 800709c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070a0:	d008      	beq.n	80070b4 <UART_SetConfig+0x260>
 80070a2:	e00f      	b.n	80070c4 <UART_SetConfig+0x270>
 80070a4:	2300      	movs	r3, #0
 80070a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070aa:	e052      	b.n	8007152 <UART_SetConfig+0x2fe>
 80070ac:	2302      	movs	r3, #2
 80070ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070b2:	e04e      	b.n	8007152 <UART_SetConfig+0x2fe>
 80070b4:	2304      	movs	r3, #4
 80070b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ba:	e04a      	b.n	8007152 <UART_SetConfig+0x2fe>
 80070bc:	2308      	movs	r3, #8
 80070be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070c2:	e046      	b.n	8007152 <UART_SetConfig+0x2fe>
 80070c4:	2310      	movs	r3, #16
 80070c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ca:	e042      	b.n	8007152 <UART_SetConfig+0x2fe>
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a17      	ldr	r2, [pc, #92]	; (8007130 <UART_SetConfig+0x2dc>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d13a      	bne.n	800714c <UART_SetConfig+0x2f8>
 80070d6:	4b18      	ldr	r3, [pc, #96]	; (8007138 <UART_SetConfig+0x2e4>)
 80070d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80070e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070e4:	d01a      	beq.n	800711c <UART_SetConfig+0x2c8>
 80070e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070ea:	d81b      	bhi.n	8007124 <UART_SetConfig+0x2d0>
 80070ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070f0:	d00c      	beq.n	800710c <UART_SetConfig+0x2b8>
 80070f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070f6:	d815      	bhi.n	8007124 <UART_SetConfig+0x2d0>
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d003      	beq.n	8007104 <UART_SetConfig+0x2b0>
 80070fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007100:	d008      	beq.n	8007114 <UART_SetConfig+0x2c0>
 8007102:	e00f      	b.n	8007124 <UART_SetConfig+0x2d0>
 8007104:	2300      	movs	r3, #0
 8007106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800710a:	e022      	b.n	8007152 <UART_SetConfig+0x2fe>
 800710c:	2302      	movs	r3, #2
 800710e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007112:	e01e      	b.n	8007152 <UART_SetConfig+0x2fe>
 8007114:	2304      	movs	r3, #4
 8007116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800711a:	e01a      	b.n	8007152 <UART_SetConfig+0x2fe>
 800711c:	2308      	movs	r3, #8
 800711e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007122:	e016      	b.n	8007152 <UART_SetConfig+0x2fe>
 8007124:	2310      	movs	r3, #16
 8007126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800712a:	e012      	b.n	8007152 <UART_SetConfig+0x2fe>
 800712c:	cfff69f3 	.word	0xcfff69f3
 8007130:	40008000 	.word	0x40008000
 8007134:	40013800 	.word	0x40013800
 8007138:	40021000 	.word	0x40021000
 800713c:	40004400 	.word	0x40004400
 8007140:	40004800 	.word	0x40004800
 8007144:	40004c00 	.word	0x40004c00
 8007148:	40005000 	.word	0x40005000
 800714c:	2310      	movs	r3, #16
 800714e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4aae      	ldr	r2, [pc, #696]	; (8007410 <UART_SetConfig+0x5bc>)
 8007158:	4293      	cmp	r3, r2
 800715a:	f040 8097 	bne.w	800728c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800715e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007162:	2b08      	cmp	r3, #8
 8007164:	d823      	bhi.n	80071ae <UART_SetConfig+0x35a>
 8007166:	a201      	add	r2, pc, #4	; (adr r2, 800716c <UART_SetConfig+0x318>)
 8007168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800716c:	08007191 	.word	0x08007191
 8007170:	080071af 	.word	0x080071af
 8007174:	08007199 	.word	0x08007199
 8007178:	080071af 	.word	0x080071af
 800717c:	0800719f 	.word	0x0800719f
 8007180:	080071af 	.word	0x080071af
 8007184:	080071af 	.word	0x080071af
 8007188:	080071af 	.word	0x080071af
 800718c:	080071a7 	.word	0x080071a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007190:	f7fe f97e 	bl	8005490 <HAL_RCC_GetPCLK1Freq>
 8007194:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007196:	e010      	b.n	80071ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007198:	4b9e      	ldr	r3, [pc, #632]	; (8007414 <UART_SetConfig+0x5c0>)
 800719a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800719c:	e00d      	b.n	80071ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800719e:	f7fe f8df 	bl	8005360 <HAL_RCC_GetSysClockFreq>
 80071a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071a4:	e009      	b.n	80071ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80071ac:	e005      	b.n	80071ba <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80071ae:	2300      	movs	r3, #0
 80071b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80071b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80071ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f000 8130 	beq.w	8007422 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c6:	4a94      	ldr	r2, [pc, #592]	; (8007418 <UART_SetConfig+0x5c4>)
 80071c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071cc:	461a      	mov	r2, r3
 80071ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80071d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	685a      	ldr	r2, [r3, #4]
 80071da:	4613      	mov	r3, r2
 80071dc:	005b      	lsls	r3, r3, #1
 80071de:	4413      	add	r3, r2
 80071e0:	69ba      	ldr	r2, [r7, #24]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d305      	bcc.n	80071f2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071ec:	69ba      	ldr	r2, [r7, #24]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d903      	bls.n	80071fa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80071f8:	e113      	b.n	8007422 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fc:	2200      	movs	r2, #0
 80071fe:	60bb      	str	r3, [r7, #8]
 8007200:	60fa      	str	r2, [r7, #12]
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007206:	4a84      	ldr	r2, [pc, #528]	; (8007418 <UART_SetConfig+0x5c4>)
 8007208:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800720c:	b29b      	uxth	r3, r3
 800720e:	2200      	movs	r2, #0
 8007210:	603b      	str	r3, [r7, #0]
 8007212:	607a      	str	r2, [r7, #4]
 8007214:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007218:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800721c:	f7f9 f840 	bl	80002a0 <__aeabi_uldivmod>
 8007220:	4602      	mov	r2, r0
 8007222:	460b      	mov	r3, r1
 8007224:	4610      	mov	r0, r2
 8007226:	4619      	mov	r1, r3
 8007228:	f04f 0200 	mov.w	r2, #0
 800722c:	f04f 0300 	mov.w	r3, #0
 8007230:	020b      	lsls	r3, r1, #8
 8007232:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007236:	0202      	lsls	r2, r0, #8
 8007238:	6979      	ldr	r1, [r7, #20]
 800723a:	6849      	ldr	r1, [r1, #4]
 800723c:	0849      	lsrs	r1, r1, #1
 800723e:	2000      	movs	r0, #0
 8007240:	460c      	mov	r4, r1
 8007242:	4605      	mov	r5, r0
 8007244:	eb12 0804 	adds.w	r8, r2, r4
 8007248:	eb43 0905 	adc.w	r9, r3, r5
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	469a      	mov	sl, r3
 8007254:	4693      	mov	fp, r2
 8007256:	4652      	mov	r2, sl
 8007258:	465b      	mov	r3, fp
 800725a:	4640      	mov	r0, r8
 800725c:	4649      	mov	r1, r9
 800725e:	f7f9 f81f 	bl	80002a0 <__aeabi_uldivmod>
 8007262:	4602      	mov	r2, r0
 8007264:	460b      	mov	r3, r1
 8007266:	4613      	mov	r3, r2
 8007268:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800726a:	6a3b      	ldr	r3, [r7, #32]
 800726c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007270:	d308      	bcc.n	8007284 <UART_SetConfig+0x430>
 8007272:	6a3b      	ldr	r3, [r7, #32]
 8007274:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007278:	d204      	bcs.n	8007284 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6a3a      	ldr	r2, [r7, #32]
 8007280:	60da      	str	r2, [r3, #12]
 8007282:	e0ce      	b.n	8007422 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800728a:	e0ca      	b.n	8007422 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	69db      	ldr	r3, [r3, #28]
 8007290:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007294:	d166      	bne.n	8007364 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007296:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800729a:	2b08      	cmp	r3, #8
 800729c:	d827      	bhi.n	80072ee <UART_SetConfig+0x49a>
 800729e:	a201      	add	r2, pc, #4	; (adr r2, 80072a4 <UART_SetConfig+0x450>)
 80072a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a4:	080072c9 	.word	0x080072c9
 80072a8:	080072d1 	.word	0x080072d1
 80072ac:	080072d9 	.word	0x080072d9
 80072b0:	080072ef 	.word	0x080072ef
 80072b4:	080072df 	.word	0x080072df
 80072b8:	080072ef 	.word	0x080072ef
 80072bc:	080072ef 	.word	0x080072ef
 80072c0:	080072ef 	.word	0x080072ef
 80072c4:	080072e7 	.word	0x080072e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072c8:	f7fe f8e2 	bl	8005490 <HAL_RCC_GetPCLK1Freq>
 80072cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80072ce:	e014      	b.n	80072fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072d0:	f7fe f8f4 	bl	80054bc <HAL_RCC_GetPCLK2Freq>
 80072d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80072d6:	e010      	b.n	80072fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072d8:	4b4e      	ldr	r3, [pc, #312]	; (8007414 <UART_SetConfig+0x5c0>)
 80072da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80072dc:	e00d      	b.n	80072fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072de:	f7fe f83f 	bl	8005360 <HAL_RCC_GetSysClockFreq>
 80072e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80072e4:	e009      	b.n	80072fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80072ec:	e005      	b.n	80072fa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80072ee:	2300      	movs	r3, #0
 80072f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80072f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f000 8090 	beq.w	8007422 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007306:	4a44      	ldr	r2, [pc, #272]	; (8007418 <UART_SetConfig+0x5c4>)
 8007308:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800730c:	461a      	mov	r2, r3
 800730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007310:	fbb3 f3f2 	udiv	r3, r3, r2
 8007314:	005a      	lsls	r2, r3, #1
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	085b      	lsrs	r3, r3, #1
 800731c:	441a      	add	r2, r3
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	fbb2 f3f3 	udiv	r3, r2, r3
 8007326:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007328:	6a3b      	ldr	r3, [r7, #32]
 800732a:	2b0f      	cmp	r3, #15
 800732c:	d916      	bls.n	800735c <UART_SetConfig+0x508>
 800732e:	6a3b      	ldr	r3, [r7, #32]
 8007330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007334:	d212      	bcs.n	800735c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007336:	6a3b      	ldr	r3, [r7, #32]
 8007338:	b29b      	uxth	r3, r3
 800733a:	f023 030f 	bic.w	r3, r3, #15
 800733e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	085b      	lsrs	r3, r3, #1
 8007344:	b29b      	uxth	r3, r3
 8007346:	f003 0307 	and.w	r3, r3, #7
 800734a:	b29a      	uxth	r2, r3
 800734c:	8bfb      	ldrh	r3, [r7, #30]
 800734e:	4313      	orrs	r3, r2
 8007350:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	8bfa      	ldrh	r2, [r7, #30]
 8007358:	60da      	str	r2, [r3, #12]
 800735a:	e062      	b.n	8007422 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007362:	e05e      	b.n	8007422 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007364:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007368:	2b08      	cmp	r3, #8
 800736a:	d828      	bhi.n	80073be <UART_SetConfig+0x56a>
 800736c:	a201      	add	r2, pc, #4	; (adr r2, 8007374 <UART_SetConfig+0x520>)
 800736e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007372:	bf00      	nop
 8007374:	08007399 	.word	0x08007399
 8007378:	080073a1 	.word	0x080073a1
 800737c:	080073a9 	.word	0x080073a9
 8007380:	080073bf 	.word	0x080073bf
 8007384:	080073af 	.word	0x080073af
 8007388:	080073bf 	.word	0x080073bf
 800738c:	080073bf 	.word	0x080073bf
 8007390:	080073bf 	.word	0x080073bf
 8007394:	080073b7 	.word	0x080073b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007398:	f7fe f87a 	bl	8005490 <HAL_RCC_GetPCLK1Freq>
 800739c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800739e:	e014      	b.n	80073ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073a0:	f7fe f88c 	bl	80054bc <HAL_RCC_GetPCLK2Freq>
 80073a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073a6:	e010      	b.n	80073ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073a8:	4b1a      	ldr	r3, [pc, #104]	; (8007414 <UART_SetConfig+0x5c0>)
 80073aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80073ac:	e00d      	b.n	80073ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073ae:	f7fd ffd7 	bl	8005360 <HAL_RCC_GetSysClockFreq>
 80073b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073b4:	e009      	b.n	80073ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80073bc:	e005      	b.n	80073ca <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80073be:	2300      	movs	r3, #0
 80073c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80073c8:	bf00      	nop
    }

    if (pclk != 0U)
 80073ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d028      	beq.n	8007422 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d4:	4a10      	ldr	r2, [pc, #64]	; (8007418 <UART_SetConfig+0x5c4>)
 80073d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073da:	461a      	mov	r2, r3
 80073dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073de:	fbb3 f2f2 	udiv	r2, r3, r2
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	085b      	lsrs	r3, r3, #1
 80073e8:	441a      	add	r2, r3
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	2b0f      	cmp	r3, #15
 80073f8:	d910      	bls.n	800741c <UART_SetConfig+0x5c8>
 80073fa:	6a3b      	ldr	r3, [r7, #32]
 80073fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007400:	d20c      	bcs.n	800741c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007402:	6a3b      	ldr	r3, [r7, #32]
 8007404:	b29a      	uxth	r2, r3
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	60da      	str	r2, [r3, #12]
 800740c:	e009      	b.n	8007422 <UART_SetConfig+0x5ce>
 800740e:	bf00      	nop
 8007410:	40008000 	.word	0x40008000
 8007414:	00f42400 	.word	0x00f42400
 8007418:	08008504 	.word	0x08008504
      }
      else
      {
        ret = HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	2201      	movs	r2, #1
 8007426:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	2201      	movs	r2, #1
 800742e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	2200      	movs	r2, #0
 8007436:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	2200      	movs	r2, #0
 800743c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800743e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007442:	4618      	mov	r0, r3
 8007444:	3730      	adds	r7, #48	; 0x30
 8007446:	46bd      	mov	sp, r7
 8007448:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800744c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007458:	f003 0308 	and.w	r3, r3, #8
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00a      	beq.n	8007476 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	430a      	orrs	r2, r1
 8007474:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747a:	f003 0301 	and.w	r3, r3, #1
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00a      	beq.n	8007498 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	430a      	orrs	r2, r1
 8007496:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749c:	f003 0302 	and.w	r3, r3, #2
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00a      	beq.n	80074ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	430a      	orrs	r2, r1
 80074b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074be:	f003 0304 	and.w	r3, r3, #4
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00a      	beq.n	80074dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	430a      	orrs	r2, r1
 80074da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e0:	f003 0310 	and.w	r3, r3, #16
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00a      	beq.n	80074fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	430a      	orrs	r2, r1
 80074fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007502:	f003 0320 	and.w	r3, r3, #32
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00a      	beq.n	8007520 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	430a      	orrs	r2, r1
 800751e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007528:	2b00      	cmp	r3, #0
 800752a:	d01a      	beq.n	8007562 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	430a      	orrs	r2, r1
 8007540:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007546:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800754a:	d10a      	bne.n	8007562 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	430a      	orrs	r2, r1
 8007560:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00a      	beq.n	8007584 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	430a      	orrs	r2, r1
 8007582:	605a      	str	r2, [r3, #4]
  }
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b098      	sub	sp, #96	; 0x60
 8007594:	af02      	add	r7, sp, #8
 8007596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075a0:	f7fa fe48 	bl	8002234 <HAL_GetTick>
 80075a4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0308 	and.w	r3, r3, #8
 80075b0:	2b08      	cmp	r3, #8
 80075b2:	d12f      	bne.n	8007614 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075bc:	2200      	movs	r2, #0
 80075be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f88e 	bl	80076e4 <UART_WaitOnFlagUntilTimeout>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d022      	beq.n	8007614 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d6:	e853 3f00 	ldrex	r3, [r3]
 80075da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075e2:	653b      	str	r3, [r7, #80]	; 0x50
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	461a      	mov	r2, r3
 80075ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075ec:	647b      	str	r3, [r7, #68]	; 0x44
 80075ee:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075f4:	e841 2300 	strex	r3, r2, [r1]
 80075f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1e6      	bne.n	80075ce <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2220      	movs	r2, #32
 8007604:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007610:	2303      	movs	r3, #3
 8007612:	e063      	b.n	80076dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0304 	and.w	r3, r3, #4
 800761e:	2b04      	cmp	r3, #4
 8007620:	d149      	bne.n	80076b6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007622:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800762a:	2200      	movs	r2, #0
 800762c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 f857 	bl	80076e4 <UART_WaitOnFlagUntilTimeout>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d03c      	beq.n	80076b6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007644:	e853 3f00 	ldrex	r3, [r3]
 8007648:	623b      	str	r3, [r7, #32]
   return(result);
 800764a:	6a3b      	ldr	r3, [r7, #32]
 800764c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007650:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	461a      	mov	r2, r3
 8007658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800765a:	633b      	str	r3, [r7, #48]	; 0x30
 800765c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007662:	e841 2300 	strex	r3, r2, [r1]
 8007666:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1e6      	bne.n	800763c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	3308      	adds	r3, #8
 8007674:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	e853 3f00 	ldrex	r3, [r3]
 800767c:	60fb      	str	r3, [r7, #12]
   return(result);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f023 0301 	bic.w	r3, r3, #1
 8007684:	64bb      	str	r3, [r7, #72]	; 0x48
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	3308      	adds	r3, #8
 800768c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800768e:	61fa      	str	r2, [r7, #28]
 8007690:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007692:	69b9      	ldr	r1, [r7, #24]
 8007694:	69fa      	ldr	r2, [r7, #28]
 8007696:	e841 2300 	strex	r3, r2, [r1]
 800769a:	617b      	str	r3, [r7, #20]
   return(result);
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1e5      	bne.n	800766e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2220      	movs	r2, #32
 80076a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e012      	b.n	80076dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2220      	movs	r2, #32
 80076ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2220      	movs	r2, #32
 80076c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3758      	adds	r7, #88	; 0x58
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	603b      	str	r3, [r7, #0]
 80076f0:	4613      	mov	r3, r2
 80076f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076f4:	e049      	b.n	800778a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076fc:	d045      	beq.n	800778a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076fe:	f7fa fd99 	bl	8002234 <HAL_GetTick>
 8007702:	4602      	mov	r2, r0
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	1ad3      	subs	r3, r2, r3
 8007708:	69ba      	ldr	r2, [r7, #24]
 800770a:	429a      	cmp	r2, r3
 800770c:	d302      	bcc.n	8007714 <UART_WaitOnFlagUntilTimeout+0x30>
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d101      	bne.n	8007718 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007714:	2303      	movs	r3, #3
 8007716:	e048      	b.n	80077aa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0304 	and.w	r3, r3, #4
 8007722:	2b00      	cmp	r3, #0
 8007724:	d031      	beq.n	800778a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	69db      	ldr	r3, [r3, #28]
 800772c:	f003 0308 	and.w	r3, r3, #8
 8007730:	2b08      	cmp	r3, #8
 8007732:	d110      	bne.n	8007756 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2208      	movs	r2, #8
 800773a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f000 f838 	bl	80077b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2208      	movs	r2, #8
 8007746:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e029      	b.n	80077aa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	69db      	ldr	r3, [r3, #28]
 800775c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007760:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007764:	d111      	bne.n	800778a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800776e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f000 f81e 	bl	80077b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2220      	movs	r2, #32
 800777a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007786:	2303      	movs	r3, #3
 8007788:	e00f      	b.n	80077aa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	69da      	ldr	r2, [r3, #28]
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	4013      	ands	r3, r2
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	429a      	cmp	r2, r3
 8007798:	bf0c      	ite	eq
 800779a:	2301      	moveq	r3, #1
 800779c:	2300      	movne	r3, #0
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	461a      	mov	r2, r3
 80077a2:	79fb      	ldrb	r3, [r7, #7]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d0a6      	beq.n	80076f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077b2:	b480      	push	{r7}
 80077b4:	b095      	sub	sp, #84	; 0x54
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c2:	e853 3f00 	ldrex	r3, [r3]
 80077c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	461a      	mov	r2, r3
 80077d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077d8:	643b      	str	r3, [r7, #64]	; 0x40
 80077da:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077e0:	e841 2300 	strex	r3, r2, [r1]
 80077e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1e6      	bne.n	80077ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	3308      	adds	r3, #8
 80077f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f4:	6a3b      	ldr	r3, [r7, #32]
 80077f6:	e853 3f00 	ldrex	r3, [r3]
 80077fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007802:	f023 0301 	bic.w	r3, r3, #1
 8007806:	64bb      	str	r3, [r7, #72]	; 0x48
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	3308      	adds	r3, #8
 800780e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007810:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007812:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007814:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007818:	e841 2300 	strex	r3, r2, [r1]
 800781c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1e3      	bne.n	80077ec <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007828:	2b01      	cmp	r3, #1
 800782a:	d118      	bne.n	800785e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	e853 3f00 	ldrex	r3, [r3]
 8007838:	60bb      	str	r3, [r7, #8]
   return(result);
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	f023 0310 	bic.w	r3, r3, #16
 8007840:	647b      	str	r3, [r7, #68]	; 0x44
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	461a      	mov	r2, r3
 8007848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800784a:	61bb      	str	r3, [r7, #24]
 800784c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784e:	6979      	ldr	r1, [r7, #20]
 8007850:	69ba      	ldr	r2, [r7, #24]
 8007852:	e841 2300 	strex	r3, r2, [r1]
 8007856:	613b      	str	r3, [r7, #16]
   return(result);
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1e6      	bne.n	800782c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2220      	movs	r2, #32
 8007862:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007872:	bf00      	nop
 8007874:	3754      	adds	r7, #84	; 0x54
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800787e:	b480      	push	{r7}
 8007880:	b085      	sub	sp, #20
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800788c:	2b01      	cmp	r3, #1
 800788e:	d101      	bne.n	8007894 <HAL_UARTEx_DisableFifoMode+0x16>
 8007890:	2302      	movs	r3, #2
 8007892:	e027      	b.n	80078e4 <HAL_UARTEx_DisableFifoMode+0x66>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2224      	movs	r2, #36	; 0x24
 80078a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f022 0201 	bic.w	r2, r2, #1
 80078ba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80078c2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2220      	movs	r2, #32
 80078d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3714      	adds	r7, #20
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007900:	2b01      	cmp	r3, #1
 8007902:	d101      	bne.n	8007908 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007904:	2302      	movs	r3, #2
 8007906:	e02d      	b.n	8007964 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2224      	movs	r2, #36	; 0x24
 8007914:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f022 0201 	bic.w	r2, r2, #1
 800792e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	683a      	ldr	r2, [r7, #0]
 8007940:	430a      	orrs	r2, r1
 8007942:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 f84f 	bl	80079e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2220      	movs	r2, #32
 8007956:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800797c:	2b01      	cmp	r3, #1
 800797e:	d101      	bne.n	8007984 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007980:	2302      	movs	r3, #2
 8007982:	e02d      	b.n	80079e0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2224      	movs	r2, #36	; 0x24
 8007990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f022 0201 	bic.w	r2, r2, #1
 80079aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	683a      	ldr	r2, [r7, #0]
 80079bc:	430a      	orrs	r2, r1
 80079be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 f811 	bl	80079e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2220      	movs	r2, #32
 80079d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d108      	bne.n	8007a0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a08:	e031      	b.n	8007a6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a0a:	2308      	movs	r3, #8
 8007a0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a0e:	2308      	movs	r3, #8
 8007a10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	0e5b      	lsrs	r3, r3, #25
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	f003 0307 	and.w	r3, r3, #7
 8007a20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	0f5b      	lsrs	r3, r3, #29
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	f003 0307 	and.w	r3, r3, #7
 8007a30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a32:	7bbb      	ldrb	r3, [r7, #14]
 8007a34:	7b3a      	ldrb	r2, [r7, #12]
 8007a36:	4911      	ldr	r1, [pc, #68]	; (8007a7c <UARTEx_SetNbDataToProcess+0x94>)
 8007a38:	5c8a      	ldrb	r2, [r1, r2]
 8007a3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a3e:	7b3a      	ldrb	r2, [r7, #12]
 8007a40:	490f      	ldr	r1, [pc, #60]	; (8007a80 <UARTEx_SetNbDataToProcess+0x98>)
 8007a42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a44:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a50:	7bfb      	ldrb	r3, [r7, #15]
 8007a52:	7b7a      	ldrb	r2, [r7, #13]
 8007a54:	4909      	ldr	r1, [pc, #36]	; (8007a7c <UARTEx_SetNbDataToProcess+0x94>)
 8007a56:	5c8a      	ldrb	r2, [r1, r2]
 8007a58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a5c:	7b7a      	ldrb	r2, [r7, #13]
 8007a5e:	4908      	ldr	r1, [pc, #32]	; (8007a80 <UARTEx_SetNbDataToProcess+0x98>)
 8007a60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a62:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007a6e:	bf00      	nop
 8007a70:	3714      	adds	r7, #20
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	0800851c 	.word	0x0800851c
 8007a80:	08008524 	.word	0x08008524

08007a84 <siprintf>:
 8007a84:	b40e      	push	{r1, r2, r3}
 8007a86:	b500      	push	{lr}
 8007a88:	b09c      	sub	sp, #112	; 0x70
 8007a8a:	ab1d      	add	r3, sp, #116	; 0x74
 8007a8c:	9002      	str	r0, [sp, #8]
 8007a8e:	9006      	str	r0, [sp, #24]
 8007a90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a94:	4809      	ldr	r0, [pc, #36]	; (8007abc <siprintf+0x38>)
 8007a96:	9107      	str	r1, [sp, #28]
 8007a98:	9104      	str	r1, [sp, #16]
 8007a9a:	4909      	ldr	r1, [pc, #36]	; (8007ac0 <siprintf+0x3c>)
 8007a9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007aa0:	9105      	str	r1, [sp, #20]
 8007aa2:	6800      	ldr	r0, [r0, #0]
 8007aa4:	9301      	str	r3, [sp, #4]
 8007aa6:	a902      	add	r1, sp, #8
 8007aa8:	f000 f992 	bl	8007dd0 <_svfiprintf_r>
 8007aac:	9b02      	ldr	r3, [sp, #8]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	701a      	strb	r2, [r3, #0]
 8007ab2:	b01c      	add	sp, #112	; 0x70
 8007ab4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ab8:	b003      	add	sp, #12
 8007aba:	4770      	bx	lr
 8007abc:	20000058 	.word	0x20000058
 8007ac0:	ffff0208 	.word	0xffff0208

08007ac4 <memset>:
 8007ac4:	4402      	add	r2, r0
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d100      	bne.n	8007ace <memset+0xa>
 8007acc:	4770      	bx	lr
 8007ace:	f803 1b01 	strb.w	r1, [r3], #1
 8007ad2:	e7f9      	b.n	8007ac8 <memset+0x4>

08007ad4 <__errno>:
 8007ad4:	4b01      	ldr	r3, [pc, #4]	; (8007adc <__errno+0x8>)
 8007ad6:	6818      	ldr	r0, [r3, #0]
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	20000058 	.word	0x20000058

08007ae0 <__libc_init_array>:
 8007ae0:	b570      	push	{r4, r5, r6, lr}
 8007ae2:	4d0d      	ldr	r5, [pc, #52]	; (8007b18 <__libc_init_array+0x38>)
 8007ae4:	4c0d      	ldr	r4, [pc, #52]	; (8007b1c <__libc_init_array+0x3c>)
 8007ae6:	1b64      	subs	r4, r4, r5
 8007ae8:	10a4      	asrs	r4, r4, #2
 8007aea:	2600      	movs	r6, #0
 8007aec:	42a6      	cmp	r6, r4
 8007aee:	d109      	bne.n	8007b04 <__libc_init_array+0x24>
 8007af0:	4d0b      	ldr	r5, [pc, #44]	; (8007b20 <__libc_init_array+0x40>)
 8007af2:	4c0c      	ldr	r4, [pc, #48]	; (8007b24 <__libc_init_array+0x44>)
 8007af4:	f000 fc6a 	bl	80083cc <_init>
 8007af8:	1b64      	subs	r4, r4, r5
 8007afa:	10a4      	asrs	r4, r4, #2
 8007afc:	2600      	movs	r6, #0
 8007afe:	42a6      	cmp	r6, r4
 8007b00:	d105      	bne.n	8007b0e <__libc_init_array+0x2e>
 8007b02:	bd70      	pop	{r4, r5, r6, pc}
 8007b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b08:	4798      	blx	r3
 8007b0a:	3601      	adds	r6, #1
 8007b0c:	e7ee      	b.n	8007aec <__libc_init_array+0xc>
 8007b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b12:	4798      	blx	r3
 8007b14:	3601      	adds	r6, #1
 8007b16:	e7f2      	b.n	8007afe <__libc_init_array+0x1e>
 8007b18:	08008568 	.word	0x08008568
 8007b1c:	08008568 	.word	0x08008568
 8007b20:	08008568 	.word	0x08008568
 8007b24:	0800856c 	.word	0x0800856c

08007b28 <__retarget_lock_acquire_recursive>:
 8007b28:	4770      	bx	lr

08007b2a <__retarget_lock_release_recursive>:
 8007b2a:	4770      	bx	lr

08007b2c <_free_r>:
 8007b2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b2e:	2900      	cmp	r1, #0
 8007b30:	d044      	beq.n	8007bbc <_free_r+0x90>
 8007b32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b36:	9001      	str	r0, [sp, #4]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f1a1 0404 	sub.w	r4, r1, #4
 8007b3e:	bfb8      	it	lt
 8007b40:	18e4      	addlt	r4, r4, r3
 8007b42:	f000 f8df 	bl	8007d04 <__malloc_lock>
 8007b46:	4a1e      	ldr	r2, [pc, #120]	; (8007bc0 <_free_r+0x94>)
 8007b48:	9801      	ldr	r0, [sp, #4]
 8007b4a:	6813      	ldr	r3, [r2, #0]
 8007b4c:	b933      	cbnz	r3, 8007b5c <_free_r+0x30>
 8007b4e:	6063      	str	r3, [r4, #4]
 8007b50:	6014      	str	r4, [r2, #0]
 8007b52:	b003      	add	sp, #12
 8007b54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b58:	f000 b8da 	b.w	8007d10 <__malloc_unlock>
 8007b5c:	42a3      	cmp	r3, r4
 8007b5e:	d908      	bls.n	8007b72 <_free_r+0x46>
 8007b60:	6825      	ldr	r5, [r4, #0]
 8007b62:	1961      	adds	r1, r4, r5
 8007b64:	428b      	cmp	r3, r1
 8007b66:	bf01      	itttt	eq
 8007b68:	6819      	ldreq	r1, [r3, #0]
 8007b6a:	685b      	ldreq	r3, [r3, #4]
 8007b6c:	1949      	addeq	r1, r1, r5
 8007b6e:	6021      	streq	r1, [r4, #0]
 8007b70:	e7ed      	b.n	8007b4e <_free_r+0x22>
 8007b72:	461a      	mov	r2, r3
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	b10b      	cbz	r3, 8007b7c <_free_r+0x50>
 8007b78:	42a3      	cmp	r3, r4
 8007b7a:	d9fa      	bls.n	8007b72 <_free_r+0x46>
 8007b7c:	6811      	ldr	r1, [r2, #0]
 8007b7e:	1855      	adds	r5, r2, r1
 8007b80:	42a5      	cmp	r5, r4
 8007b82:	d10b      	bne.n	8007b9c <_free_r+0x70>
 8007b84:	6824      	ldr	r4, [r4, #0]
 8007b86:	4421      	add	r1, r4
 8007b88:	1854      	adds	r4, r2, r1
 8007b8a:	42a3      	cmp	r3, r4
 8007b8c:	6011      	str	r1, [r2, #0]
 8007b8e:	d1e0      	bne.n	8007b52 <_free_r+0x26>
 8007b90:	681c      	ldr	r4, [r3, #0]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	6053      	str	r3, [r2, #4]
 8007b96:	440c      	add	r4, r1
 8007b98:	6014      	str	r4, [r2, #0]
 8007b9a:	e7da      	b.n	8007b52 <_free_r+0x26>
 8007b9c:	d902      	bls.n	8007ba4 <_free_r+0x78>
 8007b9e:	230c      	movs	r3, #12
 8007ba0:	6003      	str	r3, [r0, #0]
 8007ba2:	e7d6      	b.n	8007b52 <_free_r+0x26>
 8007ba4:	6825      	ldr	r5, [r4, #0]
 8007ba6:	1961      	adds	r1, r4, r5
 8007ba8:	428b      	cmp	r3, r1
 8007baa:	bf04      	itt	eq
 8007bac:	6819      	ldreq	r1, [r3, #0]
 8007bae:	685b      	ldreq	r3, [r3, #4]
 8007bb0:	6063      	str	r3, [r4, #4]
 8007bb2:	bf04      	itt	eq
 8007bb4:	1949      	addeq	r1, r1, r5
 8007bb6:	6021      	streq	r1, [r4, #0]
 8007bb8:	6054      	str	r4, [r2, #4]
 8007bba:	e7ca      	b.n	8007b52 <_free_r+0x26>
 8007bbc:	b003      	add	sp, #12
 8007bbe:	bd30      	pop	{r4, r5, pc}
 8007bc0:	20005078 	.word	0x20005078

08007bc4 <sbrk_aligned>:
 8007bc4:	b570      	push	{r4, r5, r6, lr}
 8007bc6:	4e0e      	ldr	r6, [pc, #56]	; (8007c00 <sbrk_aligned+0x3c>)
 8007bc8:	460c      	mov	r4, r1
 8007bca:	6831      	ldr	r1, [r6, #0]
 8007bcc:	4605      	mov	r5, r0
 8007bce:	b911      	cbnz	r1, 8007bd6 <sbrk_aligned+0x12>
 8007bd0:	f000 fba6 	bl	8008320 <_sbrk_r>
 8007bd4:	6030      	str	r0, [r6, #0]
 8007bd6:	4621      	mov	r1, r4
 8007bd8:	4628      	mov	r0, r5
 8007bda:	f000 fba1 	bl	8008320 <_sbrk_r>
 8007bde:	1c43      	adds	r3, r0, #1
 8007be0:	d00a      	beq.n	8007bf8 <sbrk_aligned+0x34>
 8007be2:	1cc4      	adds	r4, r0, #3
 8007be4:	f024 0403 	bic.w	r4, r4, #3
 8007be8:	42a0      	cmp	r0, r4
 8007bea:	d007      	beq.n	8007bfc <sbrk_aligned+0x38>
 8007bec:	1a21      	subs	r1, r4, r0
 8007bee:	4628      	mov	r0, r5
 8007bf0:	f000 fb96 	bl	8008320 <_sbrk_r>
 8007bf4:	3001      	adds	r0, #1
 8007bf6:	d101      	bne.n	8007bfc <sbrk_aligned+0x38>
 8007bf8:	f04f 34ff 	mov.w	r4, #4294967295
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	bd70      	pop	{r4, r5, r6, pc}
 8007c00:	2000507c 	.word	0x2000507c

08007c04 <_malloc_r>:
 8007c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c08:	1ccd      	adds	r5, r1, #3
 8007c0a:	f025 0503 	bic.w	r5, r5, #3
 8007c0e:	3508      	adds	r5, #8
 8007c10:	2d0c      	cmp	r5, #12
 8007c12:	bf38      	it	cc
 8007c14:	250c      	movcc	r5, #12
 8007c16:	2d00      	cmp	r5, #0
 8007c18:	4607      	mov	r7, r0
 8007c1a:	db01      	blt.n	8007c20 <_malloc_r+0x1c>
 8007c1c:	42a9      	cmp	r1, r5
 8007c1e:	d905      	bls.n	8007c2c <_malloc_r+0x28>
 8007c20:	230c      	movs	r3, #12
 8007c22:	603b      	str	r3, [r7, #0]
 8007c24:	2600      	movs	r6, #0
 8007c26:	4630      	mov	r0, r6
 8007c28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c2c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007d00 <_malloc_r+0xfc>
 8007c30:	f000 f868 	bl	8007d04 <__malloc_lock>
 8007c34:	f8d8 3000 	ldr.w	r3, [r8]
 8007c38:	461c      	mov	r4, r3
 8007c3a:	bb5c      	cbnz	r4, 8007c94 <_malloc_r+0x90>
 8007c3c:	4629      	mov	r1, r5
 8007c3e:	4638      	mov	r0, r7
 8007c40:	f7ff ffc0 	bl	8007bc4 <sbrk_aligned>
 8007c44:	1c43      	adds	r3, r0, #1
 8007c46:	4604      	mov	r4, r0
 8007c48:	d155      	bne.n	8007cf6 <_malloc_r+0xf2>
 8007c4a:	f8d8 4000 	ldr.w	r4, [r8]
 8007c4e:	4626      	mov	r6, r4
 8007c50:	2e00      	cmp	r6, #0
 8007c52:	d145      	bne.n	8007ce0 <_malloc_r+0xdc>
 8007c54:	2c00      	cmp	r4, #0
 8007c56:	d048      	beq.n	8007cea <_malloc_r+0xe6>
 8007c58:	6823      	ldr	r3, [r4, #0]
 8007c5a:	4631      	mov	r1, r6
 8007c5c:	4638      	mov	r0, r7
 8007c5e:	eb04 0903 	add.w	r9, r4, r3
 8007c62:	f000 fb5d 	bl	8008320 <_sbrk_r>
 8007c66:	4581      	cmp	r9, r0
 8007c68:	d13f      	bne.n	8007cea <_malloc_r+0xe6>
 8007c6a:	6821      	ldr	r1, [r4, #0]
 8007c6c:	1a6d      	subs	r5, r5, r1
 8007c6e:	4629      	mov	r1, r5
 8007c70:	4638      	mov	r0, r7
 8007c72:	f7ff ffa7 	bl	8007bc4 <sbrk_aligned>
 8007c76:	3001      	adds	r0, #1
 8007c78:	d037      	beq.n	8007cea <_malloc_r+0xe6>
 8007c7a:	6823      	ldr	r3, [r4, #0]
 8007c7c:	442b      	add	r3, r5
 8007c7e:	6023      	str	r3, [r4, #0]
 8007c80:	f8d8 3000 	ldr.w	r3, [r8]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d038      	beq.n	8007cfa <_malloc_r+0xf6>
 8007c88:	685a      	ldr	r2, [r3, #4]
 8007c8a:	42a2      	cmp	r2, r4
 8007c8c:	d12b      	bne.n	8007ce6 <_malloc_r+0xe2>
 8007c8e:	2200      	movs	r2, #0
 8007c90:	605a      	str	r2, [r3, #4]
 8007c92:	e00f      	b.n	8007cb4 <_malloc_r+0xb0>
 8007c94:	6822      	ldr	r2, [r4, #0]
 8007c96:	1b52      	subs	r2, r2, r5
 8007c98:	d41f      	bmi.n	8007cda <_malloc_r+0xd6>
 8007c9a:	2a0b      	cmp	r2, #11
 8007c9c:	d917      	bls.n	8007cce <_malloc_r+0xca>
 8007c9e:	1961      	adds	r1, r4, r5
 8007ca0:	42a3      	cmp	r3, r4
 8007ca2:	6025      	str	r5, [r4, #0]
 8007ca4:	bf18      	it	ne
 8007ca6:	6059      	strne	r1, [r3, #4]
 8007ca8:	6863      	ldr	r3, [r4, #4]
 8007caa:	bf08      	it	eq
 8007cac:	f8c8 1000 	streq.w	r1, [r8]
 8007cb0:	5162      	str	r2, [r4, r5]
 8007cb2:	604b      	str	r3, [r1, #4]
 8007cb4:	4638      	mov	r0, r7
 8007cb6:	f104 060b 	add.w	r6, r4, #11
 8007cba:	f000 f829 	bl	8007d10 <__malloc_unlock>
 8007cbe:	f026 0607 	bic.w	r6, r6, #7
 8007cc2:	1d23      	adds	r3, r4, #4
 8007cc4:	1af2      	subs	r2, r6, r3
 8007cc6:	d0ae      	beq.n	8007c26 <_malloc_r+0x22>
 8007cc8:	1b9b      	subs	r3, r3, r6
 8007cca:	50a3      	str	r3, [r4, r2]
 8007ccc:	e7ab      	b.n	8007c26 <_malloc_r+0x22>
 8007cce:	42a3      	cmp	r3, r4
 8007cd0:	6862      	ldr	r2, [r4, #4]
 8007cd2:	d1dd      	bne.n	8007c90 <_malloc_r+0x8c>
 8007cd4:	f8c8 2000 	str.w	r2, [r8]
 8007cd8:	e7ec      	b.n	8007cb4 <_malloc_r+0xb0>
 8007cda:	4623      	mov	r3, r4
 8007cdc:	6864      	ldr	r4, [r4, #4]
 8007cde:	e7ac      	b.n	8007c3a <_malloc_r+0x36>
 8007ce0:	4634      	mov	r4, r6
 8007ce2:	6876      	ldr	r6, [r6, #4]
 8007ce4:	e7b4      	b.n	8007c50 <_malloc_r+0x4c>
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	e7cc      	b.n	8007c84 <_malloc_r+0x80>
 8007cea:	230c      	movs	r3, #12
 8007cec:	603b      	str	r3, [r7, #0]
 8007cee:	4638      	mov	r0, r7
 8007cf0:	f000 f80e 	bl	8007d10 <__malloc_unlock>
 8007cf4:	e797      	b.n	8007c26 <_malloc_r+0x22>
 8007cf6:	6025      	str	r5, [r4, #0]
 8007cf8:	e7dc      	b.n	8007cb4 <_malloc_r+0xb0>
 8007cfa:	605b      	str	r3, [r3, #4]
 8007cfc:	deff      	udf	#255	; 0xff
 8007cfe:	bf00      	nop
 8007d00:	20005078 	.word	0x20005078

08007d04 <__malloc_lock>:
 8007d04:	4801      	ldr	r0, [pc, #4]	; (8007d0c <__malloc_lock+0x8>)
 8007d06:	f7ff bf0f 	b.w	8007b28 <__retarget_lock_acquire_recursive>
 8007d0a:	bf00      	nop
 8007d0c:	20005074 	.word	0x20005074

08007d10 <__malloc_unlock>:
 8007d10:	4801      	ldr	r0, [pc, #4]	; (8007d18 <__malloc_unlock+0x8>)
 8007d12:	f7ff bf0a 	b.w	8007b2a <__retarget_lock_release_recursive>
 8007d16:	bf00      	nop
 8007d18:	20005074 	.word	0x20005074

08007d1c <__ssputs_r>:
 8007d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d20:	688e      	ldr	r6, [r1, #8]
 8007d22:	461f      	mov	r7, r3
 8007d24:	42be      	cmp	r6, r7
 8007d26:	680b      	ldr	r3, [r1, #0]
 8007d28:	4682      	mov	sl, r0
 8007d2a:	460c      	mov	r4, r1
 8007d2c:	4690      	mov	r8, r2
 8007d2e:	d82c      	bhi.n	8007d8a <__ssputs_r+0x6e>
 8007d30:	898a      	ldrh	r2, [r1, #12]
 8007d32:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d36:	d026      	beq.n	8007d86 <__ssputs_r+0x6a>
 8007d38:	6965      	ldr	r5, [r4, #20]
 8007d3a:	6909      	ldr	r1, [r1, #16]
 8007d3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d40:	eba3 0901 	sub.w	r9, r3, r1
 8007d44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d48:	1c7b      	adds	r3, r7, #1
 8007d4a:	444b      	add	r3, r9
 8007d4c:	106d      	asrs	r5, r5, #1
 8007d4e:	429d      	cmp	r5, r3
 8007d50:	bf38      	it	cc
 8007d52:	461d      	movcc	r5, r3
 8007d54:	0553      	lsls	r3, r2, #21
 8007d56:	d527      	bpl.n	8007da8 <__ssputs_r+0x8c>
 8007d58:	4629      	mov	r1, r5
 8007d5a:	f7ff ff53 	bl	8007c04 <_malloc_r>
 8007d5e:	4606      	mov	r6, r0
 8007d60:	b360      	cbz	r0, 8007dbc <__ssputs_r+0xa0>
 8007d62:	6921      	ldr	r1, [r4, #16]
 8007d64:	464a      	mov	r2, r9
 8007d66:	f000 faeb 	bl	8008340 <memcpy>
 8007d6a:	89a3      	ldrh	r3, [r4, #12]
 8007d6c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d74:	81a3      	strh	r3, [r4, #12]
 8007d76:	6126      	str	r6, [r4, #16]
 8007d78:	6165      	str	r5, [r4, #20]
 8007d7a:	444e      	add	r6, r9
 8007d7c:	eba5 0509 	sub.w	r5, r5, r9
 8007d80:	6026      	str	r6, [r4, #0]
 8007d82:	60a5      	str	r5, [r4, #8]
 8007d84:	463e      	mov	r6, r7
 8007d86:	42be      	cmp	r6, r7
 8007d88:	d900      	bls.n	8007d8c <__ssputs_r+0x70>
 8007d8a:	463e      	mov	r6, r7
 8007d8c:	6820      	ldr	r0, [r4, #0]
 8007d8e:	4632      	mov	r2, r6
 8007d90:	4641      	mov	r1, r8
 8007d92:	f000 faab 	bl	80082ec <memmove>
 8007d96:	68a3      	ldr	r3, [r4, #8]
 8007d98:	1b9b      	subs	r3, r3, r6
 8007d9a:	60a3      	str	r3, [r4, #8]
 8007d9c:	6823      	ldr	r3, [r4, #0]
 8007d9e:	4433      	add	r3, r6
 8007da0:	6023      	str	r3, [r4, #0]
 8007da2:	2000      	movs	r0, #0
 8007da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007da8:	462a      	mov	r2, r5
 8007daa:	f000 fad7 	bl	800835c <_realloc_r>
 8007dae:	4606      	mov	r6, r0
 8007db0:	2800      	cmp	r0, #0
 8007db2:	d1e0      	bne.n	8007d76 <__ssputs_r+0x5a>
 8007db4:	6921      	ldr	r1, [r4, #16]
 8007db6:	4650      	mov	r0, sl
 8007db8:	f7ff feb8 	bl	8007b2c <_free_r>
 8007dbc:	230c      	movs	r3, #12
 8007dbe:	f8ca 3000 	str.w	r3, [sl]
 8007dc2:	89a3      	ldrh	r3, [r4, #12]
 8007dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dc8:	81a3      	strh	r3, [r4, #12]
 8007dca:	f04f 30ff 	mov.w	r0, #4294967295
 8007dce:	e7e9      	b.n	8007da4 <__ssputs_r+0x88>

08007dd0 <_svfiprintf_r>:
 8007dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd4:	4698      	mov	r8, r3
 8007dd6:	898b      	ldrh	r3, [r1, #12]
 8007dd8:	061b      	lsls	r3, r3, #24
 8007dda:	b09d      	sub	sp, #116	; 0x74
 8007ddc:	4607      	mov	r7, r0
 8007dde:	460d      	mov	r5, r1
 8007de0:	4614      	mov	r4, r2
 8007de2:	d50e      	bpl.n	8007e02 <_svfiprintf_r+0x32>
 8007de4:	690b      	ldr	r3, [r1, #16]
 8007de6:	b963      	cbnz	r3, 8007e02 <_svfiprintf_r+0x32>
 8007de8:	2140      	movs	r1, #64	; 0x40
 8007dea:	f7ff ff0b 	bl	8007c04 <_malloc_r>
 8007dee:	6028      	str	r0, [r5, #0]
 8007df0:	6128      	str	r0, [r5, #16]
 8007df2:	b920      	cbnz	r0, 8007dfe <_svfiprintf_r+0x2e>
 8007df4:	230c      	movs	r3, #12
 8007df6:	603b      	str	r3, [r7, #0]
 8007df8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dfc:	e0d0      	b.n	8007fa0 <_svfiprintf_r+0x1d0>
 8007dfe:	2340      	movs	r3, #64	; 0x40
 8007e00:	616b      	str	r3, [r5, #20]
 8007e02:	2300      	movs	r3, #0
 8007e04:	9309      	str	r3, [sp, #36]	; 0x24
 8007e06:	2320      	movs	r3, #32
 8007e08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e10:	2330      	movs	r3, #48	; 0x30
 8007e12:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007fb8 <_svfiprintf_r+0x1e8>
 8007e16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e1a:	f04f 0901 	mov.w	r9, #1
 8007e1e:	4623      	mov	r3, r4
 8007e20:	469a      	mov	sl, r3
 8007e22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e26:	b10a      	cbz	r2, 8007e2c <_svfiprintf_r+0x5c>
 8007e28:	2a25      	cmp	r2, #37	; 0x25
 8007e2a:	d1f9      	bne.n	8007e20 <_svfiprintf_r+0x50>
 8007e2c:	ebba 0b04 	subs.w	fp, sl, r4
 8007e30:	d00b      	beq.n	8007e4a <_svfiprintf_r+0x7a>
 8007e32:	465b      	mov	r3, fp
 8007e34:	4622      	mov	r2, r4
 8007e36:	4629      	mov	r1, r5
 8007e38:	4638      	mov	r0, r7
 8007e3a:	f7ff ff6f 	bl	8007d1c <__ssputs_r>
 8007e3e:	3001      	adds	r0, #1
 8007e40:	f000 80a9 	beq.w	8007f96 <_svfiprintf_r+0x1c6>
 8007e44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e46:	445a      	add	r2, fp
 8007e48:	9209      	str	r2, [sp, #36]	; 0x24
 8007e4a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	f000 80a1 	beq.w	8007f96 <_svfiprintf_r+0x1c6>
 8007e54:	2300      	movs	r3, #0
 8007e56:	f04f 32ff 	mov.w	r2, #4294967295
 8007e5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e5e:	f10a 0a01 	add.w	sl, sl, #1
 8007e62:	9304      	str	r3, [sp, #16]
 8007e64:	9307      	str	r3, [sp, #28]
 8007e66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e6a:	931a      	str	r3, [sp, #104]	; 0x68
 8007e6c:	4654      	mov	r4, sl
 8007e6e:	2205      	movs	r2, #5
 8007e70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e74:	4850      	ldr	r0, [pc, #320]	; (8007fb8 <_svfiprintf_r+0x1e8>)
 8007e76:	f7f8 f9c3 	bl	8000200 <memchr>
 8007e7a:	9a04      	ldr	r2, [sp, #16]
 8007e7c:	b9d8      	cbnz	r0, 8007eb6 <_svfiprintf_r+0xe6>
 8007e7e:	06d0      	lsls	r0, r2, #27
 8007e80:	bf44      	itt	mi
 8007e82:	2320      	movmi	r3, #32
 8007e84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e88:	0711      	lsls	r1, r2, #28
 8007e8a:	bf44      	itt	mi
 8007e8c:	232b      	movmi	r3, #43	; 0x2b
 8007e8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e92:	f89a 3000 	ldrb.w	r3, [sl]
 8007e96:	2b2a      	cmp	r3, #42	; 0x2a
 8007e98:	d015      	beq.n	8007ec6 <_svfiprintf_r+0xf6>
 8007e9a:	9a07      	ldr	r2, [sp, #28]
 8007e9c:	4654      	mov	r4, sl
 8007e9e:	2000      	movs	r0, #0
 8007ea0:	f04f 0c0a 	mov.w	ip, #10
 8007ea4:	4621      	mov	r1, r4
 8007ea6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007eaa:	3b30      	subs	r3, #48	; 0x30
 8007eac:	2b09      	cmp	r3, #9
 8007eae:	d94d      	bls.n	8007f4c <_svfiprintf_r+0x17c>
 8007eb0:	b1b0      	cbz	r0, 8007ee0 <_svfiprintf_r+0x110>
 8007eb2:	9207      	str	r2, [sp, #28]
 8007eb4:	e014      	b.n	8007ee0 <_svfiprintf_r+0x110>
 8007eb6:	eba0 0308 	sub.w	r3, r0, r8
 8007eba:	fa09 f303 	lsl.w	r3, r9, r3
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	9304      	str	r3, [sp, #16]
 8007ec2:	46a2      	mov	sl, r4
 8007ec4:	e7d2      	b.n	8007e6c <_svfiprintf_r+0x9c>
 8007ec6:	9b03      	ldr	r3, [sp, #12]
 8007ec8:	1d19      	adds	r1, r3, #4
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	9103      	str	r1, [sp, #12]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	bfbb      	ittet	lt
 8007ed2:	425b      	neglt	r3, r3
 8007ed4:	f042 0202 	orrlt.w	r2, r2, #2
 8007ed8:	9307      	strge	r3, [sp, #28]
 8007eda:	9307      	strlt	r3, [sp, #28]
 8007edc:	bfb8      	it	lt
 8007ede:	9204      	strlt	r2, [sp, #16]
 8007ee0:	7823      	ldrb	r3, [r4, #0]
 8007ee2:	2b2e      	cmp	r3, #46	; 0x2e
 8007ee4:	d10c      	bne.n	8007f00 <_svfiprintf_r+0x130>
 8007ee6:	7863      	ldrb	r3, [r4, #1]
 8007ee8:	2b2a      	cmp	r3, #42	; 0x2a
 8007eea:	d134      	bne.n	8007f56 <_svfiprintf_r+0x186>
 8007eec:	9b03      	ldr	r3, [sp, #12]
 8007eee:	1d1a      	adds	r2, r3, #4
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	9203      	str	r2, [sp, #12]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	bfb8      	it	lt
 8007ef8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007efc:	3402      	adds	r4, #2
 8007efe:	9305      	str	r3, [sp, #20]
 8007f00:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007fc8 <_svfiprintf_r+0x1f8>
 8007f04:	7821      	ldrb	r1, [r4, #0]
 8007f06:	2203      	movs	r2, #3
 8007f08:	4650      	mov	r0, sl
 8007f0a:	f7f8 f979 	bl	8000200 <memchr>
 8007f0e:	b138      	cbz	r0, 8007f20 <_svfiprintf_r+0x150>
 8007f10:	9b04      	ldr	r3, [sp, #16]
 8007f12:	eba0 000a 	sub.w	r0, r0, sl
 8007f16:	2240      	movs	r2, #64	; 0x40
 8007f18:	4082      	lsls	r2, r0
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	3401      	adds	r4, #1
 8007f1e:	9304      	str	r3, [sp, #16]
 8007f20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f24:	4825      	ldr	r0, [pc, #148]	; (8007fbc <_svfiprintf_r+0x1ec>)
 8007f26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f2a:	2206      	movs	r2, #6
 8007f2c:	f7f8 f968 	bl	8000200 <memchr>
 8007f30:	2800      	cmp	r0, #0
 8007f32:	d038      	beq.n	8007fa6 <_svfiprintf_r+0x1d6>
 8007f34:	4b22      	ldr	r3, [pc, #136]	; (8007fc0 <_svfiprintf_r+0x1f0>)
 8007f36:	bb1b      	cbnz	r3, 8007f80 <_svfiprintf_r+0x1b0>
 8007f38:	9b03      	ldr	r3, [sp, #12]
 8007f3a:	3307      	adds	r3, #7
 8007f3c:	f023 0307 	bic.w	r3, r3, #7
 8007f40:	3308      	adds	r3, #8
 8007f42:	9303      	str	r3, [sp, #12]
 8007f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f46:	4433      	add	r3, r6
 8007f48:	9309      	str	r3, [sp, #36]	; 0x24
 8007f4a:	e768      	b.n	8007e1e <_svfiprintf_r+0x4e>
 8007f4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f50:	460c      	mov	r4, r1
 8007f52:	2001      	movs	r0, #1
 8007f54:	e7a6      	b.n	8007ea4 <_svfiprintf_r+0xd4>
 8007f56:	2300      	movs	r3, #0
 8007f58:	3401      	adds	r4, #1
 8007f5a:	9305      	str	r3, [sp, #20]
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	f04f 0c0a 	mov.w	ip, #10
 8007f62:	4620      	mov	r0, r4
 8007f64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f68:	3a30      	subs	r2, #48	; 0x30
 8007f6a:	2a09      	cmp	r2, #9
 8007f6c:	d903      	bls.n	8007f76 <_svfiprintf_r+0x1a6>
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d0c6      	beq.n	8007f00 <_svfiprintf_r+0x130>
 8007f72:	9105      	str	r1, [sp, #20]
 8007f74:	e7c4      	b.n	8007f00 <_svfiprintf_r+0x130>
 8007f76:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f7a:	4604      	mov	r4, r0
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e7f0      	b.n	8007f62 <_svfiprintf_r+0x192>
 8007f80:	ab03      	add	r3, sp, #12
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	462a      	mov	r2, r5
 8007f86:	4b0f      	ldr	r3, [pc, #60]	; (8007fc4 <_svfiprintf_r+0x1f4>)
 8007f88:	a904      	add	r1, sp, #16
 8007f8a:	4638      	mov	r0, r7
 8007f8c:	f3af 8000 	nop.w
 8007f90:	1c42      	adds	r2, r0, #1
 8007f92:	4606      	mov	r6, r0
 8007f94:	d1d6      	bne.n	8007f44 <_svfiprintf_r+0x174>
 8007f96:	89ab      	ldrh	r3, [r5, #12]
 8007f98:	065b      	lsls	r3, r3, #25
 8007f9a:	f53f af2d 	bmi.w	8007df8 <_svfiprintf_r+0x28>
 8007f9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fa0:	b01d      	add	sp, #116	; 0x74
 8007fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa6:	ab03      	add	r3, sp, #12
 8007fa8:	9300      	str	r3, [sp, #0]
 8007faa:	462a      	mov	r2, r5
 8007fac:	4b05      	ldr	r3, [pc, #20]	; (8007fc4 <_svfiprintf_r+0x1f4>)
 8007fae:	a904      	add	r1, sp, #16
 8007fb0:	4638      	mov	r0, r7
 8007fb2:	f000 f879 	bl	80080a8 <_printf_i>
 8007fb6:	e7eb      	b.n	8007f90 <_svfiprintf_r+0x1c0>
 8007fb8:	0800852c 	.word	0x0800852c
 8007fbc:	08008536 	.word	0x08008536
 8007fc0:	00000000 	.word	0x00000000
 8007fc4:	08007d1d 	.word	0x08007d1d
 8007fc8:	08008532 	.word	0x08008532

08007fcc <_printf_common>:
 8007fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fd0:	4616      	mov	r6, r2
 8007fd2:	4699      	mov	r9, r3
 8007fd4:	688a      	ldr	r2, [r1, #8]
 8007fd6:	690b      	ldr	r3, [r1, #16]
 8007fd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	bfb8      	it	lt
 8007fe0:	4613      	movlt	r3, r2
 8007fe2:	6033      	str	r3, [r6, #0]
 8007fe4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007fe8:	4607      	mov	r7, r0
 8007fea:	460c      	mov	r4, r1
 8007fec:	b10a      	cbz	r2, 8007ff2 <_printf_common+0x26>
 8007fee:	3301      	adds	r3, #1
 8007ff0:	6033      	str	r3, [r6, #0]
 8007ff2:	6823      	ldr	r3, [r4, #0]
 8007ff4:	0699      	lsls	r1, r3, #26
 8007ff6:	bf42      	ittt	mi
 8007ff8:	6833      	ldrmi	r3, [r6, #0]
 8007ffa:	3302      	addmi	r3, #2
 8007ffc:	6033      	strmi	r3, [r6, #0]
 8007ffe:	6825      	ldr	r5, [r4, #0]
 8008000:	f015 0506 	ands.w	r5, r5, #6
 8008004:	d106      	bne.n	8008014 <_printf_common+0x48>
 8008006:	f104 0a19 	add.w	sl, r4, #25
 800800a:	68e3      	ldr	r3, [r4, #12]
 800800c:	6832      	ldr	r2, [r6, #0]
 800800e:	1a9b      	subs	r3, r3, r2
 8008010:	42ab      	cmp	r3, r5
 8008012:	dc26      	bgt.n	8008062 <_printf_common+0x96>
 8008014:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008018:	1e13      	subs	r3, r2, #0
 800801a:	6822      	ldr	r2, [r4, #0]
 800801c:	bf18      	it	ne
 800801e:	2301      	movne	r3, #1
 8008020:	0692      	lsls	r2, r2, #26
 8008022:	d42b      	bmi.n	800807c <_printf_common+0xb0>
 8008024:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008028:	4649      	mov	r1, r9
 800802a:	4638      	mov	r0, r7
 800802c:	47c0      	blx	r8
 800802e:	3001      	adds	r0, #1
 8008030:	d01e      	beq.n	8008070 <_printf_common+0xa4>
 8008032:	6823      	ldr	r3, [r4, #0]
 8008034:	6922      	ldr	r2, [r4, #16]
 8008036:	f003 0306 	and.w	r3, r3, #6
 800803a:	2b04      	cmp	r3, #4
 800803c:	bf02      	ittt	eq
 800803e:	68e5      	ldreq	r5, [r4, #12]
 8008040:	6833      	ldreq	r3, [r6, #0]
 8008042:	1aed      	subeq	r5, r5, r3
 8008044:	68a3      	ldr	r3, [r4, #8]
 8008046:	bf0c      	ite	eq
 8008048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800804c:	2500      	movne	r5, #0
 800804e:	4293      	cmp	r3, r2
 8008050:	bfc4      	itt	gt
 8008052:	1a9b      	subgt	r3, r3, r2
 8008054:	18ed      	addgt	r5, r5, r3
 8008056:	2600      	movs	r6, #0
 8008058:	341a      	adds	r4, #26
 800805a:	42b5      	cmp	r5, r6
 800805c:	d11a      	bne.n	8008094 <_printf_common+0xc8>
 800805e:	2000      	movs	r0, #0
 8008060:	e008      	b.n	8008074 <_printf_common+0xa8>
 8008062:	2301      	movs	r3, #1
 8008064:	4652      	mov	r2, sl
 8008066:	4649      	mov	r1, r9
 8008068:	4638      	mov	r0, r7
 800806a:	47c0      	blx	r8
 800806c:	3001      	adds	r0, #1
 800806e:	d103      	bne.n	8008078 <_printf_common+0xac>
 8008070:	f04f 30ff 	mov.w	r0, #4294967295
 8008074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008078:	3501      	adds	r5, #1
 800807a:	e7c6      	b.n	800800a <_printf_common+0x3e>
 800807c:	18e1      	adds	r1, r4, r3
 800807e:	1c5a      	adds	r2, r3, #1
 8008080:	2030      	movs	r0, #48	; 0x30
 8008082:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008086:	4422      	add	r2, r4
 8008088:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800808c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008090:	3302      	adds	r3, #2
 8008092:	e7c7      	b.n	8008024 <_printf_common+0x58>
 8008094:	2301      	movs	r3, #1
 8008096:	4622      	mov	r2, r4
 8008098:	4649      	mov	r1, r9
 800809a:	4638      	mov	r0, r7
 800809c:	47c0      	blx	r8
 800809e:	3001      	adds	r0, #1
 80080a0:	d0e6      	beq.n	8008070 <_printf_common+0xa4>
 80080a2:	3601      	adds	r6, #1
 80080a4:	e7d9      	b.n	800805a <_printf_common+0x8e>
	...

080080a8 <_printf_i>:
 80080a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080ac:	7e0f      	ldrb	r7, [r1, #24]
 80080ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80080b0:	2f78      	cmp	r7, #120	; 0x78
 80080b2:	4691      	mov	r9, r2
 80080b4:	4680      	mov	r8, r0
 80080b6:	460c      	mov	r4, r1
 80080b8:	469a      	mov	sl, r3
 80080ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80080be:	d807      	bhi.n	80080d0 <_printf_i+0x28>
 80080c0:	2f62      	cmp	r7, #98	; 0x62
 80080c2:	d80a      	bhi.n	80080da <_printf_i+0x32>
 80080c4:	2f00      	cmp	r7, #0
 80080c6:	f000 80d4 	beq.w	8008272 <_printf_i+0x1ca>
 80080ca:	2f58      	cmp	r7, #88	; 0x58
 80080cc:	f000 80c0 	beq.w	8008250 <_printf_i+0x1a8>
 80080d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80080d8:	e03a      	b.n	8008150 <_printf_i+0xa8>
 80080da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80080de:	2b15      	cmp	r3, #21
 80080e0:	d8f6      	bhi.n	80080d0 <_printf_i+0x28>
 80080e2:	a101      	add	r1, pc, #4	; (adr r1, 80080e8 <_printf_i+0x40>)
 80080e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080e8:	08008141 	.word	0x08008141
 80080ec:	08008155 	.word	0x08008155
 80080f0:	080080d1 	.word	0x080080d1
 80080f4:	080080d1 	.word	0x080080d1
 80080f8:	080080d1 	.word	0x080080d1
 80080fc:	080080d1 	.word	0x080080d1
 8008100:	08008155 	.word	0x08008155
 8008104:	080080d1 	.word	0x080080d1
 8008108:	080080d1 	.word	0x080080d1
 800810c:	080080d1 	.word	0x080080d1
 8008110:	080080d1 	.word	0x080080d1
 8008114:	08008259 	.word	0x08008259
 8008118:	08008181 	.word	0x08008181
 800811c:	08008213 	.word	0x08008213
 8008120:	080080d1 	.word	0x080080d1
 8008124:	080080d1 	.word	0x080080d1
 8008128:	0800827b 	.word	0x0800827b
 800812c:	080080d1 	.word	0x080080d1
 8008130:	08008181 	.word	0x08008181
 8008134:	080080d1 	.word	0x080080d1
 8008138:	080080d1 	.word	0x080080d1
 800813c:	0800821b 	.word	0x0800821b
 8008140:	682b      	ldr	r3, [r5, #0]
 8008142:	1d1a      	adds	r2, r3, #4
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	602a      	str	r2, [r5, #0]
 8008148:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800814c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008150:	2301      	movs	r3, #1
 8008152:	e09f      	b.n	8008294 <_printf_i+0x1ec>
 8008154:	6820      	ldr	r0, [r4, #0]
 8008156:	682b      	ldr	r3, [r5, #0]
 8008158:	0607      	lsls	r7, r0, #24
 800815a:	f103 0104 	add.w	r1, r3, #4
 800815e:	6029      	str	r1, [r5, #0]
 8008160:	d501      	bpl.n	8008166 <_printf_i+0xbe>
 8008162:	681e      	ldr	r6, [r3, #0]
 8008164:	e003      	b.n	800816e <_printf_i+0xc6>
 8008166:	0646      	lsls	r6, r0, #25
 8008168:	d5fb      	bpl.n	8008162 <_printf_i+0xba>
 800816a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800816e:	2e00      	cmp	r6, #0
 8008170:	da03      	bge.n	800817a <_printf_i+0xd2>
 8008172:	232d      	movs	r3, #45	; 0x2d
 8008174:	4276      	negs	r6, r6
 8008176:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800817a:	485a      	ldr	r0, [pc, #360]	; (80082e4 <_printf_i+0x23c>)
 800817c:	230a      	movs	r3, #10
 800817e:	e012      	b.n	80081a6 <_printf_i+0xfe>
 8008180:	682b      	ldr	r3, [r5, #0]
 8008182:	6820      	ldr	r0, [r4, #0]
 8008184:	1d19      	adds	r1, r3, #4
 8008186:	6029      	str	r1, [r5, #0]
 8008188:	0605      	lsls	r5, r0, #24
 800818a:	d501      	bpl.n	8008190 <_printf_i+0xe8>
 800818c:	681e      	ldr	r6, [r3, #0]
 800818e:	e002      	b.n	8008196 <_printf_i+0xee>
 8008190:	0641      	lsls	r1, r0, #25
 8008192:	d5fb      	bpl.n	800818c <_printf_i+0xe4>
 8008194:	881e      	ldrh	r6, [r3, #0]
 8008196:	4853      	ldr	r0, [pc, #332]	; (80082e4 <_printf_i+0x23c>)
 8008198:	2f6f      	cmp	r7, #111	; 0x6f
 800819a:	bf0c      	ite	eq
 800819c:	2308      	moveq	r3, #8
 800819e:	230a      	movne	r3, #10
 80081a0:	2100      	movs	r1, #0
 80081a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80081a6:	6865      	ldr	r5, [r4, #4]
 80081a8:	60a5      	str	r5, [r4, #8]
 80081aa:	2d00      	cmp	r5, #0
 80081ac:	bfa2      	ittt	ge
 80081ae:	6821      	ldrge	r1, [r4, #0]
 80081b0:	f021 0104 	bicge.w	r1, r1, #4
 80081b4:	6021      	strge	r1, [r4, #0]
 80081b6:	b90e      	cbnz	r6, 80081bc <_printf_i+0x114>
 80081b8:	2d00      	cmp	r5, #0
 80081ba:	d04b      	beq.n	8008254 <_printf_i+0x1ac>
 80081bc:	4615      	mov	r5, r2
 80081be:	fbb6 f1f3 	udiv	r1, r6, r3
 80081c2:	fb03 6711 	mls	r7, r3, r1, r6
 80081c6:	5dc7      	ldrb	r7, [r0, r7]
 80081c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80081cc:	4637      	mov	r7, r6
 80081ce:	42bb      	cmp	r3, r7
 80081d0:	460e      	mov	r6, r1
 80081d2:	d9f4      	bls.n	80081be <_printf_i+0x116>
 80081d4:	2b08      	cmp	r3, #8
 80081d6:	d10b      	bne.n	80081f0 <_printf_i+0x148>
 80081d8:	6823      	ldr	r3, [r4, #0]
 80081da:	07de      	lsls	r6, r3, #31
 80081dc:	d508      	bpl.n	80081f0 <_printf_i+0x148>
 80081de:	6923      	ldr	r3, [r4, #16]
 80081e0:	6861      	ldr	r1, [r4, #4]
 80081e2:	4299      	cmp	r1, r3
 80081e4:	bfde      	ittt	le
 80081e6:	2330      	movle	r3, #48	; 0x30
 80081e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80081ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80081f0:	1b52      	subs	r2, r2, r5
 80081f2:	6122      	str	r2, [r4, #16]
 80081f4:	f8cd a000 	str.w	sl, [sp]
 80081f8:	464b      	mov	r3, r9
 80081fa:	aa03      	add	r2, sp, #12
 80081fc:	4621      	mov	r1, r4
 80081fe:	4640      	mov	r0, r8
 8008200:	f7ff fee4 	bl	8007fcc <_printf_common>
 8008204:	3001      	adds	r0, #1
 8008206:	d14a      	bne.n	800829e <_printf_i+0x1f6>
 8008208:	f04f 30ff 	mov.w	r0, #4294967295
 800820c:	b004      	add	sp, #16
 800820e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008212:	6823      	ldr	r3, [r4, #0]
 8008214:	f043 0320 	orr.w	r3, r3, #32
 8008218:	6023      	str	r3, [r4, #0]
 800821a:	4833      	ldr	r0, [pc, #204]	; (80082e8 <_printf_i+0x240>)
 800821c:	2778      	movs	r7, #120	; 0x78
 800821e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008222:	6823      	ldr	r3, [r4, #0]
 8008224:	6829      	ldr	r1, [r5, #0]
 8008226:	061f      	lsls	r7, r3, #24
 8008228:	f851 6b04 	ldr.w	r6, [r1], #4
 800822c:	d402      	bmi.n	8008234 <_printf_i+0x18c>
 800822e:	065f      	lsls	r7, r3, #25
 8008230:	bf48      	it	mi
 8008232:	b2b6      	uxthmi	r6, r6
 8008234:	07df      	lsls	r7, r3, #31
 8008236:	bf48      	it	mi
 8008238:	f043 0320 	orrmi.w	r3, r3, #32
 800823c:	6029      	str	r1, [r5, #0]
 800823e:	bf48      	it	mi
 8008240:	6023      	strmi	r3, [r4, #0]
 8008242:	b91e      	cbnz	r6, 800824c <_printf_i+0x1a4>
 8008244:	6823      	ldr	r3, [r4, #0]
 8008246:	f023 0320 	bic.w	r3, r3, #32
 800824a:	6023      	str	r3, [r4, #0]
 800824c:	2310      	movs	r3, #16
 800824e:	e7a7      	b.n	80081a0 <_printf_i+0xf8>
 8008250:	4824      	ldr	r0, [pc, #144]	; (80082e4 <_printf_i+0x23c>)
 8008252:	e7e4      	b.n	800821e <_printf_i+0x176>
 8008254:	4615      	mov	r5, r2
 8008256:	e7bd      	b.n	80081d4 <_printf_i+0x12c>
 8008258:	682b      	ldr	r3, [r5, #0]
 800825a:	6826      	ldr	r6, [r4, #0]
 800825c:	6961      	ldr	r1, [r4, #20]
 800825e:	1d18      	adds	r0, r3, #4
 8008260:	6028      	str	r0, [r5, #0]
 8008262:	0635      	lsls	r5, r6, #24
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	d501      	bpl.n	800826c <_printf_i+0x1c4>
 8008268:	6019      	str	r1, [r3, #0]
 800826a:	e002      	b.n	8008272 <_printf_i+0x1ca>
 800826c:	0670      	lsls	r0, r6, #25
 800826e:	d5fb      	bpl.n	8008268 <_printf_i+0x1c0>
 8008270:	8019      	strh	r1, [r3, #0]
 8008272:	2300      	movs	r3, #0
 8008274:	6123      	str	r3, [r4, #16]
 8008276:	4615      	mov	r5, r2
 8008278:	e7bc      	b.n	80081f4 <_printf_i+0x14c>
 800827a:	682b      	ldr	r3, [r5, #0]
 800827c:	1d1a      	adds	r2, r3, #4
 800827e:	602a      	str	r2, [r5, #0]
 8008280:	681d      	ldr	r5, [r3, #0]
 8008282:	6862      	ldr	r2, [r4, #4]
 8008284:	2100      	movs	r1, #0
 8008286:	4628      	mov	r0, r5
 8008288:	f7f7 ffba 	bl	8000200 <memchr>
 800828c:	b108      	cbz	r0, 8008292 <_printf_i+0x1ea>
 800828e:	1b40      	subs	r0, r0, r5
 8008290:	6060      	str	r0, [r4, #4]
 8008292:	6863      	ldr	r3, [r4, #4]
 8008294:	6123      	str	r3, [r4, #16]
 8008296:	2300      	movs	r3, #0
 8008298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800829c:	e7aa      	b.n	80081f4 <_printf_i+0x14c>
 800829e:	6923      	ldr	r3, [r4, #16]
 80082a0:	462a      	mov	r2, r5
 80082a2:	4649      	mov	r1, r9
 80082a4:	4640      	mov	r0, r8
 80082a6:	47d0      	blx	sl
 80082a8:	3001      	adds	r0, #1
 80082aa:	d0ad      	beq.n	8008208 <_printf_i+0x160>
 80082ac:	6823      	ldr	r3, [r4, #0]
 80082ae:	079b      	lsls	r3, r3, #30
 80082b0:	d413      	bmi.n	80082da <_printf_i+0x232>
 80082b2:	68e0      	ldr	r0, [r4, #12]
 80082b4:	9b03      	ldr	r3, [sp, #12]
 80082b6:	4298      	cmp	r0, r3
 80082b8:	bfb8      	it	lt
 80082ba:	4618      	movlt	r0, r3
 80082bc:	e7a6      	b.n	800820c <_printf_i+0x164>
 80082be:	2301      	movs	r3, #1
 80082c0:	4632      	mov	r2, r6
 80082c2:	4649      	mov	r1, r9
 80082c4:	4640      	mov	r0, r8
 80082c6:	47d0      	blx	sl
 80082c8:	3001      	adds	r0, #1
 80082ca:	d09d      	beq.n	8008208 <_printf_i+0x160>
 80082cc:	3501      	adds	r5, #1
 80082ce:	68e3      	ldr	r3, [r4, #12]
 80082d0:	9903      	ldr	r1, [sp, #12]
 80082d2:	1a5b      	subs	r3, r3, r1
 80082d4:	42ab      	cmp	r3, r5
 80082d6:	dcf2      	bgt.n	80082be <_printf_i+0x216>
 80082d8:	e7eb      	b.n	80082b2 <_printf_i+0x20a>
 80082da:	2500      	movs	r5, #0
 80082dc:	f104 0619 	add.w	r6, r4, #25
 80082e0:	e7f5      	b.n	80082ce <_printf_i+0x226>
 80082e2:	bf00      	nop
 80082e4:	0800853d 	.word	0x0800853d
 80082e8:	0800854e 	.word	0x0800854e

080082ec <memmove>:
 80082ec:	4288      	cmp	r0, r1
 80082ee:	b510      	push	{r4, lr}
 80082f0:	eb01 0402 	add.w	r4, r1, r2
 80082f4:	d902      	bls.n	80082fc <memmove+0x10>
 80082f6:	4284      	cmp	r4, r0
 80082f8:	4623      	mov	r3, r4
 80082fa:	d807      	bhi.n	800830c <memmove+0x20>
 80082fc:	1e43      	subs	r3, r0, #1
 80082fe:	42a1      	cmp	r1, r4
 8008300:	d008      	beq.n	8008314 <memmove+0x28>
 8008302:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008306:	f803 2f01 	strb.w	r2, [r3, #1]!
 800830a:	e7f8      	b.n	80082fe <memmove+0x12>
 800830c:	4402      	add	r2, r0
 800830e:	4601      	mov	r1, r0
 8008310:	428a      	cmp	r2, r1
 8008312:	d100      	bne.n	8008316 <memmove+0x2a>
 8008314:	bd10      	pop	{r4, pc}
 8008316:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800831a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800831e:	e7f7      	b.n	8008310 <memmove+0x24>

08008320 <_sbrk_r>:
 8008320:	b538      	push	{r3, r4, r5, lr}
 8008322:	4d06      	ldr	r5, [pc, #24]	; (800833c <_sbrk_r+0x1c>)
 8008324:	2300      	movs	r3, #0
 8008326:	4604      	mov	r4, r0
 8008328:	4608      	mov	r0, r1
 800832a:	602b      	str	r3, [r5, #0]
 800832c:	f7f9 fea0 	bl	8002070 <_sbrk>
 8008330:	1c43      	adds	r3, r0, #1
 8008332:	d102      	bne.n	800833a <_sbrk_r+0x1a>
 8008334:	682b      	ldr	r3, [r5, #0]
 8008336:	b103      	cbz	r3, 800833a <_sbrk_r+0x1a>
 8008338:	6023      	str	r3, [r4, #0]
 800833a:	bd38      	pop	{r3, r4, r5, pc}
 800833c:	20005070 	.word	0x20005070

08008340 <memcpy>:
 8008340:	440a      	add	r2, r1
 8008342:	4291      	cmp	r1, r2
 8008344:	f100 33ff 	add.w	r3, r0, #4294967295
 8008348:	d100      	bne.n	800834c <memcpy+0xc>
 800834a:	4770      	bx	lr
 800834c:	b510      	push	{r4, lr}
 800834e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008352:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008356:	4291      	cmp	r1, r2
 8008358:	d1f9      	bne.n	800834e <memcpy+0xe>
 800835a:	bd10      	pop	{r4, pc}

0800835c <_realloc_r>:
 800835c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008360:	4680      	mov	r8, r0
 8008362:	4614      	mov	r4, r2
 8008364:	460e      	mov	r6, r1
 8008366:	b921      	cbnz	r1, 8008372 <_realloc_r+0x16>
 8008368:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800836c:	4611      	mov	r1, r2
 800836e:	f7ff bc49 	b.w	8007c04 <_malloc_r>
 8008372:	b92a      	cbnz	r2, 8008380 <_realloc_r+0x24>
 8008374:	f7ff fbda 	bl	8007b2c <_free_r>
 8008378:	4625      	mov	r5, r4
 800837a:	4628      	mov	r0, r5
 800837c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008380:	f000 f81b 	bl	80083ba <_malloc_usable_size_r>
 8008384:	4284      	cmp	r4, r0
 8008386:	4607      	mov	r7, r0
 8008388:	d802      	bhi.n	8008390 <_realloc_r+0x34>
 800838a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800838e:	d812      	bhi.n	80083b6 <_realloc_r+0x5a>
 8008390:	4621      	mov	r1, r4
 8008392:	4640      	mov	r0, r8
 8008394:	f7ff fc36 	bl	8007c04 <_malloc_r>
 8008398:	4605      	mov	r5, r0
 800839a:	2800      	cmp	r0, #0
 800839c:	d0ed      	beq.n	800837a <_realloc_r+0x1e>
 800839e:	42bc      	cmp	r4, r7
 80083a0:	4622      	mov	r2, r4
 80083a2:	4631      	mov	r1, r6
 80083a4:	bf28      	it	cs
 80083a6:	463a      	movcs	r2, r7
 80083a8:	f7ff ffca 	bl	8008340 <memcpy>
 80083ac:	4631      	mov	r1, r6
 80083ae:	4640      	mov	r0, r8
 80083b0:	f7ff fbbc 	bl	8007b2c <_free_r>
 80083b4:	e7e1      	b.n	800837a <_realloc_r+0x1e>
 80083b6:	4635      	mov	r5, r6
 80083b8:	e7df      	b.n	800837a <_realloc_r+0x1e>

080083ba <_malloc_usable_size_r>:
 80083ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083be:	1f18      	subs	r0, r3, #4
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	bfbc      	itt	lt
 80083c4:	580b      	ldrlt	r3, [r1, r0]
 80083c6:	18c0      	addlt	r0, r0, r3
 80083c8:	4770      	bx	lr
	...

080083cc <_init>:
 80083cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ce:	bf00      	nop
 80083d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083d2:	bc08      	pop	{r3}
 80083d4:	469e      	mov	lr, r3
 80083d6:	4770      	bx	lr

080083d8 <_fini>:
 80083d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083da:	bf00      	nop
 80083dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083de:	bc08      	pop	{r3}
 80083e0:	469e      	mov	lr, r3
 80083e2:	4770      	bx	lr
